<?xml version="1.0" encoding="utf-8"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/" xmlns:dc="http://purl.org/dc/elements/1.1/">
  <channel>
    <atom:link href="https://wukongnotnull.com/rss.xml" rel="self" type="application/rss+xml"/>
    <title>悟空非空也</title>
    <link>https://wukongnotnull.com/</link>
    <description>一个非同凡响的博客，集html,css,javascript,vue,java,go,linux,c,c++,Python等众多语言大成，碎片化博客 + 飞书知识库 + 云盘海量资源三种形式加持，强烈打造全网最权威的热门技术资源</description>
    <language>zh-CN</language>
    <pubDate>Sat, 04 Feb 2023 04:05:00 GMT</pubDate>
    <lastBuildDate>Sat, 04 Feb 2023 04:05:00 GMT</lastBuildDate>
    <generator>vuepress-plugin-feed2</generator>
    <docs>https://validator.w3.org/feed/docs/rss2.html</docs>
    <category>Java</category>
    <category>Java 常见问题</category>
    <category>前端</category>
    <category>编程导航</category>
    <category>好物分享</category>
    <category>博客</category>
    <category>插件</category>
    <category>面试</category>
    <item>
      <title>Mac上如何彻底卸载jdk</title>
      <link>https://wukongnotnull.com/posts/javaproblem/1.html</link>
      <guid>https://wukongnotnull.com/posts/javaproblem/1.html</guid>
      <source url="https://wukongnotnull.com/rss.xml">Mac上如何彻底卸载jdk</source>
      <category>Java</category>
      <category>Java 常见问题</category>
      <pubDate>Wed, 25 Jan 2023 00:00:00 GMT</pubDate>
      <content:encoded><![CDATA[<h1 id="mac上如何彻底卸载jdk" tabindex="-1"> Mac上如何彻底卸载jdk</h1>
<p>1、删除运行路径和运行环境</p>
<div><pre><code>
sudo rm -fr /Library/Internet\ Plug-Ins/JavaAppletPlugin.plugin
</code></pre><div aria-hidden="true"><div></div><div></div></div></div><p>输入密码，回车，继续</p>
<div><pre><code>sudo rm -fr /Library/PreferencesPanes/JavaControlPanel.prefPane
sudo rm -fr ~/Library/Application\ Support/Java
</code></pre><div aria-hidden="true"><div></div><div></div></div></div><p>2、查看当前jdk版本</p>
<div><pre><code>java -version
</code></pre><div aria-hidden="true"><div></div></div></div><p>3、查看jdk路径</p>
<div><pre><code>/usr/libexec/java_home -V
</code></pre><div aria-hidden="true"><div></div></div></div><p>4、删除当前版本的jdk，注意检查版本号是不是当前想要删除的版本</p>
<div><pre><code>sudo rm -rf /Library/Java/JavaVirtualMachines/jdk-8.0.5.jdk
</code></pre><div aria-hidden="true"><div></div></div></div><p>5、查看jdk是否卸载完毕</p>
<div><pre><code>java -version
</code></pre><div aria-hidden="true"><div></div></div></div>]]></content:encoded>
    </item>
    <item>
      <title>前端文档和技术汇总</title>
      <link>https://wukongnotnull.com/posts/goodshare/1.html</link>
      <guid>https://wukongnotnull.com/posts/goodshare/1.html</guid>
      <source url="https://wukongnotnull.com/rss.xml">前端文档和技术汇总</source>
      <category>前端</category>
      <category>编程导航</category>
      <pubDate>Tue, 25 Oct 2022 00:00:00 GMT</pubDate>
      <content:encoded><![CDATA[<h1 id="前端文档和技术汇总" tabindex="-1"> 前端文档和技术汇总</h1>
<h2 id="前端中文文档" tabindex="-1"> 前端中文文档</h2>
<p>::: cardList 4</p>
<div><pre><code><span>-</span> <span>name</span><span>:</span> Alpine
  <span>desc</span><span>:</span> 响应式声明式
  <span>link</span><span>:</span> https<span>:</span>//www.alpinejs.cn/
  <span>bgColor</span><span>:</span> <span>'#CBEAFA'</span> <span># 可选，默认var(--bodyBg)。颜色值有#号时请添加单引号</span>
  <span>textColor</span><span>:</span> <span>'#6854A1'</span> <span># 可选，默认var(--textColor)</span>
<span>-</span> <span>name</span><span>:</span> Angular
  <span>desc</span><span>:</span> 优秀JS框架
  <span>link</span><span>:</span> https<span>:</span>//angular.cn/docs
  <span>bgColor</span><span>:</span> <span>'#CBEAFA'</span> <span># 可选，默认var(--bodyBg)。颜色值有#号时请添加单引号</span>
  <span>textColor</span><span>:</span> <span>'#6854A1'</span> <span># 可选，默认var(--textColor)</span>
<span>-</span> <span>name</span><span>:</span> Ant 
  <span>desc</span><span>:</span> 中台前端
  <span>link</span><span>:</span> https<span>:</span>//pro.ant.design/zh<span>-</span>CN/docs/overview/
  <span>bgColor</span><span>:</span> <span>'#CBEAFA'</span> <span># 可选，默认var(--bodyBg)。颜色值有#号时请添加单引号</span>
  <span>textColor</span><span>:</span> <span>'#6854A1'</span> <span># 可选，默认var(--textColor)</span>
<span>-</span> <span>name</span><span>:</span> Babel
  <span>desc</span><span>:</span> JS 编译器
  <span>link</span><span>:</span> https<span>:</span>//www.babeljs.cn/
  <span>bgColor</span><span>:</span> <span>'#FCDBA0'</span>
  <span>textColor</span><span>:</span> <span>'#A05F2C'</span>  
<span>-</span> <span>name</span><span>:</span> Bootstrap
  <span>desc</span><span>:</span> CSS 流行框架
  <span>link</span><span>:</span> https<span>:</span>//www.bootcss.com/
  <span>bgColor</span><span>:</span> <span>'#CBEAFA'</span> <span># 可选，默认var(--bodyBg)。颜色值有#号时请添加单引号</span>
  <span>textColor</span><span>:</span> <span>'#6854A1'</span> <span># 可选，默认var(--textColor)</span>
<span>-</span> <span>name</span><span>:</span> Docusaurus
  <span>desc</span><span>:</span> 静态站点生成器
  <span>link</span><span>:</span> https<span>:</span>//www.docusaurus.cn/
  <span>bgColor</span><span>:</span> <span>'#CBEAFA'</span> <span># 可选，默认var(--bodyBg)。颜色值有#号时请添加单引号</span>
  <span>textColor</span><span>:</span> <span>'#6854A1'</span> <span># 可选，默认var(--textColor)</span>
<span>-</span> <span>name</span><span>:</span> Electron
  <span>desc</span><span>:</span> 前端跨平台框架
  <span>link</span><span>:</span> https<span>:</span>//www.electronjs.org/docs/latest
  <span>bgColor</span><span>:</span> <span>'#CBEAFA'</span> <span># 可选，默认var(--bodyBg)。颜色值有#号时请添加单引号</span>
  <span>textColor</span><span>:</span> <span>'#6854A1'</span> <span># 可选，默认var(--textColor)</span>
<span>-</span> <span>name</span><span>:</span> ElementUI
  <span>desc</span><span>:</span> Vue组件库
  <span>link</span><span>:</span> https<span>:</span>//element<span>-</span>plus.gitee.io/zh<span>-</span>CN/guide/design.html
  <span>bgColor</span><span>:</span> <span>'#CBEAFA'</span> <span># 可选，默认var(--bodyBg)。颜色值有#号时请添加单引号</span>
  <span>textColor</span><span>:</span> <span>'#6854A1'</span> <span># 可选，默认var(--textColor)</span>
<span>-</span> <span>name</span><span>:</span> ESLint 
  <span>desc</span><span>:</span> JS代码检查工具
  <span>link</span><span>:</span> https<span>:</span>//cn.eslint.org/
  <span>bgColor</span><span>:</span> <span>'#CBEAFA'</span> <span># 可选，默认var(--bodyBg)。颜色值有#号时请添加单引号</span>
  <span>textColor</span><span>:</span> <span>'#6854A1'</span> <span># 可选，默认var(--textColor)  </span>
<span>-</span> <span>name</span><span>:</span> Gulp
  <span>desc</span><span>:</span> 自动化构建工具
 <span># avatar: https://cdn.jsdelivr.net/gh/xugaoyi/image_store/blog/20200122153807.jpg # 可选</span>
  <span>link</span><span>:</span> https<span>:</span>//www.gulpjs.com.cn/
  <span>bgColor</span><span>:</span> <span>'#CBEAFA'</span> <span># 可选，默认var(--bodyBg)。颜色值有#号时请添加单引号</span>
  <span>textColor</span><span>:</span> <span>'#6854A1'</span> <span># 可选，默认var(--textColor)</span>
<span>-</span> <span>name</span><span>:</span> Lerna
  <span>desc</span><span>:</span> 管理工具
  <span>link</span><span>:</span> https<span>:</span>//www.lernajs.cn/
  <span>bgColor</span><span>:</span> <span>'#CBEAFA'</span> <span># 可选，默认var(--bodyBg)。颜色值有#号时请添加单引号</span>
  <span>textColor</span><span>:</span> <span>'#6854A1'</span> <span># 可选，默认var(--textColor)</span>
<span>-</span> <span>name</span><span>:</span> LESS
  <span>desc</span><span>:</span> CSS赋予动态语言
  <span>link</span><span>:</span> https<span>:</span>//less.bootcss.com/
  <span>bgColor</span><span>:</span> <span>'#CBEAFA'</span> <span># 可选，默认var(--bodyBg)。颜色值有#号时请添加单引号</span>
  <span>textColor</span><span>:</span> <span>'#6854A1'</span> <span># 可选，默认var(--textColor)</span>
<span>-</span> <span>name</span><span>:</span> Lodash
  <span>desc</span><span>:</span> JS工具库
  <span>link</span><span>:</span> https<span>:</span>//www.lodashjs.com/
  <span>bgColor</span><span>:</span> <span>'#CBEAFA'</span> <span># 可选，默认var(--bodyBg)。颜色值有#号时请添加单引号</span>
  <span>textColor</span><span>:</span> <span>'#6854A1'</span> <span># 可选，默认var(--textColor)</span>
<span>-</span> <span>name</span><span>:</span> Markdown
  <span>desc</span><span>:</span> 轻量级标记语言
  <span>link</span><span>:</span> https<span>:</span>//www.markdown.xyz/
  <span>bgColor</span><span>:</span> <span>'#CBEAFA'</span> <span># 可选，默认var(--bodyBg)。颜色值有#号时请添加单引号</span>
  <span>textColor</span><span>:</span> <span>'#6854A1'</span> <span># 可选，默认var(--textColor)  </span>
<span>-</span> <span>name</span><span>:</span> MDN
  <span>desc</span><span>:</span> 全球性权威
  <span>link</span><span>:</span> https<span>:</span>//developer.mozilla.org/zh<span>-</span>CN/docs/Learn
  <span>bgColor</span><span>:</span> <span>'#CBEAFA'</span> <span># 可选，默认var(--bodyBg)。颜色值有#号时请添加单引号</span>
  <span>textColor</span><span>:</span> <span>'#6854A1'</span> <span># 可选，默认var(--textColor)</span>
<span>-</span> <span>name</span><span>:</span> MDX
  <span>desc</span><span>:</span> MD中编写JSX
  <span>link</span><span>:</span> https<span>:</span>//www.mdxjs.cn/
  <span>bgColor</span><span>:</span> <span>'#CBEAFA'</span> <span># 可选，默认var(--bodyBg)。颜色值有#号时请添加单引号</span>
  <span>textColor</span><span>:</span> <span>'#6854A1'</span> <span># 可选，默认var(--textColor)  </span>
<span>-</span> <span>name</span><span>:</span> Next
  <span>desc</span><span>:</span> 轻量React框架
  <span>link</span><span>:</span> https<span>:</span>//www.nextjs.cn/
  <span>bgColor</span><span>:</span> <span>'#CBEAFA'</span> <span># 可选，默认var(--bodyBg)。颜色值有#号时请添加单引号</span>
  <span>textColor</span><span>:</span> <span>'#6854A1'</span> <span># 可选，默认var(--textColor)  </span>
<span>-</span> <span>name</span><span>:</span> NPM 
  <span>desc</span><span>:</span> 包管理工具
  <span>link</span><span>:</span> https<span>:</span>//www.npmjs.cn/
  <span>bgColor</span><span>:</span> <span>'#CBEAFA'</span> <span># 可选，默认var(--bodyBg)。颜色值有#号时请添加单引号</span>
  <span>textColor</span><span>:</span> <span>'#6854A1'</span> <span># 可选，默认var(--textColor)</span>
<span>-</span> <span>name</span><span>:</span> Nuxt
  <span>desc</span><span>:</span> 基于Vue框架
  <span>link</span><span>:</span> https<span>:</span>//www.nuxtjs.cn/
  <span>bgColor</span><span>:</span> <span>'#718971'</span>
  <span>textColor</span><span>:</span> <span>'#fff'</span>
<span>-</span> <span>name</span><span>:</span> Parcel
  <span>desc</span><span>:</span> Web打包工具
  <span>link</span><span>:</span> https<span>:</span>//www.parceljs.cn/
  <span>bgColor</span><span>:</span> <span>'#FCDBA0'</span>
  <span>textColor</span><span>:</span> <span>'#A05F2C'</span>
<span>-</span> <span>name</span><span>:</span> pnpm
  <span>desc</span><span>:</span> 包管理工具
  <span>link</span><span>:</span> https<span>:</span>//www.pnpm.cn/
  <span>bgColor</span><span>:</span> <span>'#FCDBA0'</span>
  <span>textColor</span><span>:</span> <span>'#A05F2C'</span>
<span>-</span> <span>name</span><span>:</span> Preact
  <span>desc</span><span>:</span> React轻量替代方案
  <span>link</span><span>:</span> https<span>:</span>//www.preactjs.com.cn/
  <span>bgColor</span><span>:</span> <span>'#FCDBA0'</span>
  <span>textColor</span><span>:</span> <span>'#A05F2C'</span>
<span>-</span> <span>name</span><span>:</span> PurgeCss
  <span>desc</span><span>:</span> CSS管理工具
  <span>link</span><span>:</span> https<span>:</span>//www.purgecss.cn/
  <span>bgColor</span><span>:</span> <span>'#FCDBA0'</span>
  <span>textColor</span><span>:</span> <span>'#A05F2C'</span>
<span>-</span> <span>name</span><span>:</span> React
  <span>desc</span><span>:</span> 构建用户界面
  <span>link</span><span>:</span> https<span>:</span>//react.docschina.org/
  <span>bgColor</span><span>:</span> <span>'#FCDBA0'</span>
  <span>textColor</span><span>:</span> <span>'#A05F2C'</span>
<span>-</span> <span>name</span><span>:</span> Recoil
  <span>desc</span><span>:</span> React状态管理库
  <span>link</span><span>:</span> https<span>:</span>//www.recoiljs.cn/
  <span>bgColor</span><span>:</span> <span>'#FCDBA0'</span>
  <span>textColor</span><span>:</span> <span>'#A05F2C'</span>
<span>-</span> <span>name</span><span>:</span> Redux
  <span>desc</span><span>:</span> JS状态管理
  <span>link</span><span>:</span> https<span>:</span>//www.reduxjs.cn/
  <span>bgColor</span><span>:</span> <span>'#FCDBA0'</span>
  <span>textColor</span><span>:</span> <span>'#A05F2C'</span>
<span>-</span> <span>name</span><span>:</span> Rollup
  <span>desc</span><span>:</span> 模块打包工具
  <span>link</span><span>:</span> https<span>:</span>//www.rollupjs.com/
  <span>bgColor</span><span>:</span> <span>'#FCDBA0'</span>
  <span>textColor</span><span>:</span> <span>'#A05F2C'</span>
<span>-</span> <span>name</span><span>:</span> Sass
  <span>desc</span><span>:</span> CSS扩展语言解析器
  <span>link</span><span>:</span> https<span>:</span>//www.sasscss.com/
  <span>bgColor</span><span>:</span> <span>'#FCDBA0'</span>
  <span>textColor</span><span>:</span> <span>'#A05F2C'</span>
<span>-</span> <span>name</span><span>:</span> Svelte
  <span>desc</span><span>:</span> 构建Web
  <span>link</span><span>:</span> https<span>:</span>//www.sveltejs.cn/
  <span>bgColor</span><span>:</span> <span>'#FCDBA0'</span>
  <span>textColor</span><span>:</span> <span>'#A05F2C'</span>
<span>-</span> <span>name</span><span>:</span> Tailwind CSS
  <span>desc</span><span>:</span> CSS框架
  <span>link</span><span>:</span> https<span>:</span>//www.tailwindcss.cn/
  <span>bgColor</span><span>:</span> <span>'#FCDBA0'</span>
  <span>textColor</span><span>:</span> <span>'#A05F2C'</span>
<span>-</span> <span>name</span><span>:</span> TypeScript
  <span>desc</span><span>:</span> 微软出品
  <span>link</span><span>:</span> https<span>:</span>//typescript.bootcss.com/
  <span>bgColor</span><span>:</span> <span>'#FCDBA0'</span>
  <span>textColor</span><span>:</span> <span>'#A05F2C'</span>
<span>-</span> <span>name</span><span>:</span> ViewUI
  <span>desc</span><span>:</span> Vue 组件库
  <span>link</span><span>:</span> https<span>:</span>//www.iviewui.com/
  <span>bgColor</span><span>:</span> <span>'#FCDBA0'</span>
  <span>textColor</span><span>:</span> <span>'#A05F2C'</span>
<span>-</span> <span>name</span><span>:</span> Vue
  <span>desc</span><span>:</span> 渐进式JS框架
  <span>link</span><span>:</span> https<span>:</span>//v3.cn.vuejs.org/
  <span>bgColor</span><span>:</span> <span>'#FCDBA0'</span>
  <span>textColor</span><span>:</span> <span>'#A05F2C'</span>
<span>-</span> <span>name</span><span>:</span> WebPack
  <span>desc</span><span>:</span> 模块化管理打包工具
  <span>link</span><span>:</span> https<span>:</span>//www.webpackjs.com/
  <span>bgColor</span><span>:</span> <span>'#FCDBA0'</span>
  <span>textColor</span><span>:</span> <span>'#A05F2C'</span>
<span>-</span> <span>name</span><span>:</span> Yarn
  <span>desc</span><span>:</span> 依赖管理工具
  <span>link</span><span>:</span> https<span>:</span>//yarn.bootcss.com/
  <span>bgColor</span><span>:</span> <span>'#FCDBA0'</span>
  <span>textColor</span><span>:</span> <span>'#A05F2C'</span>
<span>-</span> <span>name</span><span>:</span> Yarn v2
  <span>desc</span><span>:</span> 依赖管理工具
  <span>link</span><span>:</span> https<span>:</span>//www.yarnpkg.cn/
  <span>bgColor</span><span>:</span> <span>'#FCDBA0'</span>
  <span>textColor</span><span>:</span> <span>'#A05F2C'</span>
</code></pre><div aria-hidden="true"><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div></div></div><p>:::</p>
<h2 id="前端常用" tabindex="-1"> 前端常用</h2>
<ul>
<li><a href="https://github.com/sweetalert2/sweetalert2" target="_blank" rel="noopener noreferrer"><strong>sweetalert2</strong></a> 一个自适应，且自定义性强的弹出框（零依赖）</li>
<li><a href="https://github.com/atomiks/tippyjs" target="_blank" rel="noopener noreferrer"><strong>tippy.js</strong></a> 最著名的 tooltip/popover library</li>
<li><a href="https://github.com/text-mask/text-mask" target="_blank" rel="noopener noreferrer"><strong>text-mask</strong></a> 可以让 input 按照规则输入(如电话,email,日期,信用卡等)，特殊格式 input</li>
<li><a href="https://github.com/sarahdayan/dinero.js" target="_blank" rel="noopener noreferrer"><strong>dinero.js</strong></a> 用来创建、计算和格式化货币价值的不可变的框架，支持国际化</li>
<li><a href="https://github.com/lerna/lerna" target="_blank" rel="noopener noreferrer"><strong>lerna</strong></a> 大项目版本控制工具，项目中可以有多个 package.json 文件</li>
<li><a href="https://github.com/RevillWeb/img-2" target="_blank" rel="noopener noreferrer"><strong>img-2</strong></a> 一个提高图片加载性能和体验的库，懒加载使用 web worker 模糊预览</li>
<li><a href="https://github.com/Valve/fingerprintjs2" target="_blank" rel="noopener noreferrer"><strong>fingerprintjs</strong></a> 是一个快速的浏览器指纹库，通浏览环境的一系列配置生成 id</li>
<li><a href="https://github.com/epoberezkin/ajv" target="_blank" rel="noopener noreferrer"><strong>ajv</strong></a> 一个 json schema 验证的库</li>
<li><a href="https://github.com/xx45/dayjs" target="_blank" rel="noopener noreferrer"><strong>dayjs</strong></a> 一个轻量级类 moment.js API 时间库</li>
<li><a href="https://github.com/PrismJS/prism" target="_blank" rel="noopener noreferrer"><strong>primjs</strong></a> 让页面支持代码高亮</li>
<li><a href="https://github.com/RelaxedJS/ReLaXed" target="_blank" rel="noopener noreferrer"><strong>ReLaXed</strong></a> 一个将 document html 转成 PDF 的工具</li>
<li><a href="https://github.com/transloadit/uppy" target="_blank" rel="noopener noreferrer"><strong>uppy</strong></a> 一个很好看的也很好用的 前端上传库</li>
<li><a href="https://github.com/pqina/filepond" target="_blank" rel="noopener noreferrer"><strong>Filepond</strong></a> 一个小巧的文件上传库</li>
<li><a href="http://ui.toast.com/tui-calendar/" target="_blank" rel="noopener noreferrer"><strong>tui-calendar</strong></a> 功能全面的日程安排日历控件，还支持拖拽</li>
<li><a href="https://github.com/nhnent/tui.editor" target="_blank" rel="noopener noreferrer"><strong>tui.editor</strong></a> markdown 所见即所得编辑器</li>
<li><a href="https://github.com/tabler/tabler" target="_blank" rel="noopener noreferrer"><strong>tabler</strong></a> 基于 Bootstrap 4 的 Dashboard UI Kit 和美观 高颜值 ui 模板</li>
<li><a href="https://github.com/BoxFactura/pulltorefresh.js" target="_blank" rel="noopener noreferrer"><strong>pulltorefresh.js</strong></a> 下个下拉刷新插件</li>
<li><a href="https://github.com/yued-fe/lulu" target="_blank" rel="noopener noreferrer"><strong>lulu</strong></a> 腾讯阅文基于 jQuery，针对 PC 网站 IE8+（peak 主题）的前端 UI 框架</li>
<li><a href="https://github.com/chancejs/chancejs" target="_blank" rel="noopener noreferrer"><strong>chancejs</strong></a> 生成随机数据的库</li>
<li><a href="https://github.com/spritejs/spritejs" target="_blank" rel="noopener noreferrer"><strong>spritejs</strong></a> 360 奇舞团出的跨平台绘图对象模型</li>
<li><a href="https://github.com/nhnent/tui.image-editor" target="_blank" rel="noopener noreferrer"><strong>tui.image-editor</strong></a> 一个功能齐全的在线图片编辑，基于 canvas</li>
<li><a href="https://github.com/ai/nanoid" target="_blank" rel="noopener noreferrer"><strong>nanoid</strong></a> 前端轻量 unique string ID 生成库</li>
<li><a href="https://github.com/pubkey/rxdb" target="_blank" rel="noopener noreferrer"><strong>rxdb</strong></a> 一款开源的快速、灵活的客户端数据库，支持各种浏览器以及 NodeJS，Electron、React 等等，是 PouthDB 之上的一个封装库</li>
<li><a href="https://github.com/danburzo/percollate" target="_blank" rel="noopener noreferrer"><strong>percollate</strong></a> 命令行工具 能将网页转换成 pdf</li>
<li><a href="https://github.com/sokra/rawact" target="_blank" rel="noopener noreferrer"><strong>rawact</strong></a> 一个 babel 插件，把 react 组件转为原生 dom</li>
<li><a href="https://github.com/gruns/irondb" target="_blank" rel="noopener noreferrer"><strong>irondb</strong></a> 是一个浏览器 key-value 储存的封装库，把 Cookies、IndexedDB、LocalStorage、SessionStorage 统一成一个接口。它的最大特色就是数据冗余机制，即使某种底层储存机制失效，它可以从其他机制恢复数据。</li>
<li><a href="https://github.com/MikeMcl/big.js" target="_blank" rel="noopener noreferrer"><strong>big.js</strong></a> 解决 js 浮点数问题。 主要就是 Big Number 或者小数点温柔</li>
<li><a href="https://github.com/MikeMcl/bignumber.js" target="_blank" rel="noopener noreferrer"><strong>bignumber.js</strong></a> 同上</li>
<li><a href="https://github.com/dollarshaveclub/stickybits" target="_blank" rel="noopener noreferrer"><strong>stickybits</strong></a> CSS 的 position: sticky 是一个很有用的设置，但是老的浏览器不支持。这个 JS 库是该功能的垫片库。</li>
<li><a href="https://github.com/mozilla-services/react-jsonschema-form" target="_blank" rel="noopener noreferrer"><strong>react-jsonschema-form</strong></a> Mozilla service 开源了一个通过 JSON 直接生成表单的 React 组件</li>
<li><a href="https://github.com/nosir/cleave.js" target="_blank" rel="noopener noreferrer"><strong>cleave.js</strong></a> 用于在输入时格式化输入内容（信用卡格式、日期等）</li>
<li><a href="https://github.com/rikschennink/shiny" target="_blank" rel="noopener noreferrer"><strong>shiny</strong></a> 在手机设备上模拟光的反射效果。 支持 DeviceMotion 事件</li>
<li><a href="https://github.com/cloudfetch/cloudquery" target="_blank" rel="noopener noreferrer"><strong>cloudquery</strong></a> Turn any website to serverless API</li>
<li><a href="https://github.com/yujiangshui/A-Programmers-Guide-to-English" target="_blank" rel="noopener noreferrer"><strong>A-Programmers-Guide-to-English</strong></a> 专为程序员编写的英语学习指南。</li>
<li><a href="https://github.com/rrweb-io/rrweb" target="_blank" rel="noopener noreferrer"><strong>rrweb</strong></a> 一个可以记录你页面中所有操作的库</li>
<li><a href="https://github.com/ksky521/nodeppt" target="_blank" rel="noopener noreferrer"><strong>nodeppt</strong></a> markdown 写 ppt</li>
<li><a href="https://github.com/nextapps-de/flexsearch" target="_blank" rel="noopener noreferrer"><strong>flexsearch</strong></a> 能让你更加高效和快速的检索文本内容</li>
<li><a href="https://github.com/toddmotto/public-apis" target="_blank" rel="noopener noreferrer"><strong>public-apis</strong></a> 汇集了市面上一些对外免费开放的 api，做一些自己练手 app 的时候很好用。</li>
<li><a href="https://github.com/appleple/scroll-hint" target="_blank" rel="noopener noreferrer"><strong>scroll-hint</strong></a> 用于提示用户页面可以左右滑动的一个提示库</li>
<li><a href="https://github.com/krisk/fuse" target="_blank" rel="noopener noreferrer"><strong>fuse.js</strong></a> 轻量级前端模糊查询库 非常的好用</li>
<li><a href="https://github.com/eligrey/FileSaver.js" target="_blank" rel="noopener noreferrer"><strong>FileSaver.js</strong></a> 文件下载插件 很多时候下载会有兼容性问题，它能帮你解决这些问题</li>
<li><a href="https://github.com/instantpage/instant.page" target="_blank" rel="noopener noreferrer"><strong>instant.page</strong></a> 一个判断用户行为 预测提前加载页面的库</li>
<li><a href="https://github.com/sindresorhus/screenfull.js" target="_blank" rel="noopener noreferrer"><strong>screenfull.js</strong></a> 浏览器全屏插件 解决了不少兼容性问题</li>
<li><a href="https://github.com/vuejs/vuepress" target="_blank" rel="noopener noreferrer"><strong>VuePress</strong></a> 本网站就是基于它实现的，简单方便的静态网站生成器</li>
<li><a href="https://github.com/Simonwep/selection" target="_blank" rel="noopener noreferrer"><strong>selection</strong></a> 可视化选择页面元素的库</li>
<li><a href="https://github.com/scroll-out/scroll-out" target="_blank" rel="noopener noreferrer"><strong>scroll-out</strong></a> 滚动效果（滚动视差）的框架，框架大小不到 1KB,使用回调的方式将相关动画元素的属性进行实时分配</li>
<li><a href="https://github.com/gpujs/gpu.js" target="_blank" rel="noopener noreferrer"><strong>gpu.js</strong></a> 通过将 js 转为特定的 language，利用 GPU 来执行，大大提高了执行性能和速度</li>
<li><a href="https://github.com/stuyam/pressure" target="_blank" rel="noopener noreferrer"><strong>pressure</strong></a> 前端实现 3D Touch</li>
<li><a href="https://github.com/hammerjs/hammer.js" target="_blank" rel="noopener noreferrer"><strong>hammer</strong></a> 移动端手势库</li>
<li><a href="https://github.com/AlloyTeam/AlloyFinger" target="_blank" rel="noopener noreferrer"><strong>AlloyFinger</strong></a> 腾讯出的手势库</li>
<li><a href="https://github.com/typicode/lowdb" target="_blank" rel="noopener noreferrer"><strong>lowdb</strong></a> LowDB 是一个本地 JSON 数据库，基于 Lodash 开发的</li>
<li><a href="https://github.com/typicode/json-server" target="_blank" rel="noopener noreferrer"><strong>JSON-server</strong></a> 可以配合 LowDB 使用 快速搭建一个 REST API</li>
<li><a href="https://github.com/olivernn/lunr.js" target="_blank" rel="noopener noreferrer"><strong>lunr.js</strong></a> 是个用于浏览器的轻量级 JavaScript 全文搜索引擎,对于一些小型的博客、开发者文档或 Wiki 网站来说,完全可以通过它实现站内离线搜索</li>
<li><a href="https://github.com/mathiasbynens/he" target="_blank" rel="noopener noreferrer"><strong>he</strong></a> 一个前端 encoder/decoder 库</li>
<li><a href="https://github.com/benhowdle89/grade" target="_blank" rel="noopener noreferrer"><strong>grade</strong></a> 一个可以根据你的 图片 调整底色的插件</li>
<li><a href="https://github.com/sindresorhus/pretty-bytes" target="_blank" rel="noopener noreferrer"><strong>pretty-bytes</strong></a> 将字节转换成可以读的字符串，比如 1337 个字节，会显示成 1.34 KB</li>
<li><a href="https://runkit.com" target="_blank" rel="noopener noreferrer"><strong>runkit</strong></a> 一个基于 node 的在线 playground</li>
<li><a href="https://github.com/timqian/chart.xkcd" target="_blank" rel="noopener noreferrer"><strong>chart.xkcd</strong></a> 手绘风格的图表库</li>
<li><a href="https://sketchviz.com/new" target="_blank" rel="noopener noreferrer"><strong>sketchviz</strong></a> 手绘风格流程图</li>
<li><a href="https://github.com/lrsjng/pagemap" target="_blank" rel="noopener noreferrer"><strong>pagemap</strong></a> Mini map for web pages 页面导航图</li>
<li><a href="https://github.com/commonmark/commonmark.js" target="_blank" rel="noopener noreferrer"><strong>commonmark.js</strong></a> parser and renderer markdown</li>
<li><a href="https://github.com/willmcpo/body-scroll-lock" target="_blank" rel="noopener noreferrer"><strong>body-scroll-lock</strong></a> 解决滚动穿透问题</li>
<li><a href="https://github.com/lodash/lodash" target="_blank" rel="noopener noreferrer"><strong>lodash</strong></a> 前端工具函数集合</li>
<li><a href="https://github.com/iamkun/dayjs" target="_blank" rel="noopener noreferrer"><strong>dayjs</strong></a> 时间处理库，不过大部分情况下我还是用自己的封装的函数</li>
<li><a href="https://github.com/sachinchoolur/lightgallery.js" target="_blank" rel="noopener noreferrer"><strong>lightgallery</strong></a> 图片预览组件</li>
<li><a href="https://github.com/dimsemenov/photoswipe" target="_blank" rel="noopener noreferrer"><strong>photoswipe</strong></a> 图片预览组件，支持移动端</li>
<li><a href="https://github.com/ColinEspinas/darken" target="_blank" rel="noopener noreferrer"><strong>darken</strong></a> 页面黑夜模式切换</li>
<li><a href="https://github.com/developit/mitt" target="_blank" rel="noopener noreferrer"><strong>mitt</strong></a> 轻量级 pub/sub</li>
<li><a href="https://github.com/apostrophecms/sanitize-html" target="_blank" rel="noopener noreferrer">sanitize-html</a> html 过滤库，防 xss</li>
<li><a href="https://github.com/cure53/DOMPurify" target="_blank" rel="noopener noreferrer">DOMPurify</a> 比 sanitize-html 更轻量，建议一般业务用这个</li>
</ul>
<h2 id="css-动画" tabindex="-1"> Css &amp;&amp; 动画</h2>
<ul>
<li><a href="https://github.com/daneden/animate.css" target="_blank" rel="noopener noreferrer"><strong>animate.css</strong></a> 最有名的动画效果库</li>
<li><a href="https://github.com/miniMAC/magic" target="_blank" rel="noopener noreferrer"><strong>magic.css</strong></a> css 动画效果库 类似 animate.css</li>
<li><a href="https://github.com/Popmotion/popmotion" target="_blank" rel="noopener noreferrer"><strong>popmotion</strong></a> 一个函数式声明前端动画库</li>
<li><a href="https://github.com/BcRikko/NES.css" target="_blank" rel="noopener noreferrer"><strong>NES.css</strong></a> 任天堂主题风格 css 库</li>
<li><a href="https://github.com/VincentGarreau/particles.js" target="_blank" rel="noopener noreferrer"><strong>particles.js</strong></a> 前端实现颗粒粒子的动画效果库，比较炫酷，但相对的也比较吃性能</li>
<li><a href="https://www.getpapercss.com/docs/" target="_blank" rel="noopener noreferrer"><strong>PaperCSS</strong></a> 手绘风格感觉 css 库</li>
<li><a href="https://github.com/pshihn/rough" target="_blank" rel="noopener noreferrer"><strong>rough</strong></a> 基于 Canvas 的手绘风格图形库</li>
<li><a href="https://github.com/wiredjs/wired-elements" target="_blank" rel="noopener noreferrer"><strong>wired-elements</strong></a> 基于 rough.js 分装 button input radio 等组件。它的底层是 Web components</li>
<li><a href="https://github.com/jwilber/roughViz" target="_blank" rel="noopener noreferrer"><strong>roughViz</strong></a> rough 风格的图表库 手绘风格的图表库</li>
<li><a href="https://github.com/liabru/matter-js" target="_blank" rel="noopener noreferrer"><strong>matter-js</strong></a> web 物理引擎</li>
<li><a href="https://github.com/webkul/micron" target="_blank" rel="noopener noreferrer"><strong>micron</strong></a> 通过在元素上绑定属性从而实现动画效果的库</li>
<li><a href="https://github.com/NigelOToole/direction-reveal" target="_blank" rel="noopener noreferrer"><strong>direction-reveal</strong></a> 根据鼠标进入位置，展现从不同方向 展现 hover 效果</li>
<li><a href="https://github.com/alexfoxy/laxxx" target="_blank" rel="noopener noreferrer"><strong>laxxx</strong></a> 滚动特效库 轻量级 压缩完 2kb</li>
<li><a href="https://cssfx.dev/" target="_blank" rel="noopener noreferrer"><strong>cssfx</strong></a> 优雅的 CSS 动画效果，开箱即用</li>
<li><a href="https://github.com/metafizzy/zdog" target="_blank" rel="noopener noreferrer"><strong>zdog</strong></a> 3D engine 引擎</li>
<li><a href="https://github.com/cmiscm/leonsans" target="_blank" rel="noopener noreferrer"><strong>leonsans</strong></a> 酷炫的 字体 动画 geometric sans-serif typeface made with code</li>
<li><a href="https://github.com/css-doodle/css-doodle" target="_blank" rel="noopener noreferrer"><strong>css-doodle</strong></a> A web component for drawing patterns with CSS 一个用于使用 CSS 绘制图案的 Web 组件</li>
</ul>
<h2 id="vue" tabindex="-1"> Vue</h2>
<ul>
<li><a href="https://github.com/shentao/vue-multiselect" target="_blank" rel="noopener noreferrer"><strong>vue-multiselect</strong></a> select 组件 目前 vue 里面用过最好用的</li>
<li><a href="https://github.com/SortableJS/Vue.Draggable" target="_blank" rel="noopener noreferrer"><strong>Vue.Draggable</strong></a> DnD 拖拽组件 基于 Sortable.js 的 vue 版本</li>
<li><a href="https://github.com/Botre/vue-sauce" target="_blank" rel="noopener noreferrer"><strong>vue-sauce</strong></a> 一个可以展示 vue 源码的指令</li>
<li><a href="https://github.com/kutlugsahin/vue-smooth-dnd" target="_blank" rel="noopener noreferrer"><strong>vue-smooth-dnd</strong></a> Vue wrappers components for smooth-dnd</li>
<li><a href="https://github.com/vuegg/vuegg" target="_blank" rel="noopener noreferrer"><strong>vuegg</strong></a> 一个 vue 可视化拖拽界面生成器</li>
<li><a href="https://github.com/baianat/vee-validate" target="_blank" rel="noopener noreferrer"><strong>vee-validate</strong></a> 基于 vue 的验证，能验证的内容比较全</li>
<li><a href="https://github.com/lusaxweb/vuesax" target="_blank" rel="noopener noreferrer"><strong>vuesax</strong></a> 一个很漂亮的基于 vue 的 ui 框架</li>
<li><a href="https://github.com/MatteoGabriele/vue-analytics" target="_blank" rel="noopener noreferrer"><strong>vue-analytics</strong></a> 基于 vue 的 谷歌统计封装</li>
<li><a href="https://github.com/Akryum/vue-virtual-scroller" target="_blank" rel="noopener noreferrer"><strong>vue-virtual-scroller</strong></a> 基于 vue 的虚拟列表无限滚动</li>
<li><a href="https://github.com/michalsnik/vue-content-placeholders" target="_blank" rel="noopener noreferrer"><strong>vue-content-placeholders</strong></a> 页面龙骨 skeleton</li>
<li><a href="https://github.com/buefy/buefy" target="_blank" rel="noopener noreferrer"><strong>buefy</strong></a> 适配移动端的 vue 组件库 看着还挺舒服的</li>
<li><a href="https://github.com/xuliangzhan/vxe-table" target="_blank" rel="noopener noreferrer"><strong>vxe-table</strong></a>vue 表格解决方案，还没具体用过看着的确解决了其它 table 组件的一些问题</li>
<li><a href="https://lmiller1990.github.io/vue-testing-handbook/zh-CN/" target="_blank" rel="noopener noreferrer"><strong>Vue 测试指南</strong></a> vue 测试指南</li>
</ul>
<h2 id="实践库" tabindex="-1"> 实践库</h2>
<ul>
<li><a href="https://github.com/Jasonette/JASONETTE-iOS" target="_blank" rel="noopener noreferrer"><strong>Jasonette</strong></a> 一个用 json 来构建 hybrid App 的框架</li>
<li><a href="https://github.com/atulmy/crate" target="_blank" rel="noopener noreferrer"><strong>crate</strong></a> 一个 react 全栈练习(pc,mobile,rn,api) demo，适合入门拿来练手</li>
<li><a href="https://github.com/krasimir/react-in-patterns" target="_blank" rel="noopener noreferrer"><strong>react-in-patterns</strong></a> 一本开源教你如何写 react 的书</li>
<li><a href="https://github.com/deepsweet/hocs" target="_blank" rel="noopener noreferrer"><strong>hocs</strong></a> react 相关 hoc 收集库</li>
</ul>
<h2 id="文档" tabindex="-1"> 文档</h2>
<ul>
<li><a href="https://github.com/vuejs/vuepress" target="_blank" rel="noopener noreferrer"><strong>vuepress</strong></a> vue 官方出品的文档工具</li>
<li><a href="https://github.com/docsifyjs/docsify" target="_blank" rel="noopener noreferrer"><strong>docsify</strong></a> 轻量级文档工具，但其是运行时编译的，所以 seo 不好</li>
<li><a href="https://www.gitbook.com/" target="_blank" rel="noopener noreferrer"><strong>GitBook</strong></a> 除了编译慢没啥毛病</li>
<li><a href="https://github.com/mdx-js/mdx" target="_blank" rel="noopener noreferrer"><strong>mdx</strong></a> jsx + markdown</li>
<li><a href="https://github.com/pedronauck/docz" target="_blank" rel="noopener noreferrer"><strong>docz</strong></a></li>
<li><a href="https://github.com/storybooks/storybook" target="_blank" rel="noopener noreferrer"><strong>storybook</strong></a></li>
</ul>
<h2 id="工具库" tabindex="-1"> 工具库</h2>
<ul>
<li><a href="https://github.com/tapio/live-server" target="_blank" rel="noopener noreferrer"><strong>live-server</strong></a> 可以快速启一个本地 dev 服务 并且支持自动刷新的 http server</li>
<li><a href="https://github.com/zeit/serve" target="_blank" rel="noopener noreferrer"><strong>serve</strong></a> 快速起本地静态服务</li>
<li><a href="https://github.com/tehnokv/picojs" target="_blank" rel="noopener noreferrer"><strong>picojs</strong></a> js 人脸识别库</li>
<li><a href="https://github.com/ruanyf/es-checker" target="_blank" rel="noopener noreferrer"><strong>es-checker</strong></a> 检查当前环境对 ES6 支持的情况。支持浏览器和 node.js</li>
<li><a href="https://github.com/lukechilds/merge-images" target="_blank" rel="noopener noreferrer"><strong>merge-images</strong></a> 图片合成，利用<code>canvas</code>能将几张图片合成一张</li>
<li><a href="https://github.com/fabricjs/fabric.js" target="_blank" rel="noopener noreferrer"><strong>fabric.js</strong></a> 基于 canvas 创建交互式的图片编辑界面非常适合用来做图片合成类工作。</li>
<li><a href="https://github.com/photonstorm/phaser" target="_blank" rel="noopener noreferrer"><strong>phaser</strong></a> 这是一个为桌面和移动浏览器开发 HTML5 游戏的快速开源框架。
你可以为 iOS、 Android 和不同的本地应用程序创建游戏。</li>
<li><a href="https://github.com/purifycss/purifycss" target="_blank" rel="noopener noreferrer"><strong>purifycss</strong></a> 移除没使用到的 css</li>
<li><a href="https://github.com/leeoniya/dropcss" target="_blank" rel="noopener noreferrer"><strong>dropcss</strong></a> 同上</li>
<li><a href="https://github.com/sindresorhus/fast-cli" target="_blank" rel="noopener noreferrer"><strong>fast-cli</strong></a> 命令行测试下载上传速度</li>
<li><a href="https://github.com/pikapkg/web" target="_blank" rel="noopener noreferrer"><strong>@pika/web</strong></a> 让你不需要在本地 webpack 中 import，直接在游览器里面运行 npm 包</li>
<li><a href="https://github.com/hotoo/pinyin" target="_blank" rel="noopener noreferrer"><strong>pinyin</strong></a> 汉字拼音转换工具</li>
<li><a href="https://obfuscator.io/" target="_blank" rel="noopener noreferrer"><strong>JavaScript Obfuscator Tool</strong></a> js 代码混淆工具</li>
<li><a href="https://github.com/naptha/tesseract.js" target="_blank" rel="noopener noreferrer"><strong>tesseract</strong></a> 图像识别，它能识别图片中的文字，支持中文</li>
<li><a href="https://github.com/gkajs/gka" target="_blank" rel="noopener noreferrer"><strong>gka</strong></a> 一款高效、高性能的帧动画生成工具。只需一行命令，快速图片优化、生成动画文件，支持效果预览。</li>
<li><a href="https://github.com/benjamn/recast" target="_blank" rel="noopener noreferrer"><strong>recast</strong></a> 前端 ast 库</li>
<li><a href="https://github.com/facebook/jscodeshift" target="_blank" rel="noopener noreferrer"><strong>jscodeshift</strong></a> 将 js 内容解析成 AST 语法树，然后提供一些便利的操作接口，方便我们对各个节点进行更改</li>
<li><a href="https://github.com/mrdoob/stats.js/" target="_blank" rel="noopener noreferrer"><strong>stats.js</strong></a> 前端性能监控 如 FPS、内存使用情况等</li>
<li><a href="https://github.com/mholt/PapaParse" target="_blank" rel="noopener noreferrer"><strong>PapaParse</strong></a> 解析 csv excel</li>
<li><a href="https://github.com/JohnByrneRepo/mddir" target="_blank" rel="noopener noreferrer"><strong>mddir</strong></a> 生成 markdown file/folder structure 目录结构 tree</li>
<li><a href="https://github.com/imagemin/imagemin" target="_blank" rel="noopener noreferrer"><strong>imagemin</strong></a> 图片压缩库</li>
<li><a href="https://github.com/jonkemp/inline-css#readme" target="_blank" rel="noopener noreferrer"><strong>inline-css</strong></a> css covert to inline style 在生成 email 格式 html 的时候特别有用</li>
<li><a href="https://github.com/mcuking/babel-plugin-try-catch-error-report" target="_blank" rel="noopener noreferrer"><strong>babel-plugin-try-catch-error-report</strong></a> 全局自动 catch 错误进行数据上报</li>
<li><a href="https://github.com/jimmywarting/StreamSaver.js" target="_blank" rel="noopener noreferrer"><strong>StreamSaver.js</strong></a> 大文件下载，不用像 saveAs 那样先读到内存中再下载</li>
<li><a href="https://github.com/mwilliamson/mammoth.js" target="_blank" rel="noopener noreferrer"><strong>mammoth.js</strong></a> Convert Word documents (.docx files) to HTML</li>
<li><a href="https://github.com/voidcosmos/npkill" target="_blank" rel="noopener noreferrer"><strong>npkill</strong></a> 列出所有 node_modules，并支持删除</li>
<li><a href="https://github.com/strapi/strapi/" target="_blank" rel="noopener noreferrer"><strong>strapi</strong></a> 开源的解决方案来创建、部署和管理自己的 API，通过图形化界面进行操作</li>
</ul>
<h2 id="node" tabindex="-1"> Node</h2>
<h3 id="工具库-1" tabindex="-1"> 工具库</h3>
<ul>
<li><a href="https://github.com/cheeriojs/cheerio" target="_blank" rel="noopener noreferrer"><strong>cheerio</strong></a> 用类 jQuery 语法处理 HTML</li>
<li><a href="https://github.com/npm/node-semver" target="_blank" rel="noopener noreferrer"><strong>node-semver</strong></a> node 版本验证库</li>
<li><a href="https://github.com/tapio/live-server" target="_blank" rel="noopener noreferrer"><strong>live-server</strong></a> 一个简单的 http server 带有 reload 功能</li>
<li><a href="https://github.com/indexzero/node-portfinder" target="_blank" rel="noopener noreferrer"><strong>node-portfinder</strong></a> 一个端口嗅探工具</li>
<li><a href="https://github.com/yeoman/update-notifier" target="_blank" rel="noopener noreferrer"><strong>update-notifier</strong></a>node 依赖升级提醒工具</li>
<li><a href="https://github.com/pyloque/fastscan" target="_blank" rel="noopener noreferrer"><strong>fastscan</strong></a> node 敏感词库</li>
<li><a href="https://github.com/jondot/hygen" target="_blank" rel="noopener noreferrer"><strong>hygen</strong></a> 快速方便的创建代码 可以命令行创建预设的 template</li>
<li><a href="https://github.com/plopjs/plop" target="_blank" rel="noopener noreferrer"><strong>plop</strong></a> 同上，代码生成工具</li>
<li><a href="https://github.com/vadimdemedes/ink" target="_blank" rel="noopener noreferrer"><strong>ink</strong></a> 是一个 React 的命令行渲染器，命令行界面可以像写页面那么写了</li>
<li><a href="https://github.com/motdotla/dotenv" target="_blank" rel="noopener noreferrer"><strong>dotenv</strong></a> 通过.env 设置环境部变量 vue-cli 也依赖它</li>
<li><a href="https://github.com/ds300/patch-package" target="_blank" rel="noopener noreferrer"><strong>patch-package</strong></a> 优雅的修改 node_modules 中的依赖库</li>
<li><a href="https://github.com/microsoft/playwright" target="_blank" rel="noopener noreferrer"><strong>Playwright</strong></a> 同 Puppeteer 团队出品，但区别是它支持 Chrome、Safari、Firefox、Edge</li>
<li><a href="https://github.com/MrRaindrop/tree-cli" target="_blank" rel="noopener noreferrer"><strong>tree-cli</strong></a> node 根据目录结构生成 tree</li>
<li><a href="https://github.com/yangshun/tree-node-cli" target="_blank" rel="noopener noreferrer"><strong>tree-node-cli</strong></a> node 根据目录结构生成 tree</li>
<li><a href="https://github.com/sindresorhus/open" target="_blank" rel="noopener noreferrer"><strong>open</strong></a> node 打开浏览器</li>
</ul>
<h3 id="命令行" tabindex="-1"> 命令行</h3>
<ul>
<li><a href="https://github.com/klauscfhq/signale" target="_blank" rel="noopener noreferrer"><strong>signale</strong></a> 一个 Node 的日志格式库，自带 16 个级别，可以定制颜色和 Emoji，可扩展的日志记录器</li>
<li><a href="https://github.com/nuxt/consola" target="_blank" rel="noopener noreferrer"><strong>consola</strong></a> 优雅的命令行 console logger <code>vuepress</code> 也使用了它</li>
<li><a href="https://github.com/chalk/chalk" target="_blank" rel="noopener noreferrer"><strong>chalk</strong></a> 命令行着色美化库</li>
<li><a href="https://github.com/bvaughn/progress-estimator" target="_blank" rel="noopener noreferrer"><strong>progress-estimator</strong></a> 命令行 progress bar 进度条模拟库</li>
<li><a href="https://github.com/sindresorhus/ora" target="_blank" rel="noopener noreferrer"><strong>ora</strong></a> Elegant terminal spinner 命令行 loading</li>
<li><a href="https://github.com/SamVerschueren/listr" target="_blank" rel="noopener noreferrer"><strong>listr</strong></a> Terminal task 命令行任务列表</li>
<li><a href="https://github.com/yargs/yargs" target="_blank" rel="noopener noreferrer"><strong>yargs</strong></a> 命令行参数解析</li>
<li><a href="https://github.com/yargs/y18n" target="_blank" rel="noopener noreferrer"><strong>y18n</strong></a> yargs 基于 i18n 的一个包</li>
<li><a href="https://github.com/tj/commander.js" target="_blank" rel="noopener noreferrer"><strong>commander.js</strong></a> 自动的解析命令和参数，合并多选项，处理短参，等等，功能强大，上手简单</li>
<li><a href="https://github.com/SBoudrias/Inquirer.js" target="_blank" rel="noopener noreferrer"><strong>Inquirer.js</strong></a> A collection of common interactive command line user interfaces. 命令行询问库</li>
<li><a href="https://github.com/nasa/openmct" target="_blank" rel="noopener noreferrer"><strong>enquirer</strong></a> 命令行 prompt 询问库，写 cli 的时候很有用</li>
<li><a href="https://github.com/klaussinani/qoa" target="_blank" rel="noopener noreferrer"><strong>Qoa</strong></a> 同上</li>
<li><a href="https://github.com/AndiDittrich/Node.CLI-Progress" target="_blank" rel="noopener noreferrer"><strong>cli-progress</strong></a> Terminal Progress Bar</li>
<li><a href="https://github.com/Automattic/cli-table" target="_blank" rel="noopener noreferrer"><strong>cli-table</strong></a> tables for the CLI</li>
<li><a href="https://github.com/mikaelbr/node-notifier" target="_blank" rel="noopener noreferrer"><strong>node-notifier</strong></a> 在 NodeJS 环境中，可以很方便的唤起 notifier 通知</li>
</ul>
<h3 id="文件处理" tabindex="-1"> 文件处理</h3>
<ul>
<li><a href="https://github.com/isaacs/rimraf" target="_blank" rel="noopener noreferrer"><strong>rimraf</strong></a> 删除文件</li>
<li><a href="https://github.com/sindresorhus/globby" target="_blank" rel="noopener noreferrer"><strong>globby</strong></a> 用于模式匹配目录文件</li>
<li><a href="https://github.com/isaacs/node-glob" target="_blank" rel="noopener noreferrer"><strong>glob</strong></a> 文件查找</li>
<li><a href="https://github.com/terkelg/tiny-glob" target="_blank" rel="noopener noreferrer"><strong>tiny-glob</strong></a> 文件查找</li>
<li><a href="https://github.com/paulmillr/chokidar" target="_blank" rel="noopener noreferrer"><strong>chokidar</strong></a> node 监听文件变化的库</li>
<li><a href="https://github.com/jprichardson/node-fs-extra" target="_blank" rel="noopener noreferrer"><strong>fs-extra</strong></a> fs-extra 模块是系统 fs 模块的扩展，提供了更多便利的 API，并继承了 fs 模块的 API</li>
<li><a href="https://github.com/sindresorhus/execa" target="_blank" rel="noopener noreferrer"><strong>execa</strong></a> 比 child_process 好用，返回 Promise</li>
<li><a href="https://github.com/mysticatea/npm-run-all" target="_blank" rel="noopener noreferrer"><strong>npm-run-all</strong></a> 一个 CLI 工具可以并行或者串行执行 script 指令</li>
<li><a href="https://github.com/streamich/memfs" target="_blank" rel="noopener noreferrer"><strong>memfs</strong></a> memory-fs 的替代品，将文件放在内存中优化读写，webpack 依赖</li>
</ul>
<h3 id="调试" tabindex="-1"> 调试</h3>
<ul>
<li><a href="https://github.com/antonmedv/fx" target="_blank" rel="noopener noreferrer"><strong>fx</strong></a> 命令行优化 JSON 输出</li>
<li><a href="https://github.com/zeeshanu/dumper.js" target="_blank" rel="noopener noreferrer"><strong>dumper.js</strong></a> 能让你的 node console 更加的规整，方便调试</li>
<li><a href="https://github.com/GoogleChromeLabs/ndb" target="_blank" rel="noopener noreferrer"><strong>ndb</strong></a> node 调试</li>
<li><a href="https://github.com/mafintosh/why-is-node-running" target="_blank" rel="noopener noreferrer"><strong>why-is-node-running</strong></a> 查看 node 为什么在运行</li>
<li><a href="https://www.joedog.org/siege-home/" target="_blank" rel="noopener noreferrer"><strong>siege</strong></a> 压测工具</li>
<li><a href="https://github.com/nswbmw/node-in-debugging" target="_blank" rel="noopener noreferrer"><strong>node-in-debugging</strong></a> node.js 调试指南</li>
<li><a href="https://github.com/i0natan/nodebestpractices" target="_blank" rel="noopener noreferrer"><strong>node-best-practices</strong></a> node 最佳实践</li>
<li><a href="https://github.com/i0natan/nodebestpractices/blob/master/README.chinese.md" target="_blank" rel="noopener noreferrer"><strong>Node.js 最佳实践</strong></a></li>
</ul>
<h2 id="graphql" tabindex="-1"> GraphQL</h2>
<ul>
<li><a href="https://www.prisma.io/docs/" target="_blank" rel="noopener noreferrer"><strong>prisma</strong></a> 让前端也能快速的写出</li>
<li><a href="https://www.apollographql.com/" target="_blank" rel="noopener noreferrer"><strong>Apollo GraphQL</strong></a> 是基于 GraphQL 的全栈解决方案集合。从后端到前端提供了对应的 lib 使得开发使用 GraphQL 更加的方便</li>
<li><a href="https://github.com/facebook/dataloader" target="_blank" rel="noopener noreferrer"><strong>dataloader</strong></a> 解决 Graphql 中的 N+1 查询问题</li>
</ul>
<h2 id="工具" tabindex="-1"> 工具</h2>
<ul>
<li><a href="https://github.com/high-speed-downloader/high-speed-downloader" target="_blank" rel="noopener noreferrer"><strong>high-speed-downloader</strong></a> 百度网盘不限速下载 支持 Windows 和 Mac</li>
<li><a href="https://github.com/zeit/hyper" target="_blank" rel="noopener noreferrer"><strong>hyper</strong></a> 前端命令行</li>
<li><a href="https://github.com/ymfe/yapi" target="_blank" rel="noopener noreferrer"><strong>yapi</strong></a> 是一个可本地部署的、打通前后端及 QA 的、可视化的接口管理平台</li>
<li><a href="https://sway.com/" target="_blank" rel="noopener noreferrer"><strong>sway</strong></a> 一个微软自己出的在线 ppt 很强大</li>
<li><a href="https://asciiartgen.now.sh" target="_blank" rel="noopener noreferrer"><strong>Ascii Art Generator</strong></a> 在线生成 Ascii 图案</li>
<li><a href="https://github.com/GetStream/Winds" target="_blank" rel="noopener noreferrer"><strong>Winds</strong></a> 开源 RSS</li>
<li><a href="https://github.com/kitze/JSUI" target="_blank" rel="noopener noreferrer"><strong>JSUI</strong></a> 一个用来控制管理前端项目的客户端</li>
<li><a href="https://github.com/pedronauck/docz" target="_blank" rel="noopener noreferrer"><strong>docz</strong></a> 让你能快速写文档的一个库</li>
<li><a href="https://github.com/pod4g/hiper" target="_blank" rel="noopener noreferrer"><strong>hiper</strong></a> 性能统计分析工具</li>
<li><a href="https://github.com/verdaccio/verdaccio" target="_blank" rel="noopener noreferrer"><strong>verdaccio</strong></a> 私有 npm</li>
<li><a href="http://rogerdudler.github.io/git-guide/index.zh.html" target="_blank" rel="noopener noreferrer"><strong>git-guide</strong></a> git 入门指南</li>
<li><a href="https://github.com/521xueweihan/git-tips" target="_blank" rel="noopener noreferrer"><strong>git-tips</strong></a> git 进阶</li>
<li><a href="https://github.com/teambit/bit" target="_blank" rel="noopener noreferrer"><strong>bit</strong></a> 实现了项目之间的代码共享 可以自建私有</li>
<li><a href="https://github.com/Kenshin/simpread" target="_blank" rel="noopener noreferrer"><strong>simpread</strong></a> 简悦 ( SimpRead ) 让你瞬间进入沉浸式阅读的扩展</li>
<li><a href="https://github.com/FiloSottile/mkcert" target="_blank" rel="noopener noreferrer"><strong>mkcert</strong></a> 一键命令 让本地也支持 https</li>
<li><a href="https://github.com/nbedos/termtosvg" target="_blank" rel="noopener noreferrer"><strong>termtosvg</strong></a> 录制 命令操作转成 svg 基于 python</li>
<li><a href="https://github.com/apex/gh-polls" target="_blank" rel="noopener noreferrer"><strong>gh-polls</strong></a> 可以在 github issue 中添加投票</li>
<li><a href="https://github.com/liriliri/eruda" target="_blank" rel="noopener noreferrer"><strong>eruda</strong></a> 移动端调试工具</li>
<li><a href="https://github.com/Tencent/vConsole" target="_blank" rel="noopener noreferrer"><strong>vConsole</strong></a> 也是一个移动端调试工具 腾讯出品</li>
<li><a href="https://github.com/faressoft/terminalizer" target="_blank" rel="noopener noreferrer"><strong>terminalizer</strong></a> 命令行录制工具 基于 node</li>
<li><a href="https://github.com/amio/badgen-service" target="_blank" rel="noopener noreferrer"><strong>badgen</strong></a> 快速构建和 shields 一样的 svg badge 但速度更快</li>
<li><a href="https://github.com/luin/readability" target="_blank" rel="noopener noreferrer"><strong>readability</strong></a> 移除页面非正文部分 基于 jsdom</li>
<li><a href="https://github.com/TKkk-iOSer/WeChatPlugin-MacOS" target="_blank" rel="noopener noreferrer"><strong>WeChatPlugin-MacOS</strong></a> 一款功能强大的 macOS 版微信小助手</li>
<li><a href="https://github.com/checkly/puppeteer-recorder" target="_blank" rel="noopener noreferrer"><strong>puppeteer-recorder</strong></a> 一个 chrome 插件 能够根据你的操作 自动生成 puppeteer 相关代码</li>
<li><a href="https://github.com/jxnblk/mdx-deck" target="_blank" rel="noopener noreferrer"><strong>mdx-deck</strong></a> 用 markdown 编写演示文稿</li>
<li><a href="https://github.com/pomber/code-surfer" target="_blank" rel="noopener noreferrer"><strong>code-surfer</strong></a> 基于 mdx-deck 的一个插件
让你更好的在文稿中展示 code</li>
<li><a href="https://progressivetooling.com/" target="_blank" rel="noopener noreferrer"><strong>Progressive Tooling</strong></a> 前端性能优化工具集合</li>
<li><a href="https://github.com/artf/grapesjs" target="_blank" rel="noopener noreferrer"><strong>https://github.com/artf/grapesjs</strong></a> 可视化建站工具 不需要写代码就能写一个页面，前端再次再次要下岗了</li>
<li><a href="https://www.image-charts.com/" target="_blank" rel="noopener noreferrer"><strong>image-charts</strong></a> 该服务通过 URL 接受参数，然后生成图表，以图片形式返回</li>
<li><a href="https://github.com/Zulko/eagle.js" target="_blank" rel="noopener noreferrer"><strong>eagle.js</strong></a> 一个用 vue 来制作 PPT 的库</li>
<li><a href="https://www.optimizely.com/" target="_blank" rel="noopener noreferrer"><strong>Optimizely</strong></a> A/B Test</li>
<li><a href="http://www.appadhoc.com/" target="_blank" rel="noopener noreferrer"><strong>appadhoc</strong></a> 一个国内的 A/B Test 服务</li>
<li><a href="https://github.com/glorious-codes/glorious-demo" target="_blank" rel="noopener noreferrer"><strong>glorious-demo</strong></a> 通过编写代码的方式构建一个命令行的演示例子</li>
<li><a href="https://github.com/valentinxxx/nginxconfig.io/" target="_blank" rel="noopener noreferrer"><strong>nginxconfig</strong></a> 可视化配置 nginx 提供了多个基础模板</li>
<li><a href="https://bundlephobia.com/" target="_blank" rel="noopener noreferrer"><strong>bundlephobia</strong></a> 一个可以查看某个库的大小，并且分析它的依赖</li>
<li><a href="https://jsperf.com/popular" target="_blank" rel="noopener noreferrer"><strong>jsperf</strong></a> 一个提供在线 test case 的网站，主要用来比较性能。可以比较如： forEach vs for 的性能</li>
<li><a href="https://github.com/lukejacksonn/perflink" target="_blank" rel="noopener noreferrer"><strong>perflink</strong></a> 与 jsperf 类似的一个比较 js 性能的网站</li>
<li><a href="https://github.com/algorithm-visualizer/algorithm-visualizer" target="_blank" rel="noopener noreferrer"><strong>algorithm-visualizer</strong></a> 算法代码可视化</li>
<li><a href="https://github.com/yujiangshui/An-English-Guide-for-Programmers" target="_blank" rel="noopener noreferrer"><strong>An-English-Guide-for-Programmers</strong></a> 专为程序员编写的英语学习指南</li>
<li><a href="https://webhint.io/" target="_blank" rel="noopener noreferrer"><strong>Webhint</strong></a> 用于检查代码的可访问性、性能和安全的开源检查（Linting）工具</li>
<li><a href="https://github.com/airtap/airtap" target="_blank" rel="noopener noreferrer"><strong>airtap</strong></a> 测试浏览器兼容性，可覆盖 800 多种浏览器</li>
<li><a href="https://github.com/bluzi/jsonstore" target="_blank" rel="noopener noreferrer"><strong>jsonstore</strong></a> 供免费，安全且基于 JSON 的云数据存储，自己玩的小项目神器</li>
<li><a href="https://github.com/pomber/git-history" target="_blank" rel="noopener noreferrer"><strong>git-history</strong></a> 可视化查看一个文件的历史变化</li>
<li><a href="https://github.com/myliang/x-spreadsheet" target="_blank" rel="noopener noreferrer"><strong>x-spreadsheet</strong></a> 一个基于 Canvas 的 JS 电子表格库 excel</li>
<li><a href="https://imgcook.taobao.org/" target="_blank" rel="noopener noreferrer"><strong>imgcook</strong></a> 阿里出品，一键通过设计稿生成代码</li>
<li><a href="https://github.com/Raathigesh/majestic" target="_blank" rel="noopener noreferrer"><strong>majestic</strong></a> jest 可视化</li>
<li><a href="https://github.com/leon-ai/leon" target="_blank" rel="noopener noreferrer"><strong>leon</strong></a> 你开源项目的 ai 个人助手</li>
<li><a href="https://github.com/Bogdan-Lyashenko/js-code-to-svg-flowchart" target="_blank" rel="noopener noreferrer"><strong>js-code-to-svg-flowchart</strong></a> 将代码逻辑用流程图的方式展现出来</li>
<li><a href="https://github.com/xtermjs/xterm.js" target="_blank" rel="noopener noreferrer"><strong>xterm.js</strong></a> 一个 web terminal</li>
<li><a href="https://github.com/mapbox/pixelmatch" target="_blank" rel="noopener noreferrer"><strong>pixelmatch</strong></a> diff 两张图片不一样的地方</li>
<li><a href="https://github.com/kefranabg/readme-md-generator" target="_blank" rel="noopener noreferrer"><strong>readme-md-generator</strong></a> 一个命令行脚本帮你快速的创建一个 README</li>
<li><a href="https://github.com/paularmstrong/build-tracker" target="_blank" rel="noopener noreferrer"><strong>build-tracker</strong></a> 构建大小追踪 记录你多个版本构建后文件大小的变化</li>
<li><a href="https://github.com/youzan/zan-proxy/blob/master/README.zh-CN.md" target="_blank" rel="noopener noreferrer"><strong>zan-proxy</strong></a> 本地调试线上环境的工具</li>
<li><a href="https://github.com/mjmlio/mjml" target="_blank" rel="noopener noreferrer"><strong>mjml</strong></a> 一个让发 email 更简单的框架。定义了一套自己的语法，你用这套语法写邮件，然后编译成 HTML。</li>
<li><a href="https://any86.github.io/any-rule/" target="_blank" rel="noopener noreferrer"><strong>any-rule</strong></a> 正则大全</li>
<li><a href="https://github.com/outline/outline" target="_blank" rel="noopener noreferrer"><strong>outline</strong></a> 一个免费开源的库，能让你快速搭建自己的 wiki</li>
</ul>
<h2 id="webpack" tabindex="-1"> Webpack</h2>
<ul>
<li><a href="https://github.com/nuxt/webpackbar" target="_blank" rel="noopener noreferrer"><strong>webpackbar</strong></a> webpack 打包进度条</li>
<li><a href="https://github.com/zouhir/jarvis" target="_blank" rel="noopener noreferrer"><strong>jarvis</strong></a> webpack dashboard</li>
<li><a href="https://github.com/neutrinojs/webpack-chain" target="_blank" rel="noopener noreferrer"><strong>webpack-chain</strong></a> 通过 chain 风格 api 的方式修改 webpack 配置</li>
<li><a href="https://github.com/stephencookdev/speed-measure-webpack-plugin" target="_blank" rel="noopener noreferrer"><strong>speed-measure-webpack-plugin</strong></a> 统计 webpack 各阶段的耗时</li>
<li><a href="https://github.com/ElemeFE/obsolete-webpack-plugin" target="_blank" rel="noopener noreferrer"><strong>obsolete-webpack-plugin</strong></a> 基于 browserslist 做浏览器升级提示</li>
<li><a href="https://github.com/webpack-contrib/mini-css-extract-plugin" target="_blank" rel="noopener noreferrer"><strong>mini-css-extract-plugin</strong></a> 提取 CSS 为单独文件</li>
<li><a href="https://github.com/webpack-contrib/copy-webpack-plugin" target="_blank" rel="noopener noreferrer"><strong>copy-webpack-plugin</strong></a> 复制额外的文件到输出目录</li>
<li><a href="https://github.com/darrenscerri/duplicate-package-checker-webpack-plugin" target="_blank" rel="noopener noreferrer"><strong>duplicate-package-checker-webpack-plugin</strong></a> 检查是否存在重复依赖</li>
<li><a href="https://github.com/cssnano/cssnano" target="_blank" rel="noopener noreferrer"><strong>cssnano</strong></a> CSS 压缩</li>
<li><a href="https://github.com/samccone/bundle-buddy" target="_blank" rel="noopener noreferrer"><strong>bundle-buddy</strong></a> webpack bundle 依赖分析</li>
</ul>
<h2 id="移动端" tabindex="-1"> 移动端</h2>
<ul>
<li><a href="https://github.com/ftlabs/fastclick" target="_blank" rel="noopener noreferrer"><strong>fastclick</strong></a> 解决移动端一些点击问题</li>
</ul>
<h2 id="性能优化" tabindex="-1"> 性能优化</h2>
<ul>
<li><a href="https://github.com/googlechrome/workbox" target="_blank" rel="noopener noreferrer"><strong>workbox</strong></a> PWA 方案，Google 出品</li>
</ul>
<h2 id="请求处理" tabindex="-1"> 请求处理</h2>
<ul>
<li><a href="https://github.com/axios/axios" target="_blank" rel="noopener noreferrer"><strong>axios</strong></a> 目前最常见的请求库</li>
<li><a href="https://github.com/sindresorhus/got" target="_blank" rel="noopener noreferrer"><strong>got</strong></a> http 请求库 如果你觉得 request 太多的话 这是一个不错的选择</li>
<li><a href="https://github.com/request/request" target="_blank" rel="noopener noreferrer"><strong>request</strong></a> 老牌请求库 -<a href="https://github.com/github/fetch" target="_blank" rel="noopener noreferrer">*whatwg-fetch**</a> fetch 请求库</li>
<li><a href="https://github.com/grpc/grpc-web" target="_blank" rel="noopener noreferrer"><strong>grpc-web</strong></a> 前端直连 gRPC 服务</li>
<li><a href="https://github.com/bitinn/node-fetch" target="_blank" rel="noopener noreferrer"><strong>node-fetch</strong></a> node 环境下轻量级 fetch 请求库</li>
<li><a href="https://github.com/ded/reqwest" target="_blank" rel="noopener noreferrer"><strong>reqwest</strong></a></li>
</ul>
<h2 id="工程" tabindex="-1"> 工程</h2>
<ul>
<li><a href="https://github.com/lerna/lerna" target="_blank" rel="noopener noreferrer"><strong>lerna</strong></a> monorepo 管理</li>
<li><a href="https://github.com/lerna/lerna-changelog" target="_blank" rel="noopener noreferrer"><strong>lerna-changelog</strong></a> 为 lerna 项目自动生成 changelog</li>
<li><a href="https://github.com/eslint/eslint" target="_blank" rel="noopener noreferrer"><strong>eslint</strong></a> JS 风格约束</li>
<li><a href="https://github.com/airbnb/javascript" target="_blank" rel="noopener noreferrer"><strong>eslint-config-airbnb</strong></a> airbnb 约束风格</li>
<li><a href="https://github.com/xojs/xo" target="_blank" rel="noopener noreferrer"><strong>xo</strong></a> 封装自 eslint</li>
<li><a href="https://github.com/prettier/prettier" target="_blank" rel="noopener noreferrer"><strong>prettier</strong></a> 更主观的风格自动修改</li>
<li><a href="https://github.com/yeoman/generator" target="_blank" rel="noopener noreferrer"><strong>yeoman-generator</strong></a> 脚手架工具</li>
<li><a href="https://github.com/zeit/serve" target="_blank" rel="noopener noreferrer"><strong>serve</strong></a> 本地静态服务器</li>
<li><a href="https://github.com/sindresorhus/np" target="_blank" rel="noopener noreferrer"><strong>np</strong></a> npm publish 辅助，自动 push、打 tag、升版本等</li>
<li><a href="https://github.com/okonet/lint-staged" target="_blank" rel="noopener noreferrer"><strong>lint-staged</strong></a> eslint 提速，只 lint 提交的代码</li>
<li><a href="https://github.com/marketplace/coveralls" target="_blank" rel="noopener noreferrer"><strong>coveralls</strong></a> 覆盖率</li>
<li><a href="https://github.com/typicode/husky" target="_blank" rel="noopener noreferrer"><strong>husky</strong></a> 添加 git hooks</li>
<li><a href="https://github.com/kentcdodds/cross-env" target="_blank" rel="noopener noreferrer"><strong>cross-env</strong></a> 跨平台的环境变量声明</li>
<li><a href="https://github.com/creationix/nvm" target="_blank" rel="noopener noreferrer"><strong>nvm</strong></a> 管理 node 版本</li>
<li><a href="https://github.com/kimmobrunfeldt/concurrently" target="_blank" rel="noopener noreferrer"><strong>concurrently</strong></a> 在 npm scripts 里并行执行命令</li>
<li><a href="https://github.com/zeit/ncc" target="_blank" rel="noopener noreferrer"><strong>@zeit/ncc</strong></a> 打包为 npm 包为一个文件</li>
<li><a href="https://github.com/dylang/npm-check" target="_blank" rel="noopener noreferrer"><strong>npm-check</strong></a> 检测依赖升级情况，我会和 <code>yarn upgrade-interactive</code> 配合着用，主要用来检测冗余依赖</li>
<li><a href="https://github.com/mysticatea/cpx" target="_blank" rel="noopener noreferrer"><strong>cpx</strong></a> 复制，支持 glob，并且可以 watch</li>
<li><a href="https://github.com/Qard/onchange" target="_blank" rel="noopener noreferrer"><strong>onchange</strong></a> 监听文件变动然后做一些事</li>
<li><a href="https://github.com/pawelgalazka/tasksfile" target="_blank" rel="noopener noreferrer"><strong>tasksfile</strong></a> 在 node 中执行 script 脚本</li>
</ul>
<h2 id="mac" tabindex="-1"> Mac</h2>
<ul>
<li><a href="https://itunes.apple.com/cn/app/get-plain-text/" target="_blank" rel="noopener noreferrer"><strong>get-plain-text</strong></a> 能清除剪贴板里的格式 很实用</li>
<li><a href="https://github.com/lhc70000/iina" target="_blank" rel="noopener noreferrer"><strong>IINA</strong></a> mac 平台感觉免费最好的播放器 强推</li>
<li><a href="https://itunes.apple.com/cn/app/magnet/id441258766?mt=12&amp;ign-mpt=uo%3D4" target="_blank" rel="noopener noreferrer"><strong>magnet</strong></a> 分屏管理</li>
<li><a href="https://zh.xnipapp.com/" target="_blank" rel="noopener noreferrer"><strong>Xnip</strong></a> 方便好用的截图工具-支持截长图</li>
<li><a href="https://www.spectacleapp.com/" target="_blank" rel="noopener noreferrer"><strong>Spectacle</strong></a> 窗口管理工具</li>
<li><a href="https://matthewpalmer.net/vanilla/" target="_blank" rel="noopener noreferrer"><strong>vanilla</strong></a> 顶栏图标管理工具</li>
<li><a href="https://github.com/Mortennn/Dozer" target="_blank" rel="noopener noreferrer"><strong>Dozer</strong></a> 一个开源的顶栏管理</li>
<li><a href="https://mac.guanjia.qq.com/index_o.html" target="_blank" rel="noopener noreferrer"><strong>腾讯电脑管家</strong></a> 反正我用下来好觉得蛮好用的</li>
<li><a href="https://mos.caldis.me/" target="_blank" rel="noopener noreferrer"><strong>mos</strong></a> 鼠标平滑滚动软件，很好用。免费开源</li>
<li><a href="https://www.sequelpro.com/" target="_blank" rel="noopener noreferrer"><strong>sequel pro</strong></a> mysql 客户端 好用</li>
<li><a href="https://itunes.apple.com/us/app/microsoft-remote-desktop/id715768417?mt=12#" target="_blank" rel="noopener noreferrer"><strong>Microsoft Remote Desktop Beta</strong></a> Mac 远程登录 Windows 调试神器</li>
<li><a href="http://paper.meiyuan.in/" target="_blank" rel="noopener noreferrer"><strong>pap.er</strong></a> 专为 Mac 设计的壁纸应用</li>
<li><a href="https://theunarchiver.com/" target="_blank" rel="noopener noreferrer"><strong>The Unarchive</strong></a> Mac 目前感觉最好用的免费解压软件</li>
<li><a href="https://github.com/yingDev/Tickeys" target="_blank" rel="noopener noreferrer"><strong>Tickeys</strong></a> 让你用 Mac 键盘也能打出机械键盘的感觉</li>
<li><a href="https://github.com/beakerbrowser/beaker" target="_blank" rel="noopener noreferrer"><strong>Beaker Browser</strong></a> P2P 开源浏览器 支持点对点发布文件，成为了文件传输工具，支持 DAT 对等协议</li>
<li><a href="https://github.com/sindresorhus/gifski-app" target="_blank" rel="noopener noreferrer"><strong>Gifski</strong></a> 视频转 gif 工具</li>
<li><a href="https://github.com/serhii-londar/open-source-mac-os-apps" target="_blank" rel="noopener noreferrer"><strong>more</strong></a> 更多优秀的 mac app 介绍</li>
<li><a href="https://github.com/agalwood/Motrix" target="_blank" rel="noopener noreferrer"><strong>Motrix</strong></a> 支持 HTTP、FTP、BT、磁力链、百度网盘的下载工具</li>
<li><a href="https://apps.apple.com/cn/app/ipic-markdown-%E5%9B%BE%E5%BA%8A-%E6%96%87%E4%BB%B6%E4%B8%8A%E4%BC%A0%E5%B7%A5%E5%85%B7/id1101244278?mt=12" target="_blank" rel="noopener noreferrer"><strong>iPic</strong></a>这个应用可以让你方便地上传图片到各种图床</li>
<li><a href="http://www.img2icnsapp.com/" target="_blank" rel="noopener noreferrer"><strong>Image2Icon</strong></a></li>
<li><a href="https://github.com/dwarvesf/hidden" target="_blank" rel="noopener noreferrer"><strong>hidden</strong></a> 是用来帮助你隐藏 macOS 菜单栏上那些不常用的应用图标</li>
</ul>
<h2 id="录制" tabindex="-1"> 录制</h2>
<ul>
<li><a href="https://www.cockos.com/licecap/" target="_blank" rel="noopener noreferrer"><strong>licecap</strong></a> gif 录制，简洁好用，之前都用这个录制</li>
<li><a href="https://getkap.co/" target="_blank" rel="noopener noreferrer"><strong>kap</strong></a> 现在都用这个录制 gif，还支持导出 mp4，录制的 fps 很高</li>
<li><a href="https://github.com/keycastr/keycastr" target="_blank" rel="noopener noreferrer"><strong>KeyCastr</strong></a> 按键显示，录制的时候显示你的按键</li>
</ul>
<h2 id="chrome-拓展" tabindex="-1"> Chrome 拓展</h2>
<ul>
<li><a href="https://chrome.google.com/webstore/detail/tampermonkey/dhdgffkkebhmkfjojejmpbldmpobfkfo" target="_blank" rel="noopener noreferrer"><strong>Tampermonkey</strong></a> 油猴 神器</li>
<li><a href="https://chrome.google.com/webstore/detail/extension-manager/gjldcdngmdknpinoemndlidpcabkggco/related?utm_source=chrome-ntp-icon" target="_blank" rel="noopener noreferrer"><strong>扩展管理器</strong></a> 轻松管理扩展，就不用担心安装太多扩展了</li>
<li><a href="https://github.com/GoogleChromeLabs/ProjectVisBug" target="_blank" rel="noopener noreferrer"><strong>visbug</strong></a> 它可以帮助你改变 css，移动元素等等一系类强大的功能,页面调试神器。当然有些时候还是 DevTools 更好用</li>
<li><a href="https://github.com/sindresorhus/refined-github" target="_blank" rel="noopener noreferrer"><strong>refined-github</strong></a> 优化 github 默认功能和样式的 chrome 插件</li>
<li><a href="https://chrome.google.com/webstore/detail/adb/dpngiggdglpdnjdoaefidgiigpemgage" target="_blank" rel="noopener noreferrer"><strong>ADB</strong></a> chrome 真机调试安卓神器</li>
<li><a href="https://chrome.google.com/webstore/detail/adblock-plus-free-ad-bloc/cfhdojbkjhnklbpkdaibdccddilifddb" target="_blank" rel="noopener noreferrer"><strong>Adblock Plus</strong></a>
免费广告拦截程序 这个应该不用说了，装机必备</li>
<li><a href="https://chrome.google.com/webstore/detail/axure-rp-extension-for-ch/dogkpdfcklifaemcdfbildhcofnopogp" target="_blank" rel="noopener noreferrer"><strong>Axure RP Extension</strong></a> 看原型必备</li>
<li><a href="https://chrome.google.com/webstore/detail/json-formatter/bcjindcccaagfpapjjmafapmmgkkhgoa" target="_blank" rel="noopener noreferrer"><strong>JSON Formatter</strong></a> JSON 格式化 程序员必备</li>
<li><a href="https://chrome.google.com/webstore/detail/lighthouse/blipmdconlkpinefehnmjammfjpmpbjk" target="_blank" rel="noopener noreferrer"><strong>Lighthouse</strong></a> 谷歌出品，检查网页综合性能评分，分析不足</li>
<li><a href="https://chrome.google.com/webstore/detail/%E4%BA%8C%E7%BB%B4%E7%A0%81qr%E7%A0%81%E7%94%9F%E6%88%90%E5%99%A8qr-code-generato/pflgjjogbmmcmfhfcnlohagkablhbpmg" target="_blank" rel="noopener noreferrer"><strong>二维码(QR 码)生成器</strong></a> 手机扫码神器</li>
<li><a href="https://chrome.google.com/webstore/detail/octotree/bkhaagjahfmjljalopjnoealnfndnagc" target="_blank" rel="noopener noreferrer"><strong>Octotree</strong></a> github 上看代码必备神器</li>
<li><a href="https://chrome.google.com/webstore/detail/octolinker/jlmafbaeoofdegohdhinkhilhclaklkp" target="_blank" rel="noopener noreferrer"><strong>OctoLinker</strong></a> 能在 github 上看代码的时候 快速链接跳转到依赖的库</li>
<li><a href="https://chrome.google.com/webstore/detail/the-great-suspender/klbibkeccnjlkjkiokjodocebajanakg" target="_blank" rel="noopener noreferrer"><strong>The Great Suspender</strong></a> chrome 太吃内存了，当页面开的很多时候会很卡，它就完美的解决了这个问题。它将几分钟没浏览过的页面都挂载了，当你想看是再重新加载</li>
<li><a href="https://chrome.google.com/webstore/detail/web%E5%89%8D%E7%AB%AF%E5%8A%A9%E6%89%8Bfehelper/pkgccpejnmalmdinmhkkfafefagiiiad" target="_blank" rel="noopener noreferrer"><strong>WEB 前端助手</strong></a> 支持 JSON 格式化、二维码生成与解码、代码压缩、Markdown 与 HTML 互转、网页滚动截屏、正则表达式、时间转换工具、JSON 比对工具等</li>
<li><a href="https://chrome.google.com/webstore/detail/%E6%8E%98%E9%87%91/lecdifefmmfjnjjinhaennhdlmcaeeeb" target="_blank" rel="noopener noreferrer"><strong>掘金</strong></a> 目前我默认新开 tab 的默认页，可以刷刷新的文章或者项目，还不错。</li>
<li><a href="https://chrome.google.com/webstore/detail/%E6%B2%99%E6%8B%89%E6%9F%A5%E8%AF%8D-%E8%81%9A%E5%90%88%E8%AF%8D%E5%85%B8%E5%88%92%E8%AF%8D%E7%BF%BB%E8%AF%91/cdonnmffkdaoajfknoeeecmchibpmkmg" target="_blank" rel="noopener noreferrer"><strong>沙拉查词</strong></a> 划词翻译插件</li>
<li><a href="https://github.com/npmhub/npmhub" target="_blank" rel="noopener noreferrer"><strong>npmhub</strong></a>在 README 下方显示 npm 依赖信息</li>
</ul>
<h2 id="vs-code" tabindex="-1"> VS Code</h2>
<ul>
<li><a href="https://marketplace.visualstudio.com/items?itemName=wix.vscode-import-cost" target="_blank" rel="noopener noreferrer"><strong>Import Cost</strong></a> 查看你引入的依赖模块大小</li>
<li><a href="https://marketplace.visualstudio.com/items?itemName=formulahendry.auto-close-tag" target="_blank" rel="noopener noreferrer"><strong>Auto Close Tag</strong></a> 自动补全 html 标签，如输入<code>&lt;a&gt;</code>将自动补全<code>&lt;/a&gt;</code></li>
<li><a href="https://marketplace.visualstudio.com/items?itemName=formulahendry.auto-rename-tag" target="_blank" rel="noopener noreferrer"><strong>Auto Rename Tag</strong></a> 自动重命名 html 标签，如修改<code>&lt;a&gt;为&lt;b&gt;</code>，将自动修改结尾标签<code>&lt;/a&gt;为&lt;/b&gt;</code></li>
<li><a href="https://github.com/octref/polacode" target="_blank" rel="noopener noreferrer"><strong>polacode</strong></a> 生产代码图片快照插件</li>
<li><a href="https://github.com/jdneo/vscode-leetcode" target="_blank" rel="noopener noreferrer"><strong>vscode-leetcode</strong></a> 一个能让你在 vscode 中刷 LeetCode 的插件 算一个划水神器吧</li>
<li><a href="https://marketplace.visualstudio.com/items?itemName=robertohuertasm.vscode-icons" target="_blank" rel="noopener noreferrer"><strong>vscode-icons</strong></a> VS Code 必备吧，为文件添加炫图标</li>
<li><a href="https://marketplace.visualstudio.com/items?itemName=adpyke.codesnap" target="_blank" rel="noopener noreferrer"><strong>CodeSnap</strong></a> 生产代码截图</li>
</ul>
<h3 id="主题" tabindex="-1"> 主题</h3>
<p><a href="https://marketplace.visualstudio.com/search?target=VSCode&amp;category=Themes&amp;sortBy=Installs" target="_blank" rel="noopener noreferrer"><strong>官方主题页</strong></a> 可以选择自己喜欢的主题
<a href="https://marketplace.visualstudio.com/items?itemName=azemoh.one-monokai" target="_blank" rel="noopener noreferrer"><strong>one-monokai</strong></a> 我用的是这个主题，很多年了</p>
<h3 id="字体" tabindex="-1"> 字体</h3>
<ul>
<li><a href="https://github.com/tonsky/firacode" target="_blank" rel="noopener noreferrer"><strong>FiraCode</strong></a></li>
<li><a href="https://dank.sh/" target="_blank" rel="noopener noreferrer"><strong>Dank Mono</strong></a></li>
<li><a href="https://www.typography.com/blog/introducing-operator" target="_blank" rel="noopener noreferrer"><strong>Operator Mono</strong></a></li>
</ul>
<h2 id="编辑器和-terminal" tabindex="-1"> 编辑器和 Terminal</h2>
<ul>
<li><a href="https://zipzapmac.com/Go2Shell" target="_blank" rel="noopener noreferrer"><strong>Go2shell</strong></a> 在当前文件夹打开 shell</li>
<li>Terminal 用 <a href="https://www.iterm2.com/" target="_blank" rel="noopener noreferrer"><strong>iTerm2</strong></a> + <a href="https://en.wikipedia.org/wiki/Z_shell" target="_blank" rel="noopener noreferrer"><strong>zsh</strong></a> + <a href="https://github.com/robbyrussell/oh-my-zsh" target="_blank" rel="noopener noreferrer"><strong>oh-my-zsh</strong></a> 的组合，主题是 <a href="https://github.com/robbyrussell/oh-my-zsh/blob/master/themes/robbyrussell.zsh-theme" target="_blank" rel="noopener noreferrer">robbyrussell</a></li>
</ul>
<h3 id="zsh-插件" tabindex="-1"> zsh 插件</h3>
<ul>
<li><a href="https://brew.sh/index_zh-cn" target="_blank" rel="noopener noreferrer"><strong>Homebrew</strong></a> 必装</li>
<li><a href="https://github.com/ohmyzsh/ohmyzsh/tree/master/plugins/autojump" target="_blank" rel="noopener noreferrer"><strong>autojump</strong></a> 实现目录间快速跳转，想去哪个目录直接 j + 目录名，不用在频繁的 cd 了</li>
<li><a href="https://github.com/zsh-users/zsh-autosuggestions" target="_blank" rel="noopener noreferrer"><strong>zsh-autosuggestions</strong></a> 命令自动建议和补全</li>
<li><a href="https://github.com/zsh-users/zsh-syntax-highlighting" target="_blank" rel="noopener noreferrer"><strong>zsh-syntax-highlighting</strong></a> 命令行语法高亮</li>
<li><a href="https://github.com/ohmyzsh/ohmyzsh/tree/master/plugins/history" target="_blank" rel="noopener noreferrer"><strong>history</strong></a> 命令行记录</li>
<li><a href="https://github.com/olivierverdier/zsh-git-prompt" target="_blank" rel="noopener noreferrer"><strong>zsh-git-prompt</strong></a> git 分支信息提示</li>
</ul>
<h2 id="开发常用软件" tabindex="-1"> 开发常用软件</h2>
<ul>
<li><a href="https://github.com/desktop/desktop" target="_blank" rel="noopener noreferrer"><strong>Github Desktop</strong></a>管理 github 仓库的变更和 PR</li>
<li><a href="https://runjs.dev/" target="_blank" rel="noopener noreferrer"><strong>runjs</strong></a> js 运行沙盒，写 test case 或者面试当场写代码的时候很有用</li>
<li><a href="https://www.charlesproxy.com/" target="_blank" rel="noopener noreferrer"><strong>Charles</strong></a> 抓包用，支持 https</li>
<li><a href="https://www.google.com/chrome/" target="_blank" rel="noopener noreferrer"><strong>Google Chrome</strong></a> 前端必备没啥好说的</li>
<li><a href="https://colorsnapper.com/" target="_blank" rel="noopener noreferrer"><strong>ColorSnapper2</strong></a> 取色工具</li>
<li><a href="https://www.getpostman.com/" target="_blank" rel="noopener noreferrer"><strong>postman</strong></a> api 调试工具</li>
<li><a href="https://www.sequelpro.com/" target="_blank" rel="noopener noreferrer"><strong>Sequel Pro</strong></a> MySQL 界面管理工具</li>
<li><a href="https://github.com/newmarcel/KeepingYouAwake" target="_blank" rel="noopener noreferrer"><strong>KeepingYouAwake</strong></a> 可保证系统不自动休眠，挂机跑脚本很有用</li>
</ul>
<h2 id="有趣" tabindex="-1"> 有趣</h2>
<ul>
<li><a href="https://github.com/hendricius/the-bread-code" target="_blank" rel="noopener noreferrer"><strong>the-bread-code</strong></a> 使用程序员的思维制作面包 ，比如制作中使用 A/B test,
来比较那种做法更好。</li>
<li><a href="https://github.com/danistefanovic/build-your-own-x" target="_blank" rel="noopener noreferrer"><strong>build-your-own-x</strong></a> 教你用各种语言实现 Bot Database Neural Network</li>
<li><a href="https://github.com/trekhleb/javascript-algorithms" target="_blank" rel="noopener noreferrer">**javascript-algorithms **</a> 教你用前端知识认识各种算法</li>
<li><a href="https://github.com/kleampa/not-paid" target="_blank" rel="noopener noreferrer"><strong>not-paid</strong></a> 如果你给人做网站，交过去以后对方没有付款，那么这个 JS 会把网站的透明度一天调低一点，直到看不见</li>
<li><a href="https://github.com/infinitered/nsfwjs" target="_blank" rel="noopener noreferrer"><strong>nsfwjs</strong></a> 前端图片鉴黄，基于 Tensorflow</li>
<li><a href="https://github.com/tholman/elevator.js" target="_blank" rel="noopener noreferrer"><strong>elevator.js</strong></a> 我很喜欢的一个库，让一个 back-to-top 的效果有了一种坐复古电梯的感觉</li>
<li><a href="https://github.com/florinpop17/app-ideas" target="_blank" rel="noopener noreferrer"><strong>app-ideas</strong></a> 很多年轻人苦于缺少练手的项目，这个项目收集了不少点子，每个点子都有明确的目标和复杂资源。</li>
<li><a href="https://github.com/PavelDoGreat/WebGL-Fluid-Simulation" target="_blank" rel="noopener noreferrer"><strong>WebGL-Fluid-Simulation</strong></a> 很酷的 WebGL 交互</li>
<li><a href="https://github.com/miukimiu/react-kawaii" target="_blank" rel="noopener noreferrer"><strong>react-kawaii</strong></a> 一个非常可爱的 React 卡通人脸库，很有意思</li>
<li><a href="https://github.com/Mckinsey666/chart-race-react" target="_blank" rel="noopener noreferrer"><strong>chart-race-react</strong></a> 图表竞赛 长条图赛跑动画 在微博或者 b 站这种类型视频很火</li>
<li><a href="https://jdan.github.io/98.css/#tree-view" target="_blank" rel="noopener noreferrer"><strong>98.css</strong></a> windows 98 主题分格 css</li>
</ul>
<h2 id="常看的网站" tabindex="-1"> 常看的网站</h2>
<ul>
<li><a href="https://overreacted.io/" target="_blank" rel="noopener noreferrer"><strong>overreacted</strong></a> react Dan 的个人博客，更新频率很高（redux 作者，react 核心开发）</li>
<li><a href="https://medium.com/dailyjs" target="_blank" rel="noopener noreferrer"><strong>DailyJS</strong></a></li>
<li><a href="https://codeburst.io/" target="_blank" rel="noopener noreferrer"><strong>codeburst</strong></a></li>
<li><a href="http://www.ruanyifeng.com/blog/" target="_blank" rel="noopener noreferrer"><strong>阮一峰的网络日志</strong></a> 阮老师出的东西还是值得一读的</li>
<li><a href="https://www.infoq.cn/topic/Front-end" target="_blank" rel="noopener noreferrer"><strong>InfoQ</strong></a> 文章的质量比一般网站的高不少</li>
<li><a href="https://www.printf520.com/hot.html" target="_blank" rel="noopener noreferrer"><strong>鱼塘</strong></a> 划水网站 收集了很多网站 当天热门文章</li>
<li><a href="https://wubaiqing.github.io/zaobao/" target="_blank" rel="noopener noreferrer"><strong>每日时报</strong></a> 定期会分享一些库和工具</li>
<li><a href="https://github.com/sorrycc/awesome-f2e-libs" target="_blank" rel="noopener noreferrer"><strong>awesome-f2e-libs</strong></a> sorrycc 整理的个人关注使用的前端库</li>
</ul>
<h2 id="github" tabindex="-1"> Github</h2>
<ul>
<li><a href="https://git.io" target="_blank" rel="noopener noreferrer"><strong>github 短域名服务</strong></a></li>
<li><a href="https://shields.io/" target="_blank" rel="noopener noreferrer"><strong>shields</strong></a> Github README 里面的装逼小图标</li>
<li><a href="https://www.webpagefx.com/tools/emoji-cheat-sheet/" target="_blank" rel="noopener noreferrer"><strong>Emoji</strong></a> 方便平时写查找 emoji</li>
<li><a href="http://emoji.muan.co/#" target="_blank" rel="noopener noreferrer"><strong>emoji.muan</strong></a> 同上 而且更全</li>
<li><a href="http://git-awards.com/users/search?login=panjiachen" target="_blank" rel="noopener noreferrer"><strong>git-awards</strong></a> github ranking 没事可以查着玩玩</li>
<li><a href="http://githubrank.com/" target="_blank" rel="noopener noreferrer"><strong>http://githubrank.com/</strong></a> github 按照 followers 排名</li>
<li><a href="https://wangchujiang.com/github-rank/" target="_blank" rel="noopener noreferrer"><strong>github-rank</strong></a>同上，githubrank 基本算挂了已经，只能用这个新的</li>
<li><a href="https://www.timqian.com/star-history/#PanJiaChen/vue-element-admin" target="_blank" rel="noopener noreferrer"><strong>star-history</strong></a> 展示一个项目 Stars 增长规矩曲线</li>
<li><a href="https://github.com/probot/probot" target="_blank" rel="noopener noreferrer"><strong>probot</strong></a> 基于 github 做一个小机器人。可以做很多 workflow 的事情</li>
</ul>
<h2 id="开发" tabindex="-1"> 开发</h2>
<ul>
<li><a href="https://maliquankai.com/designnav/" target="_blank" rel="noopener noreferrer"><strong>产品/设计师/独立开发者的资源库</strong></a> 很全很强大</li>
<li><a href="https://caniuse.com/" target="_blank" rel="noopener noreferrer"><strong>can i use</strong></a> 前端常用网站了 查看不同属性和方法的兼容性</li>
<li><a href="https://squoosh.app/" target="_blank" rel="noopener noreferrer"><strong>Squoosh</strong></a> 谷歌出品在线免费图片压缩工具 神器</li>
<li><a href="https://github.com/CompuIves/codesandbox-client" target="_blank" rel="noopener noreferrer"><strong>codesandbox-client</strong></a> - 在线 web 开发容器</li>
<li><a href="https://github.com/fkling/astexplorer" target="_blank" rel="noopener noreferrer"><strong>astexplorer</strong></a> - 一个在线 ast 生成器</li>
<li><a href="https://30secondsofcode.org/" target="_blank" rel="noopener noreferrer"><strong>30 seconds of code</strong></a> 收集了许多有用的代码小片段</li>
<li><a href="https://app.zeplin.io/" target="_blank" rel="noopener noreferrer"><strong>zeplin</strong></a> 前端和设计师神器，有标注、Style Guide、版本管理、简单的团队协作，重点是前端不用写 css 了，复制就可以了。</li>
<li><a href="http://www.iconfont.cn/" target="_blank" rel="noopener noreferrer"><strong>iconfont</strong></a> 阿里出的图标库，非常实用，支持 svg、font、png 多种格式，基本现在所有图标都在上面找。</li>
<li><a href="http://cssicon.space/#/" target="_blank" rel="noopener noreferrer"><strong>cssicon</strong></a> 所有的 icon 都是纯 css 画的 缺点：icon 不够多</li>
<li><a href="http://zhitu.isux.us/" target="_blank" rel="noopener noreferrer"><strong>智图</strong></a> 腾讯出品 在线图片压缩 支持转成 webP 处理静态图片时候很好用</li>
<li><a href="https://www.picdiet.com/zh-cn" target="_blank" rel="noopener noreferrer"><strong>picdiet</strong></a> 另一个图片压缩网站</li>
<li><a href="http://apps.eky.hk/css-triangle-generator/" target="_blank" rel="noopener noreferrer"><strong>CSS triangle generator</strong></a> 帮你快速用 css 做出三角形</li>
<li><a href="http://www.cssarrowplease.com/" target="_blank" rel="noopener noreferrer"><strong>cssarrowplease</strong></a> 帮你做对话框三角的</li>
<li><a href="http://bennettfeely.com/clippy/" target="_blank" rel="noopener noreferrer"><strong>clippy</strong></a> 在线帮你使用 css clip-path 做出各种形状的图形</li>
<li><a href="https://regex101.com/" target="_blank" rel="noopener noreferrer"><strong>Regular Expressions</strong></a> 在线正则网站</li>
<li><a href="https://jex.im/regulex/" target="_blank" rel="noopener noreferrer"><strong>jex</strong></a> 正则可视化网站，配合上面的 Regular Expressions，写正则方便很多</li>
<li><a href="https://jsfiddle.net/" target="_blank" rel="noopener noreferrer"><strong>jsfiddle</strong></a> 在线运行代码网站 很不错，可惜要翻墙</li>
<li><a href="https://codepan.net/" target="_blank" rel="noopener noreferrer"><strong>codepan</strong></a> 在线运行代码网站 不用翻墙，可以自己部署</li>
<li><a href="https://fiddle.md/" target="_blank" rel="noopener noreferrer"><strong>fiddle.md</strong></a> 一个方便的在线共享 markdown 在线笔试题一般都用这个</li>
<li><a href="https://www.jsdelivr.com/" target="_blank" rel="noopener noreferrer"><strong>jsdelivr</strong></a> cdn 服务</li>
<li><a href="https://unpkg.com" target="_blank" rel="noopener noreferrer"><strong>unpkg</strong></a> cdn 服务</li>
<li><a href="https://coderpad.io/" target="_blank" rel="noopener noreferrer"><strong>coderpad</strong></a> 远程面试的神器，可以让面试者远程写代码 不过需要翻墙</li>
<li><a href="http://www.icode.live/" target="_blank" rel="noopener noreferrer"><strong>icode</strong></a> 有赞团队出品的 coderpad 可以互补，它不需要翻墙</li>
<li><a href="https://www.codeadvice.io" target="_blank" rel="noopener noreferrer"><strong>codeadvice</strong></a> 又一个让面试者远程写代码的网址</li>
<li><a href="https://snipper.io" target="_blank" rel="noopener noreferrer"><strong>snipper</strong></a> 一个代码协同的网站。你新建一个代码片段，然后把网址分享给其他人，就可以看到他们的实时编辑。</li>
<li><a href="https://codesandbox.io/" target="_blank" rel="noopener noreferrer"><strong>codesandbox</strong></a> 一个可以在线编辑且提供在线 demo 的网站 支持 vue react angular 多种框架 神器</li>
<li><a href="https://tympanus.net/codrops/" target="_blank" rel="noopener noreferrer"><strong>codrops</strong></a> 上面的交互都非常酷炫</li>
<li><a href="http://www.aigei.com/bgremover" target="_blank" rel="noopener noreferrer"><strong>bgremover</strong></a> 在线图片去底工具</li>
<li><a href="https://www.photopea.com/" target="_blank" rel="noopener noreferrer"><strong>photopea</strong></a> 一个网页端 Photoshop 很变态</li>
<li><a href="https://bestofjs.org/" target="_blank" rel="noopener noreferrer"><strong>bestofjs</strong></a> 查看一个项目增长经历，Star 数变化的网站，辅助你判断这个库的质量</li>
<li><a href="https://stackblitz.com/" target="_blank" rel="noopener noreferrer"><strong>stackblitz</strong></a> 一款在线 IDE,主要面向 Web 开发者,移植了很多 VS Code 的特性与功能</li>
<li><a href="http://app.programmingfonts.org" target="_blank" rel="noopener noreferrer">**programmingfonts.org **</a> 一个专门介绍编程字体的网站</li>
<li><a href="https://wubaiqing.github.io/zaobao/" target="_blank" rel="noopener noreferrer"><strong>早报</strong></a> 一个个人开发者的前端开发的分享日报</li>
<li><a href="https://emoji.muan.co/#" target="_blank" rel="noopener noreferrer"><strong>emoji-search</strong></a> 帮你快速找到能表达你情感的 emoji</li>
<li><a href="https://github.com/carloscuesta/gitmoji" target="_blank" rel="noopener noreferrer"><strong>gitmoji</strong></a> 通过 emoji 表达 git 的操作内容</li>
<li><a href="https://starcharts.herokuapp.com/PanJiaChen/vue-element-admin" target="_blank" rel="noopener noreferrer"><strong>starcharts</strong></a> 可以把你一个项目的 stars 增长轨迹当做 svg 放在 readme 中</li>
<li><a href="https://www.mockapi.io/" target="_blank" rel="noopener noreferrer"><strong>mockapi</strong></a> 一个还不错的在线 mock 服务（可在线可视化编辑），可以满足大部分简单需求了</li>
<li><a href="coder.com"><strong>coder</strong></a> 在线版 VS Code</li>
<li><a href="https://www.browserstack.com/" target="_blank" rel="noopener noreferrer"><strong>browserstack</strong></a> 远程调整各种版本浏览器 兼容性问题</li>
<li><a href="https://carbon.now.sh/" target="_blank" rel="noopener noreferrer"><strong>carbon</strong></a> 根据代码块生成图片 主要作用是让你打代码片段分享的时候更好看一点</li>
<li><a href="https://euangoddard.github.io/clipboard2markdown/" target="_blank" rel="noopener noreferrer"><strong>clipboard2markdown</strong></a> 将你所有复制进去的内容都转化为 markdown</li>
<li><a href="https://www.grammarly.com/" target="_blank" rel="noopener noreferrer"><strong>grammarly</strong></a> 英语写作检查工具</li>
<li><a href="https://quickchart.io/" target="_blank" rel="noopener noreferrer"><strong>quickchart</strong></a> 通过 URL 生成图表的开源服务</li>
<li><a href="https://www.hipdf.cn/" target="_blank" rel="noopener noreferrer"><strong>hipdf</strong></a> 一站式在线 PDF 解决方案</li>
<li><a href="https://whimsical.com" target="_blank" rel="noopener noreferrer"><strong>whimsical</strong></a> 画路程图</li>
<li><a href="https://picsum.photos/" target="_blank" rel="noopener noreferrer"><strong>Lorem Picsum</strong></a> 提供免费的占位图</li>
<li><a href="https://sm.ms/" target="_blank" rel="noopener noreferrer"><strong>sm.ms</strong></a> 免费图床</li>
<li><a href="https://www.webpagetest.org/" target="_blank" rel="noopener noreferrer"><strong>webpagetest</strong></a> 前端性能分析工具</li>
<li><a href="hacksplaining.com/lessons"><strong>网络安全的教程</strong></a></li>
<li><a href="https://ananasanalytics.com/" target="_blank" rel="noopener noreferrer"><strong>Ananas Analytics Desktop</strong></a> 一站式 数据可视化</li>
<li><a href="https://zws.im" target="_blank" rel="noopener noreferrer"><strong>“零宽” 长度的短网址服务</strong></a> 利用“零宽字符”来缩短 url，还支持统计</li>
<li><a href="https://www.hotjar.com/" target="_blank" rel="noopener noreferrer"><strong>hotjar</strong></a> 用户调研 支持用户反馈 录屏 heatMap</li>
<li><a href="https://github.com/i5ting/How-to-learn-node-correctly" target="_blank" rel="noopener noreferrer"><strong>狼叔：如何正确的学习 Node.js</strong></a></li>
<li><a href="https://dujiaoshou.io/" target="_blank" rel="noopener noreferrer"><strong>独角兽公司榜单</strong></a> 感觉大家想去大公司的时候，可以看看排名</li>
<li><a href="https://colors.ichuantong.cn/" target="_blank" rel="noopener noreferrer"><strong>中国传统颜色手册</strong></a></li>
<li><a href="https://coderlane.net/" target="_blank" rel="noopener noreferrer"><strong>coderlane</strong></a> 远程视频面试，目前使用的是牛客，这个工具待考察</li>
<li><a href="https://excalidraw.com/" target="_blank" rel="noopener noreferrer">excalidraw</a> 手绘风格流程图，强推</li>
<li><a href="https://github.com/spencerwooo/cwim" target="_blank" rel="noopener noreferrer">cwim</a> Count Words Inside a Markdown file 统计字数和预期阅读时间</li>
</ul>
<h2 id="设计" tabindex="-1"> 设计</h2>
<ul>
<li><a href="https://uimovement.com/" target="_blank" rel="noopener noreferrer"><strong>uimovement</strong></a> 能从这个网站找到不少动画交互的灵感</li>
<li><a href="https://www.awwwards.com/" target="_blank" rel="noopener noreferrer"><strong>awwwards</strong></a>是一个一个专门为设计精美的网站以及富有创意的网站颁奖的网站</li>
<li><a href="https://dribbble.com/" target="_blank" rel="noopener noreferrer"><strong>dribbble</strong></a> 经常能在上面找到很多有创意好看的 gif 或者图片，基本上我所有的图都是上面招的</li>
<li><a href="https://www.behance.net/" target="_blank" rel="noopener noreferrer"><strong>Bēhance</strong></a> dribbble 是设计师的微博，Bēhance 是设计师的博客</li>
<li><a href="https://logojoy.com/" target="_blank" rel="noopener noreferrer"><strong>Logojoy</strong></a> 使用 ai 做 logo 的网站，做出来的 logo 质量还不错。</li>
<li><a href="http://brandmark.io/" target="_blank" rel="noopener noreferrer"><strong>brandmark</strong></a> 另一个在线制作 logo 网站</li>
<li><a href="https://instantlogodesign.com/" target="_blank" rel="noopener noreferrer"><strong>instant</strong></a> 又一个 logo 制作网站</li>
<li><a href="https://www.designevo.com/logo-maker/" target="_blank" rel="noopener noreferrer"><strong>logo-maker</strong></a> 又一个 logo 制作网站 这个更简单点 就是选模板之后微调</li>
<li><a href="https://coolors.co/" target="_blank" rel="noopener noreferrer"><strong>coolors</strong></a> 帮你在线配色的网站 你能找到不少配色灵感</li>
<li><a href="http://colorhunt.co/" target="_blank" rel="noopener noreferrer"><strong>colorhunt</strong></a> 另一个配色网站</li>
<li><a href="https://uigradients.com/#SummerDog" target="_blank" rel="noopener noreferrer"><strong>uigradients</strong></a> 渐变色网站</li>
<li><a href="https://www.designcap.com" target="_blank" rel="noopener noreferrer"><strong>designcap</strong></a> 在线海报设计</li>
<li><a href="https://flatuicolors.com/" target="_blank" rel="noopener noreferrer"><strong>Flat UI 色表</strong></a> Flat UI 色表</li>
<li><a href="https://www.0to255.com/" target="_blank" rel="noopener noreferrer"><strong>0to255</strong></a> 颜色梯度</li>
<li><a href="https://github.com/mikolajdobrucki/ikonate" target="_blank" rel="noopener noreferrer"><strong>Ikonate</strong></a> 提供免费的图标 icons</li>
<li><a href="https://remixicon.com/" target="_blank" rel="noopener noreferrer"><strong>remixicon</strong></a> 又一个提供免费图标 icons</li>
<li><a href="https://github.com/feathericons/feather" target="_blank" rel="noopener noreferrer"><strong>feather</strong></a> 免费的 icons</li>
<li><a href="https://github.com/arcticicestudio/nord" target="_blank" rel="noopener noreferrer">**nord **</a> 北欧性冷淡风主题配色</li>
<li><a href="https://unsplash.com/" target="_blank" rel="noopener noreferrer"><strong>Unsplash</strong></a> 提供免费的高清图片</li>
<li><a href="https://colorkitty.com/" target="_blank" rel="noopener noreferrer"><strong>colorkitty</strong></a> 从你的图片中提取配色</li>
<li><a href="design.youzan.com"><strong>design.youzan</strong></a> 有赞设计原则</li>
<li><a href="https://undraw.co/illustrations" target="_blank" rel="noopener noreferrer"><strong>undraw</strong></a> 一个免费的插图网站，可以在上面寻找合适的插图，用于商业用途。</li>
</ul>
<h2 id="有趣-1" tabindex="-1"> 有趣</h2>
<ul>
<li><a href="http://www.baidu-x.com/" target="_blank" rel="noopener noreferrer"><strong>帮你百度一下</strong></a> 可以 <a href="http://www.baidu-x.com/?q=%E5%92%8C%E8%B0%90%E6%9C%89%E7%88%B1%E5%AF%8C%E5%BC%BA" target="_blank" rel="noopener noreferrer">点我测试一下**</a>-</li>
<li><a href="http://lmgtfy.com/" target="_blank" rel="noopener noreferrer"><strong>国际版</strong></a> 同<code>帮我百度一下</code>-<a href="http://lmgtfy.com/?q=a" target="_blank" rel="noopener noreferrer">点我测试一下**</a>-</li>
<li><a href="https://alpha.wallhaven.cc/" target="_blank" rel="noopener noreferrer"><strong>wallhaven</strong></a> 壁纸网站-</li>
<li><a href="http://matthewrayfield.com/articles/animating-urls-with-javascript-and-emojis/#%F0%9F%8C%96" target="_blank" rel="noopener noreferrer"><strong>URL 地址播放 Emojis 动画</strong></a> 在地址栏里面播放 emoji</li>
<li><a href="https://cantunsee.space/" target="_blank" rel="noopener noreferrer"><strong>Can't Unsee</strong></a> 强烈建议前端、客户端、UI 开发的同学玩下，检查一下自己对设计稿的敏感度怎么样</li>
<li><a href="https://talk.swift.gg/" target="_blank" rel="noopener noreferrer"><strong>ggtalk</strong></a> 平时一直在听的一个技术博客</li>
<li><a href="https://github.com/Blankj/awesome-comment" target="_blank" rel="noopener noreferrer"><strong>awesome-comment</strong></a> 里面收集了很多有趣的代码注释</li>
<li><a href="https://www.text-image.com/index.html" target="_blank" rel="noopener noreferrer"><strong>text-img</strong></a> 都将图片转化为 ascii 用来写注释</li>
<li><a href="https://github.com/beizhedenglong/weird-fonts" target="_blank" rel="noopener noreferrer"><strong>weird-fonts</strong></a> 将普通字母转化为 特殊 unicode</li>
<li><a href="https://github.com/epidemian/snake" target="_blank" rel="noopener noreferrer"><strong>snake</strong></a> 在地址栏里面玩贪吃蛇</li>
<li><a href="https://github.com/yuanfux/zero-width-lib" target="_blank" rel="noopener noreferrer"><strong>zero-width-lib</strong></a> 利用零宽度字符实现 隐形水印、加密信息分享、逃脱词匹配，很有创意</li>
<li><a href="https://www.abbreviations.com/" target="_blank" rel="noopener noreferrer"><strong>abbreviations</strong></a> 查看一个简写是什么意思的网站</li>
<li><a href="https://magi.com/" target="_blank" rel="noopener noreferrer"><strong>magi</strong></a> ai 搜索神器，超屌</li>
<li><a href="https://zzkia.noddl.me:8020/" target="_blank" rel="noopener noreferrer"><strong>诺基亚短信图片生成器</strong></a></li>
</ul>
<h2 id="交互" tabindex="-1"> 交互</h2>
<ul>
<li><a href="http://aliscued.lofter.com/" target="_blank" rel="noopener noreferrer"><strong>微交互</strong></a> 里面收集了市面上很多很好的微交互例子 值得学习</li>
<li><a href="http://littlebigdetails.com/" target="_blank" rel="noopener noreferrer"><strong>Little Big Details</strong></a> 同上，一个国外微交互汇集网站</li>
<li><a href="https://cruip.com/" target="_blank" rel="noopener noreferrer"><strong>cruip</strong></a> 登录页的各种页面设计，可以免费下载模板</li>
<li><a href="https://comixify.ii.pw.edu.pl/" target="_blank" rel="noopener noreferrer"><strong>Comixify</strong></a> 一个波兰团队做了非常好玩的工具，可以把视频自动转成漫画，上图是他们提供的 demo，效果很棒。</li>
<li><a href="https://github.com/bui/taiko-web" target="_blank" rel="noopener noreferrer"><strong>taiko-web</strong></a> 太鼓达人网页版 只能说很 6</li>
</ul>
<h2 id="css" tabindex="-1"> Css</h2>
<ul>
<li><a href="https://css-tricks.com/" target="_blank" rel="noopener noreferrer"><strong>css-tricks</strong></a> 一个学习 css 不错的网站 有很多有意思的 demo</li>
</ul>
<h2 id="教程" tabindex="-1"> 教程</h2>
<ul>
<li><a href="https://egghead.io/courses/execute-npm-package-binaries-with-the-npx-package-runner" target="_blank" rel="noopener noreferrer"><strong>npx</strong></a> 教你怎么合理的使用 npx</li>
<li><a href="https://www.hacksplaining.com/lessons" target="_blank" rel="noopener noreferrer"><strong>hacksplaining</strong></a> 网络安全学习网站</li>
<li><a href="https://github.com/mcuking/mobile-web-best-practice" target="_blank" rel="noopener noreferrer"><strong>mobile-web-best-practice</strong></a> 移动 web 最佳实践</li>
<li><a href="https://github.com/bradtraversy/vanillawebprojects" target="_blank" rel="noopener noreferrer"><strong>vanillawebprojects</strong></a> 通过纯前端的手段实现一些小项目，适合入门</li>
<li><a href="https://codingpy.com/books/thinkpython2/index.html" target="_blank" rel="noopener noreferrer"><strong>Think Python</strong></a> 还不错的 Python 入门教程</li>
<li><a href="https://github.com/lirantal/nodejs-cli-apps-best-practices" target="_blank" rel="noopener noreferrer"><strong>Node.js CLI Apps Best Practices</strong></a> 叫你如何写好一个 node cli 工具</li>
<li><a href="https://mystery.knightlab.com/walkthrough.html" target="_blank" rel="noopener noreferrer"><strong>SQL Murder Mystery</strong></a> 一个英文的 SQL 初级教程，以游戏的方式，让你利用学到的 SQL 概念和命令来找出谋杀凶手</li>
<li><a href="https://github.com/phuoc-ng/html-dom" target="_blank" rel="noopener noreferrer"><strong>html-dom</strong></a> 一些常用的 dom 或者原生 js 操作判断，挺实用的</li>
<li><a href="https://ts.xcatliu.com/" target="_blank" rel="noopener noreferrer"><strong>TypeScript</strong></a> TypeScript 入门教程，很不错，推荐初学者学习</li>
<li><a href="https://tsejx.github.io/webpack-guidebook/" target="_blank" rel="noopener noreferrer"><strong>Webpack 知识图谱</strong></a> webpack 相关教程和原理分析还不错</li>
</ul>
<h2 id="产品" tabindex="-1"> 产品</h2>
<ul>
<li><a href="http://www.pmdaniu.com/" target="_blank" rel="noopener noreferrer"><strong>产品大牛</strong></a> 什么有很多完整的产品原型可以借鉴</li>
<li><a href="https://modao.cc/pricing" target="_blank" rel="noopener noreferrer"><strong>磨刀</strong></a> 快速出 ui 原型</li>
</ul>
<h2 id="实用" tabindex="-1"> 实用</h2>
<ul>
<li><a href="https://xiezuocat.com/#/" target="_blank" rel="noopener noreferrer"><strong>写作猫</strong></a> 可以通过 AI 的方式，帮你检查错别字，很有效的一个工具</li>
<li><a href="https://www.draw.io/" target="_blank" rel="noopener noreferrer"><strong>draw</strong></a> 在线 web 画流程图</li>
<li><a href="https://admin.typeform.com/signup" target="_blank" rel="noopener noreferrer"><strong>typeform</strong></a> 一个国外的在线调查问卷网站</li>
<li><a href="https://www.videofk.com/" target="_blank" rel="noopener noreferrer"><strong>VideoFk</strong></a> VideoFk 视频在线解析下载</li>
<li><a href="https://www.allhistory.com/" target="_blank" rel="noopener noreferrer"><strong>全历史</strong></a> 历史内容聚合网站</li>
<li><a href="https://www.uzer.me/" target="_blank" rel="noopener noreferrer"><strong>UzerMe</strong></a> 云端办公工具</li>
<li><a href="https://sobooks.cc/" target="_blank" rel="noopener noreferrer"><strong>SoBooks</strong></a> 强大的电子书资源网站</li>
<li><a href="https://www.gaoding.com/" target="_blank" rel="noopener noreferrer"><strong>稿定设计</strong></a> 键式设计工具+智能抠图</li>
<li><a href="https://pichance.com/" target="_blank" rel="noopener noreferrer"><strong>pichance</strong></a> 一个将低分辨率图片增强为高分辨率的工具，可以将分辨率增加 4 倍（即长和宽各增加一倍）</li>
<li><a href="http://bigjpg.com/" target="_blank" rel="noopener noreferrer"><strong>bigjpg</strong></a> 放大图片的神器 通过神经网络可以放大图片并能降噪</li>
<li><a href="https://dalipan.com" target="_blank" rel="noopener noreferrer"><strong>大力盘</strong></a> 百度网盘搜索</li>
<li><a href="https://www.macbl.com/app/internet/enfi" target="_blank" rel="noopener noreferrer"><strong>ENFI 下载器</strong></a> 不限速下载器</li>
<li><a href="https://www.laihua.com/" target="_blank" rel="noopener noreferrer"><strong>来画视频</strong></a> 像做 PPT 一样做短视频</li>
<li><a href="https://www.arkie.cn/" target="_blank" rel="noopener noreferrer"><strong>Arkie 海报制作工具</strong></a></li>
<li><a href="http://www.ypppt.com/" target="_blank" rel="noopener noreferrer"><strong>优品 PPT</strong></a></li>
<li><a href="http://www.tretars.com" target="_blank" rel="noopener noreferrer"><strong>比格 PPT</strong></a></li>
<li><a href="https://www.pexels.com/" target="_blank" rel="noopener noreferrer"><strong>高清免费图片</strong></a></li>
<li><a href="https://unsplash.com/" target="_blank" rel="noopener noreferrer"><strong>高清免费图片 2</strong></a></li>
<li><a href="http://www.lsjgcx.com/" target="_blank" rel="noopener noreferrer"><strong>历史价格查询</strong></a> 淘宝，京东等商品历史价格，能更清晰了解商家的活动是否为虚假促销以及促销的力度。神器</li>
<li><a href="https://send.firefox.com/" target="_blank" rel="noopener noreferrer"><strong>Firefox Send</strong></a> 文件分享服务，下载一次或者到期即焚，在当前网络监管下很实用的服务</li>
<li><a href="https://time.graphics/editor" target="_blank" rel="noopener noreferrer"><strong>time.graphics</strong></a> 在线 milestone timeline 生成器</li>
<li><a href="https://www.processon.com/" target="_blank" rel="noopener noreferrer"><strong>processon</strong></a> 免费在线作图，支持流程图、思维导图、原型图、UML、网络拓扑图、组织结构图等</li>
<li><a href="http://ilxdh.com/" target="_blank" rel="noopener noreferrer"><strong>龙轩导航</strong></a> 一个总结了不少实用网站的导航</li>
</ul>
<h2 id="生活" tabindex="-1"> 生活</h2>
<ul>
<li><a href="https://cook.yunyoujun.cn/" target="_blank" rel="noopener noreferrer"><strong>Cook</strong></a> 居家烧饭神器，智能根据配菜生成菜谱还附带教学视频</li>
</ul>
<h2 id="talk" tabindex="-1"> Talk</h2>
<ul>
<li><a href="https://github.com/peerigon/talks" target="_blank" rel="noopener noreferrer"><strong>peerigon-talks</strong></a> 收集了不少有意思的 talks</li>
</ul>
<h2 id="算法" tabindex="-1"> 算法</h2>
<ul>
<li><a href="https://github.com/azl397985856/leetcode" target="_blank" rel="noopener noreferrer"><strong>leetcode</strong></a> 用 js 刷 leetcode</li>
</ul>
<h2 id="typescript" tabindex="-1"> Typescript</h2>
<ul>
<li><a href="https://ts.xcatliu.com/" target="_blank" rel="noopener noreferrer"><strong>TypeScript 入门教程</strong></a> 推荐阅读</li>
<li><a href="https://jkchao.github.io/typescript-book-chinese/#why/" target="_blank" rel="noopener noreferrer"><strong>深入理解 TypeScript</strong></a> 深入理解 ts</li>
</ul>
]]></content:encoded>
    </item>
    <item>
      <title>B 站学前端</title>
      <link>https://wukongnotnull.com/posts/goodshare/3.html</link>
      <guid>https://wukongnotnull.com/posts/goodshare/3.html</guid>
      <source url="https://wukongnotnull.com/rss.xml">B 站学前端</source>
      <category>前端</category>
      <category>编程导航</category>
      <pubDate>Tue, 25 Oct 2022 00:00:00 GMT</pubDate>
      <content:encoded><![CDATA[<h1 id="b-站学前端" tabindex="-1"> B 站学前端</h1>
<h2 id="网络知识" tabindex="-1"> 网络知识</h2>
<h3 id="_1-网络工作原理" tabindex="-1"> 1 网络工作原理</h3>
<p>计算机网络原理：https://www.bilibili.com/video/BV1xJ41137Q3</p>
<h3 id="_2-什么是http" tabindex="-1"> 2. 什么是HTTP</h3>
<p>HTTP协议详解：https://www.bilibili.com/video/BV1js411g7Fw</p>
<h3 id="_3-浏览器及工作方式" tabindex="-1"> 3. 浏览器及工作方式</h3>
<p>浏览器是如何运作的？：https://www.bilibili.com/video/BV1x54y1B7RE</p>
<h3 id="_4-dns-及其工作原理" tabindex="-1"> 4. DNS 及其工作原理</h3>
<p>DNS基本工作原理：https://www.bilibili.com/video/BV1GW411j7Ts</p>
<p>直观DNS科普：https://www.bilibili.com/video/BV1F54y1R7BC</p>
<h3 id="_5-域名相关知识" tabindex="-1"> 5. 域名相关知识</h3>
<p>域名解析完整讲解：https://www.bilibili.com/video/BV1zA411x7Pj</p>
<h3 id="_6-云服务相关知识" tabindex="-1"> 6. 云服务相关知识</h3>
<p>揭秘阿里云服务器：https://www.bilibili.com/video/BV1Rt411u7k4</p>
<h2 id="超文本标记语言" tabindex="-1"> 超文本标记语言</h2>
<h3 id="_1-html基础知识学习" tabindex="-1"> 1. HTML基础知识学习</h3>
<p>HTML全套基础教程：https://www.bilibili.com/video/BV11t411K74Q</p>
<h3 id="_2-html-编写规则-和语义化写法" tabindex="-1"> 2. HTML 编写规则 和语义化写法</h3>
<p>HTML 速成：https://www.bilibili.com/video/BV1vs411M7aT</p>
<h3 id="_3-表单和验证" tabindex="-1"> 3. 表单和验证</h3>
<p>html5表单验证：https://www.bilibili.com/video/BV16K4y1Z7Gb</p>
<h3 id="_4-公约和最佳实践方法" tabindex="-1"> 4. 公约和最佳实践方法</h3>
<p>前端代码规范秘籍：https://www.bilibili.com/video/BV19P4y147Jz</p>
<h3 id="_5-seo-基础知识" tabindex="-1"> 5. SEO 基础知识</h3>
<p>SEO优化学习教程：https://www.bilibili.com/video/BV1fE411J7ya</p>
<h2 id="层叠样式表" tabindex="-1"> 层叠样式表</h2>
<h3 id="_1-css-基础知识学习" tabindex="-1"> 1. CSS 基础知识学习</h3>
<p>CSS3基础教程：https://www.bilibili.com/video/BV1Bx411u7cS</p>
<p>CSS3全套教程：https://www.bilibili.com/video/BV1et411q74F</p>
<h3 id="_2-页面切图和布局实现" tabindex="-1"> 2. 页面切图和布局实现</h3>
<ul>
<li>浮动布局</li>
<li>浮动布局：https://www.bilibili.com/video/BV1Zs411j7Z3</li>
<li>定位布局</li>
<li>CSS定位布局：https://www.bilibili.com/video/BV1ni4y1g7tc</li>
<li>Display</li>
<li>display&amp;visibility：https://www.bilibili.com/video/BV1HJ411M7CM</li>
<li>盒子模型</li>
<li>CSS盒子模型与定位：https://www.bilibili.com/video/BV1P7411G7BW</li>
<li>Grid 布局</li>
<li>如何用grid：https://www.bilibili.com/video/BV14C4y1W7oA</li>
<li>Flex 布局</li>
<li>Flex伸缩布局：https://www.bilibili.com/video/BV1BJ41197XE</li>
</ul>
<h3 id="_3-页面响应式布局设计" tabindex="-1"> 3. 页面响应式布局设计</h3>
<p>六个案例学会响应式布局：https://www.bilibili.com/video/BV1ov411k7sm</p>
<h2 id="浏览器脚本语言" tabindex="-1"> 浏览器脚本语言</h2>
<h3 id="_1-javascript基础语法和知识" tabindex="-1"> 1. JavaScript基础语法和知识</h3>
<p>JavaScript基础语法：https://www.bilibili.com/video/BV1Sy4y1C7ha</p>
<h3 id="_2-使用javascript-操作-dom元素" tabindex="-1"> 2. 使用JavaScript 操作 DOM元素</h3>
<p>JS必会的DOM BOM操作：https://www.bilibili.com/video/BV1k4411w7sV</p>
<h3 id="_3-ajax-异步请求相关知识学习" tabindex="-1"> 3. Ajax 异步请求相关知识学习</h3>
<p>Ajax入门到精通：https://www.bilibili.com/video/BV1WC4y1b78y</p>
<h3 id="_4-es6-以上版本-的javascript" tabindex="-1"> 4. ES6 以上版本 的JavaScript</h3>
<p>ES6-ES11新特性：https://www.bilibili.com/video/BV1uK411H7on</p>
<h2 id="版本控制管理系统" tabindex="-1"> 版本控制管理系统</h2>
<h3 id="_1-git的基本用法" tabindex="-1"> 1.  Git的基本用法</h3>
<p>Git最新教程：https://www.bilibili.com/video/BV1FE411P7B3</p>
<h3 id="_2-相关平台-软件的使用" tabindex="-1"> 2.  相关平台/软件的使用</h3>
<ul>
<li>GitHub</li>
<li>十分钟学会Github：https://www.bilibili.com/video/BV1yo4y1d7UK</li>
<li>GitLab</li>
<li>gitlab使用说明：https://www.bilibili.com/video/BV11E411x7Uv</li>
<li>Gitee</li>
<li>这个看中文网址就可以了，目前B站还没有很好的视频介绍</li>
</ul>
<h2 id="网络安全相关知识" tabindex="-1"> 网络安全相关知识</h2>
<h3 id="_1-https-原理和使用" tabindex="-1"> 1. HTTPS 原理和使用</h3>
<p>你连HTTPS原理都不懂：https://www.bilibili.com/video/BV1Up4y1i7PG</p>
<h3 id="_2-cors-跨域请求和安全知识" tabindex="-1"> 2. CORS 跨域请求和安全知识</h3>
<p>什么是CORS：https://www.bilibili.com/video/BV1Kt411E76z</p>
<h3 id="_3-内容安全策略" tabindex="-1"> 3. 内容安全策略</h3>
<p>网络渗透：https://www.bilibili.com/video/BV1kh411W7Vv</p>
<h3 id="_4-owasp-安全风险知识" tabindex="-1"> 4. OWASP 安全风险知识</h3>
<p>OWASP  TOP10：https://www.bilibili.com/video/BV1ey4y1V7Jj</p>
<h2 id="包管理工具" tabindex="-1"> 包管理工具</h2>
<h3 id="_1-npm" tabindex="-1"> 1. npm</h3>
<p>包管理工具：https://www.bilibili.com/video/BV1Dv411W7XP</p>
<h3 id="_2-yarn" tabindex="-1"> 2. yarn</h3>
<p>Yarn入门：https://www.imooc.com/learn/766  (B站没有，推荐这个免费)</p>
<h2 id="css-预处理-语言" tabindex="-1"> CSS 预处理 语言</h2>
<h3 id="_1-sass" tabindex="-1"> 1. Sass</h3>
<p>SCSS从入门到实战：https://www.bilibili.com/video/BV1Zg4y1v75U</p>
<h3 id="_2-postcss" tabindex="-1"> 2. PostCSS</h3>
<p>建议买书《深入PostCSS Web设计》</p>
<h3 id="_3-less" tabindex="-1"> 3. Less</h3>
<p>前端less教程：https://www.bilibili.com/video/BV1YW411T7vd</p>
<h2 id="构建工具" tabindex="-1"> 构建工具</h2>
<h3 id="_1-任务执行命令" tabindex="-1"> 1. 任务执行命令</h3>
<p>[Task Runners]</p>
<ul>
<li>npm scripts</li>
<li>npm包管理应用：https://www.bilibili.com/video/BV1Dv411W7XP</li>
<li>Gulp</li>
<li>Gulp入门：https://www.bilibili.com/video/BV1yA411s72G</li>
</ul>
<h3 id="_2-打包工具" tabindex="-1"> 2. 打包工具</h3>
<ul>
<li>Webpack</li>
<li>Webpack从入门到精通：https://www.bilibili.com/video/BV1e7411j7T5</li>
<li>Parcel</li>
<li>Parcel初体验：https://www.bilibili.com/video/BV1Pa4y147Kf</li>
</ul>
<h3 id="_3-代码格式化工具" tabindex="-1"> 3. 代码格式化工具</h3>
<ul>
<li>Prettier</li>
<li>Prettier和ESLint使用：https://www.bilibili.com/video/BV183411r7YK</li>
<li>ESLint</li>
<li>ESLint基础入门：https://space.bilibili.com/390120104/search/video?keyword=ESLint</li>
</ul>
<h2 id="三大前端框架" tabindex="-1"> 三大前端框架</h2>
<h3 id="react-js" tabindex="-1"> React.js</h3>
<p>React基础视频：https://www.bilibili.com/video/BV1g4411i7po</p>
<p>React全家桶：https://www.bilibili.com/video/BV1wy4y1D7JT</p>
<p>React实战博客：https://www.bilibili.com/video/BV1CJ411377B</p>
<p>React商城实战：https://www.bilibili.com/video/BV1i5411c7xp</p>
<h3 id="vue-js" tabindex="-1"> Vue.js</h3>
<p>Vue2全家桶：https://www.jspang.com/detailed?id=57</p>
<p>Vue3全家桶：https://www.jspang.com/detailed?id=67</p>
<p>vuejs从入门到精通：https://www.bilibili.com/video/BV1Zy4y1K7SH</p>
<h3 id="angular" tabindex="-1"> Angular</h3>
<p>Angular基础：https://www.bilibili.com/video/BV1Wx411R7qt</p>
<h2 id="web-组件化编程" tabindex="-1"> Web 组件化编程</h2>
<h3 id="html-templates" tabindex="-1"> HTML Templates</h3>
<h3 id="custom-elements" tabindex="-1"> Custom Elements</h3>
<h3 id="shadow-dom" tabindex="-1"> Shadow DOM</h3>
<blockquote>
<p>此部分内容没有找到合适视频</p>
</blockquote>
<h2 id="css-相关框架" tabindex="-1"> CSS 相关框架</h2>
<h3 id="bootstrap" tabindex="-1"> BootStrap</h3>
<p>一周学会BootStrap：https://www.bilibili.com/video/BV1Lx411v73k</p>
<h3 id="material-ui" tabindex="-1"> Material UI</h3>
<p>Material  UI入门教程：https://www.bilibili.com/video/BV12J411s75b</p>
<h3 id="materialize-css" tabindex="-1"> Materialize CSS</h3>
<p>Materialize CSS Crash Course：https://www.bilibili.com/video/BV1gx411h7Y5</p>
<h3 id="reactstrap" tabindex="-1"> ReactStrap</h3>
<h2 id="javascript-语法糖" tabindex="-1"> JavaScript 语法糖</h2>
<h3 id="type-checkers" tabindex="-1"> Type Checkers</h3>
<h3 id="typescript" tabindex="-1"> TypeScript</h3>
<p>TypeScript从入门到精通：https://www.bilibili.com/video/BV1qV41167VD</p>
<h3 id="flow" tabindex="-1"> Flow</h3>
<h2 id="服务端渲染" tabindex="-1"> 服务端渲染</h2>
<h3 id="react-js-1" tabindex="-1"> React.js</h3>
<ul>
<li>Next.js</li>
<li>Next.js入门教程：https://www.bilibili.com/video/BV13441117KK</li>
<li>GatsbyJS</li>
<li>GatsbyJS 实战：https://www.bilibili.com/video/BV1i4411T7AR （英文）</li>
</ul>
<h3 id="vue-js-1" tabindex="-1"> Vue.js</h3>
<ul>
<li>Nuxt.js</li>
<li>Nuxt.js入门：https://www.bilibili.com/video/BV1Xt41117Kg</li>
</ul>
<h3 id="angular-1" tabindex="-1"> Angular</h3>
<ul>
<li>Universal</li>
</ul>
<h2 id="图形化编程" tabindex="-1"> 图形化编程</h2>
<h3 id="graphql" tabindex="-1"> GraphQL</h3>
<h3 id="cocos-creator" tabindex="-1"> Cocos Creator</h3>
<p>Cocos 图形游戏开发：https://www.bilibili.com/video/BV1sA411Y7x4</p>
<h3 id="three-js" tabindex="-1"> Three.js</h3>
<p>Three.js基础教程-英文：https://www.bilibili.com/video/BV1ks411W78i</p>
<p>Three.js教程：https://www.bilibili.com/video/BV1va4y1p7QB</p>
<h2 id="静态站点生成器" tabindex="-1"> 静态站点生成器</h2>
<h3 id="next-js" tabindex="-1"> Next.js</h3>
<p>Next.js入门教程：https://www.bilibili.com/video/BV13441117KK</p>
<h3 id="gatsbyjs" tabindex="-1"> GatsbyJS</h3>
<p>GatsbyJS 实战：https://www.bilibili.com/video/BV1i4411T7AR （英文）</p>
<h3 id="nuxt-js" tabindex="-1"> Nuxt.js</h3>
<p>Nuxt.js入门：https://www.bilibili.com/video/BV1Xt41117Kg</p>
<h3 id="vuepress" tabindex="-1"> Vuepress</h3>
<p>Vuepress入门到精通：https://www.bilibili.com/video/BV1vb411m7NY</p>
<h3 id="hugo" tabindex="-1"> Hugo</h3>
<p>10分钟搭建个人网站：https://www.bilibili.com/video/BV1x64y117PX</p>
<h2 id="移动app开发" tabindex="-1"> 移动App开发</h2>
<h3 id="react-native" tabindex="-1"> React  Native</h3>
<p>ReactNatvie基础：https://www.bilibili.com/video/BV1Eg4y16735</p>
<p>ReactNatvie实战：https://www.bilibili.com/video/BV15K411s75p</p>
<h3 id="uniapp" tabindex="-1"> UniApp</h3>
<p>Uni-App从入门到实战：https://www.bilibili.com/video/BV1BJ411W7pX</p>
<p>Uni-App美团外卖：https://www.bilibili.com/video/BV1Zt4y117RR</p>
<h3 id="flutter" tabindex="-1"> Flutter</h3>
<p>Flutter基础：https://www.bilibili.com/video/BV15t411U7yf</p>
<p>Flutter实战：https://www.bilibili.com/video/BV1kt411B7mu</p>
<h3 id="ionic" tabindex="-1"> Ionic</h3>
<p>Ionic入门：https://www.bilibili.com/video/BV1Ub41117q5</p>
<h2 id="桌面应用开发" tabindex="-1"> 桌面应用开发</h2>
<h3 id="electron" tabindex="-1"> Electron</h3>
<p>Electron入门：https://www.bilibili.com/video/BV1QB4y1F722</p>
<p>Electron基础：https://www.bilibili.com/video/BV177411s7Lt</p>
]]></content:encoded>
    </item>
    <item>
      <title>常见的前端轮子</title>
      <link>https://wukongnotnull.com/posts/goodshare/4.html</link>
      <guid>https://wukongnotnull.com/posts/goodshare/4.html</guid>
      <source url="https://wukongnotnull.com/rss.xml">常见的前端轮子</source>
      <category>前端</category>
      <category>编程导航</category>
      <pubDate>Tue, 25 Oct 2022 00:00:00 GMT</pubDate>
      <content:encoded><![CDATA[<h1 id="常见的前端轮子" tabindex="-1"> 常见的前端轮子</h1>
<h2 id="react-ui-组件库" tabindex="-1"> React UI 组件库</h2>
<ul>
<li><a href="https://ant.design/" target="_blank" rel="noopener noreferrer">Ant Design</a></li>
<li><a href="https://react-bootstrap.github.io/" target="_blank" rel="noopener noreferrer">React Bootstrap</a></li>
<li><a href="https://material-ui.com/" target="_blank" rel="noopener noreferrer">MATERIAL-UI</a></li>
</ul>
<h2 id="vue-ui组件库" tabindex="-1"> Vue UI组件库</h2>
<ul>
<li><a href="https://element.eleme.io/#/zh-CN" target="_blank" rel="noopener noreferrer">Element UI</a> PC端</li>
<li><a href="https://youzan.github.io/vant/#/zh-CN/" target="_blank" rel="noopener noreferrer">Vant</a> 移动端</li>
<li><a href="https://www.iviewui.com/" target="_blank" rel="noopener noreferrer">View UI</a></li>
</ul>
<h2 id="常用效果组件" tabindex="-1"> 常用效果组件</h2>
<ul>
<li><a href="https://animate.style/" target="_blank" rel="noopener noreferrer">Animate.css</a> 动画库</li>
<li><a href="https://www.swiper.com.cn/" target="_blank" rel="noopener noreferrer">Swiper</a> 轮播组件</li>
<li><a href="http://www.mescroll.com" target="_blank" rel="noopener noreferrer">mescroll</a> 下拉刷新和上拉加载框架-基于原生JS</li>
</ul>
<h2 id="工具类" tabindex="-1"> 工具类</h2>
<ul>
<li><a href="https://www.lodashjs.com/" target="_blank" rel="noopener noreferrer">Lodash.js</a></li>
<li><a href="https://dayjs.fenxianglu.cn/" target="_blank" rel="noopener noreferrer">Day.js</a> 处理日期</li>
<li><a href="https://github.com/hustcc/timeago.js" target="_blank" rel="noopener noreferrer">Timeago.js</a> 相对时间，如N小时前</li>
<li><a href="https://echarts.apache.org/zh/index.html" target="_blank" rel="noopener noreferrer">Echarts</a> 百度图表</li>
<li><a href="https://pandao.github.io/editor.md/" target="_blank" rel="noopener noreferrer">Meditor.md</a> 开源在线 Markdown 编辑器</li>
<li><a href="https://github.com/validatorjs/validator.js" target="_blank" rel="noopener noreferrer">validator.js</a> 验证库</li>
</ul>
<h2 id="vue工具类" tabindex="-1"> Vue工具类</h2>
<ul>
<li><a href="https://www.itxst.com/vue-draggable/tutorial.html" target="_blank" rel="noopener noreferrer">vue-draggable</a> 基于Sortable.js实现的vue拖拽插件</li>
<li><a href="https://www.npmjs.com/package/vue-qr" target="_blank" rel="noopener noreferrer">vue-qr</a> 文本转二维码</li>
<li><a href="https://github.com/xyxiao001/vue-cropper" target="_blank" rel="noopener noreferrer">vue-cropper</a> 图片裁剪插件</li>
<li><a href="https://www.npmjs.com/package/vue-lazyload" target="_blank" rel="noopener noreferrer">vue-lazyload</a> 懒加载</li>
<li><a href="https://github.com/saivarunk/vue-simple-upload" target="_blank" rel="noopener noreferrer">vue-simple-upload</a> 上传组件</li>
</ul>
]]></content:encoded>
    </item>
    <item>
      <title>阿里 Java 开发手册（嵩山版）</title>
      <link>https://wukongnotnull.com/posts/goodshare/5.html</link>
      <guid>https://wukongnotnull.com/posts/goodshare/5.html</guid>
      <source url="https://wukongnotnull.com/rss.xml">阿里 Java 开发手册（嵩山版）</source>
      <category>Java</category>
      <category>编程导航</category>
      <pubDate>Tue, 25 Oct 2022 00:00:00 GMT</pubDate>
      <content:encoded><![CDATA[<h1 id="阿里-java-开发手册-嵩山版" tabindex="-1"> 阿里 Java 开发手册（嵩山版）</h1>
<h2 id="前言" tabindex="-1"> 前言</h2>
<p>《Java 开发手册》是阿里巴巴集团技术团队的集体智慧结晶和经验总结，经历了多次大规模一线实战的检验及不断完善，公开到业界后，众多社区开发者踊跃参与，共同打磨完善，系统化地整理成册，当前的版本是<strong>嵩山版</strong>。现代软件行业的高速发展对开发者的综合素质要求越来越高，因为不仅是编程知识点，其它维度的知识点也会影响到软件的最终交付质量。比如：五花八门的错误码人为地增加排查问题的难度；数据库的表结构和索引设计缺陷带来的系统架构缺陷或性能风险；工程结构混乱导致后续项目维护艰难；没有鉴权的漏洞代码易被黑客攻击等等。所以本手册以 Java 开发者为中心视角，划分为编程规约、异常日志、单元测试、安全规约、MySQL 数据库、工程结构、设计规约七个维度，再根据内容特征，细分成若干二级子目录。另外，依据约束力强弱及故障敏感性，规约依次分为【强制】、【推荐】、【参考】三大类。在延伸信息中，&quot;说明&quot;对规约做了适当扩展和解释； &quot;正例&quot;提倡什么样的编码和实现方式；&quot;反例&quot;说明需要提防的雷区，以及真实的错误案例。</p>
<p>手册的愿景是<strong>码出高效，码出质量</strong>。现代软件架构的复杂性需要协同开发完成，如何高效地协同呢？无规矩不成方圆，无规范难以协同，比如，制订交通法规表面上是要限制行车权，实际上是保障公众的人身安全，试想如果没有限速，没有红绿灯，谁还敢上路行驶？对软件来说，适当的规范和标准绝不是消灭代码内容的创造性、优雅性，而是限制过度个性化，以一种普遍认可的统一方式一起做事，提升协作效率，降低沟通成本。代码的字里行间流淌的是软件系统的血液，质量的提升是尽可能少踩坑，杜绝踩重复的坑，切实提升系统稳定性，码出质量。</p>
<p>我们已经在 2017 杭州云栖大会上发布了配套的 <a href="https://github.com/alibaba/p3c" target="_blank" rel="noopener noreferrer"><span>Java 开发规约 IDE 插件</span></a>，下载量达到 162 万人次，阿里云效也集成了代码规约扫描引擎。次年，发布 36 万字的配套详解图书《码出高效》，本书秉持&quot;图胜于表，表胜于言&quot;的理念，深入浅出地将计算机基础、面向对象思想、JVM 探源、数据结构与集合、并发与多线程、单元测试等知识客观、立体地呈现出来。紧扣学以致用、学以精进的目标，结合阿里巴巴实践经验和故障案例，与底层源码解析融会贯通，娓娓道来。《码出高效》和《Java 开发手册》稿费所得收入均捐赠公益事情，希望用技术情怀帮助更多的人。</p>
<h2 id="一、-编程规约" tabindex="-1"> 一、 编程规约</h2>
<h3 id="一-命名风格" tabindex="-1"> (一) 命名风格</h3>
<h5 id="【强制】代码中的命名均不能以下划线或美元符号开始-也不能以下划线或美元符号结束。" tabindex="-1"> 【强制】代码中的命名均不能以下划线或美元符号开始，也不能以下划线或美元符号结束。</h5>
<p>反 例 ：_name / name / $name / name_ / name$ / name</p>
<h5 id="【强制】所有编程相关的命名严禁使用拼音与英文混合的方式-更不允许直接使用中文的方式。" tabindex="-1"> 【强制】所有编程相关的命名严禁使用拼音与英文混合的方式，更不允许直接使用中文的方式。</h5>
<p>说明：正确的英文拼写和语法可以让阅读者易于理解，避免歧义。注意，纯拼音命名方式更要避免采用。 正例：ali / alibaba / taobao / cainiao/ aliyun/ youku / hangzhou 等国际通用的名称，可视同英文。反例：DaZhePromotion [打折] / getPingfenByName() [评分] / String fw[福娃] / int 某变量 = 3</p>
<h5 id="【强制】代码和注释中都要避免使用任何语言的种族歧视性词语。" tabindex="-1"> 【强制】代码和注释中都要避免使用任何语言的种族歧视性词语。</h5>
<p>正例：日本人 / 印度人 / blockList / allowList / secondary</p>
<p>反例：RIBENGUIZI / Asan / blackList / whiteList / slave</p>
<h5 id="【强制】类名使用-uppercamelcase-风格-但以下情形例外-do-bo-dto-vo-ao-po-uid-等。" tabindex="-1"> 【强制】类名使用 UpperCamelCase 风格，但以下情形例外：DO / BO / DTO / VO / AO / PO / UID 等。</h5>
<p>正例：ForceCode / UserDO / HtmlDTO / XmlService / TcpUdpDeal / TaPromotion</p>
<p>反例：forcecode / UserDo / HTMLDto / XMLService / TCPUDPDeal / TAPromotion</p>
<h5 id="【强制】方法名、参数名、成员变量、局部变量都统一使用-lowercamelcase-风格。" tabindex="-1"> 【强制】方法名、参数名、成员变量、局部变量都统一使用 lowerCamelCase 风格。</h5>
<p>正例： localValue / getHttpMessage() / inputUserId</p>
<h5 id="【强制】常量命名全部大写-单词间用下划线隔开-力求语义表达完整清楚-不要嫌名字长。" tabindex="-1"> 【强制】常量命名全部大写，单词间用下划线隔开，力求语义表达完整清楚，不要嫌名字长。</h5>
<p>正例：MAX_STOCK_COUNT / CACHE_EXPIRED_TIME</p>
<p>反例：MAX_COUNT / EXPIRED_TIME</p>
<h5 id="【强制】抽象类命名使用-abstract-或-base-开头-异常类命名使用-exception-结尾-测试类命名以它要测试的类的名称开始-以-test-结尾。" tabindex="-1"> 【强制】抽象类命名使用 Abstract 或 Base 开头；异常类命名使用 Exception 结尾；测试类命名以它要测试的类的名称开始，以 Test 结尾。</h5>
<h5 id="【强制】类型与中括号紧挨相连来表示数组。" tabindex="-1"> 【强制】类型与中括号紧挨相连来表示数组。</h5>
<p>正例：定义整形数组 int[] arrayDemo。</p>
<p>反例：在 main 参数中，使用 String args[]来定义。</p>
<h5 id="【强制】pojo-类中的任何布尔类型的变量-都不要加-is-前缀-否则部分框架解析会引起序列化错误。" tabindex="-1"> 【强制】POJO 类中的任何布尔类型的变量，都不要加 is 前缀，否则部分框架解析会引起序列化错误。</h5>
<p>说明：在本文 MySQL 规约中的建表约定第一条，表达是与否的变量采用 is_xxx 的命名方式，所以，需要在&lt;resultMap&gt;设置从 is_xxx 到 xxx 的映射关系。</p>
<p>反例：定义为基本数据类型 Boolean isDeleted 的属性，它的方法也是 isDeleted()，框架在反向解析的时候，&quot;误以为&quot;对应的属性名称是 deleted，导致属性获取不到，进而抛出异常。</p>
<h5 id="【强制】包名统一使用小写-点分隔符之间有且仅有一个自然语义的英语单词。包名统一使用单数形式-但是类名如果有复数含义-类名可以使用复数形式。" tabindex="-1"> 【强制】包名统一使用小写，点分隔符之间有且仅有一个自然语义的英语单词。包名统一使用单数形式，但是类名如果有复数含义，类名可以使用复数形式。</h5>
<p>正例：应用工具类包名为 com.alibaba.ei.kunlun.aap.util、类名为 MessageUtils（此规则参考 spring 的框架结构）</p>
<h5 id="【强制】避免在子父类的成员变量之间、或者不同代码块的局部变量之间采用完全相同的命名-使可理解性降低。" tabindex="-1"> 【强制】避免在子父类的成员变量之间、或者不同代码块的局部变量之间采用完全相同的命名， 使可理解性降低。</h5>
<blockquote>
<p>说明：子类、父类成员变量名相同，即使是 public 类型的变量也能够通过编译，另外，局部变量在同一方法内的不同代码块中同名也是合法的，这些情况都要避免。对于非 setter/getter 的参数名称也要避免与成员变量名称相同。</p>
<p>反例：</p>
<p>public class ConfusingName { public int stock;</p>
<p>// 非 setter/getter 的参数名称，不允许与本类成员变量同名</p>
<p>public void get(String alibaba) { if (condition) {</p>
<p>final int money = 666;</p>
<p>// ...</p>
<p>}</p>
<p>for (int i = 0; i &lt; 10; i++) {</p>
<p>// 在同一方法体中，不允许与其它代码块中的 money 命名相同</p>
<p>final int money = 15978;</p>
<p>// ...</p>
<p>}</p>
<p>}</p>
<p>}</p>
<p>class Son extends ConfusingName {</p>
<p>// 不允许与父类的成员变量名称相同</p>
<p>public int stock;</p>
<p>}</p>
</blockquote>
<h5 id="【强制】杜绝完全不规范的缩写-避免望文不知义。" tabindex="-1"> 【强制】杜绝完全不规范的缩写，避免望文不知义。</h5>
<p>反例：AbstractClass&quot;缩写&quot;成 AbsClass；condition&quot;缩写&quot;成 condi；Function 缩写&quot;成 Fu，此类随意缩写严重降低了代码的可阅读性。</p>
<p>【推荐】为了达到代码自解释的目标，任何自定义编程元素在命名时，使用尽量完整的单词组合来表达。</p>
<p>正例：对某个对象引用的 volatile 字段进行原子更新的类名为 AtomicReferenceFieldUpdater。反例：常见的方法内变量为 int a;的定义方式。</p>
<h5 id="【推荐】在常量与变量的命名时-表示类型的名词放在词尾-以提升辨识度。" tabindex="-1"> 【推荐】在常量与变量的命名时，表示类型的名词放在词尾，以提升辨识度。</h5>
<p>正例：startTime / workQueue / nameList / TERMINATED_THREAD_COUNT</p>
<p>反例：startedAt / QueueOfWork / listName / COUNT_TERMINATED_THREAD</p>
<h5 id="【推荐】如果模块、接口、类、方法使用了设计模式-在命名时需体现出具体模式。" tabindex="-1"> 【推荐】如果模块、接口、类、方法使用了设计模式，在命名时需体现出具体模式。</h5>
<p>说明：将设计模式体现在名字中，有利于阅读者快速理解架构设计理念。正例： public class OrderFactory;</p>
<blockquote>
<p>public class LoginProxy;</p>
<p>public class ResourceObserver;</p>
</blockquote>
<h4 id="【推荐】接口类中的方法和属性不要加任何修饰符号-public-也不要加-保持代码的简洁性-并加上有效的-javadoc-注释。尽量不要在接口里定义变量-如果一定要定义变量-确定与接口方法相关-并且是整个应用的基础常量。" tabindex="-1"> 【推荐】接口类中的方法和属性不要加任何修饰符号（public 也不要加），保持代码的简洁性，并加上有效的 Javadoc 注释。尽量不要在接口里定义变量，如果一定要定义变量，确定与接口方法相关，并且是整个应用的基础常量。</h4>
<p>正例：接口方法签名 void commit();</p>
<blockquote>
<p>接口基础常量 String COMPANY = &quot;alibaba&quot;;</p>
</blockquote>
<p>反例：接口方法定义 public abstract void f();</p>
<p>说明：JDK8 中接口允许有默认实现，那么这个 default 方法，是对所有实现类都有价值的默认实现。</p>
<h4 id="接口和实现类的命名有两套规则" tabindex="-1"> 接口和实现类的命名有两套规则：</h4>
<ol>
<li>【强制】对于 Service 和 DAO 类，基于 SOA 的理念，暴露出来的服务一定是接口，内部的实现类用</li>
</ol>
<p>Impl 的后缀与接口区别。</p>
<p>正例：CacheServiceImpl 实现 CacheService 接口。</p>
<ol start="2">
<li>【推荐】如果是形容能力的接口名称，取对应的形容词为接口名（通常是--able 的形容词）。正例：AbstractTranslator 实现 Translatable 接口。</li>
</ol>
<h4 id="【参考】枚举类名带上-enum-后缀-枚举成员名称需要全大写-单词间用下划线隔开。" tabindex="-1"> 【参考】枚举类名带上 Enum 后缀，枚举成员名称需要全大写，单词间用下划线隔开。</h4>
<p>说明：枚举其实就是特殊的常量类，且构造方法被默认强制是私有。</p>
<p>正例：枚举名字为 ProcessStatusEnum 的成员名称：SUCCESS / UNKNOWN_REASON。</p>
<h4 id="【参考】各层命名规约" tabindex="-1"> 【参考】各层命名规约：</h4>
<p>A)  Service/DAO 层方法命名规约</p>
<pre><code>1.  获取单个对象的方法用 get 做前缀。

2.  获取多个对象的方法用 list 做前缀，复数结尾，如：listObjects。

3.  获取统计值的方法用 count 做前缀。4） 插入的方法用 save/insert 做前缀。5） 删除的方法用 remove/delete 做前缀。6） 修改的方法用 update 做前缀。
</code></pre>
<p>B)  领域模型命名规约</p>
<p> </p>
<ol>
<li>
<p>数据对象：xxxDO，xxx 即为数据表名。</p>
</li>
<li>
<p>数据传输对象：xxxDTO，xxx 为业务领域相关的名称。</p>
</li>
<li>
<p>展示对象：xxxVO，xxx 一般为网页名称。</p>
</li>
<li>
<p>POJO 是 DO/DTO/BO/VO 的统称，禁止命名成 xxxPOJO。</p>
</li>
</ol>
<h3 id="二-常量定义" tabindex="-1"> (二) 常量定义</h3>
<h4 id="【强制】不允许任何魔法值-即未经预先定义的常量-直接出现在代码中。" tabindex="-1"> 【强制】不允许任何魔法值（即未经预先定义的常量）直接出现在代码中。</h4>
<blockquote>
<p>反例：</p>
<p>// 本例中，开发者 A 定义了缓存的 key，然后开发者 B 使用缓存时少了下划线，即 key 是&quot;Id#taobao&quot;+tradeId，导致出现故障</p>
<p>String key = &quot;Id#taobao_&quot; + tradeId; cache.put(key, value);</p>
</blockquote>
<h4 id="【强制】在-long-或者long-赋值时-数值后使用大写字母-l-不能是小写字母-l-小写容易跟数字混淆-造成误解。" tabindex="-1"> 【强制】在 long 或者Long 赋值时，数值后使用大写字母 L，不能是小写字母 l，小写容易跟数字混淆，造成误解。</h4>
<p>说明：Long a = 2l; 写的是数字的 21，还是Long 型的 2？</p>
<h4 id="【推荐】不要使用一个常量类维护所有常量-要按常量功能进行归类-分开维护。" tabindex="-1"> 【推荐】不要使用一个常量类维护所有常量，要按常量功能进行归类，分开维护。</h4>
<p>说明：大而全的常量类，杂乱无章，使用查找功能才能定位到修改的常量，不利于理解，也不利于维护。正例：缓存相关常量放在类 CacheConsts 下；系统配置相关常量放在类 SystemConfigConsts 下。</p>
<h4 id="【推荐】常量的复用层次有五层-跨应用共享常量、应用内共享常量、子工程内共享常量、包内共享常量、类内共享常量。" tabindex="-1"> 【推荐】常量的复用层次有五层：跨应用共享常量、应用内共享常量、子工程内共享常量、包内共享常量、类内共享常量。</h4>
<ol>
<li>
<p>跨应用共享常量：放置在二方库中，通常是 client.jar 中的 constant 目录下。</p>
</li>
<li>
<p>应用内共享常量：放置在一方库中，通常是子模块中的 constant 目录下。</p>
</li>
</ol>
<blockquote>
<p>反例：易懂变量也要统一定义成应用内共享常量，两位工程师在两个类中分别定义了&quot;YES&quot;的变量： 类 A 中：public static final String YES = &quot;yes&quot;;</p>
<p>类 B 中 ：public static final String YES = &quot;y&quot;; A.YES.equals(B.YES)，预期是 true，但实际返回为 false，导致线上问题。</p>
</blockquote>
<ol start="3">
<li>
<p>子工程内部共享常量：即在当前子工程的 constant 目录下。</p>
</li>
<li>
<p>包内共享常量：即在当前包下单独的 constant 目录下。</p>
</li>
<li>
<p>类内共享常量：直接在类内部 private static final 定义。</p>
</li>
</ol>
<h4 id="【推荐】如果变量值仅在一个固定范围内变化用-enum-类型来定义。" tabindex="-1"> 【推荐】如果变量值仅在一个固定范围内变化用 enum 类型来定义。</h4>
<blockquote>
<p>说明：如果存在名称之外的延伸属性应使用 enum 类型，下面正例中的数字就是延伸信息，表示一年中的第几个季节。</p>
<p>正例：</p>
<p>public enum SeasonEnum {</p>
<p>SPRING(1), SUMMER(2), AUTUMN(3), WINTER(4);</p>
<p>private int seq; SeasonEnum(int seq) {</p>
<p>this.seq = seq;</p>
<p>}</p>
<p>public int getSeq() { return seq;</p>
<p>}</p>
<p>}</p>
</blockquote>
<h3 id="三-代码格式" tabindex="-1"> (三) 代码格式</h3>
<h4 id="【强制】如果是大括号内为空-则简洁地写成-即可-大括号中间无需换行和空格-如果是非空代码块则" tabindex="-1"> 【强制】如果是大括号内为空，则简洁地写成{}即可，大括号中间无需换行和空格；如果是非空代码块则：</h4>
<ol>
<li>
<p>左大括号前不换行。</p>
</li>
<li>
<p>左大括号后换行。</p>
</li>
<li>
<p>右大括号前换行。</p>
</li>
<li>
<p>右大括号后还有 else 等代码则不换行；表示终止的右大括号后必须换行。</p>
</li>
</ol>
<h4 id="【强制】左小括号和右边相邻字符之间不出现空格-右小括号和左边相邻字符之间也不出现空格-而左大括号前需要加空格。详见第-5-条下方正例提示。" tabindex="-1"> 【强制】左小括号和右边相邻字符之间不出现空格；右小括号和左边相邻字符之间也不出现空格；而左大括号前需要加空格。详见第 5 条下方正例提示。</h4>
<p>反例：if (空格 a == b 空格)</p>
<h4 id="【强制】if-for-while-switch-do-等保留字与括号之间都必须加空格。" tabindex="-1"> 【强制】if/for/while/switch/do 等保留字与括号之间都必须加空格。</h4>
<h4 id="【强制】任何二目、三目运算符的左右两边都需要加一个空格。" tabindex="-1"> 【强制】任何二目、三目运算符的左右两边都需要加一个空格。</h4>
<p>说明：包括赋值运算符=、逻辑运算符&amp;&amp;、加减乘除符号等。</p>
<h4 id="【强制】采用-4-个空格缩进-禁止使用-tab-字符。" tabindex="-1"> 【强制】采用 4 个空格缩进，禁止使用 Tab 字符。</h4>
<p>说明：如果使用 Tab 缩进，必须设置 1 个 Tab 为 4 个空格。IDEA 设置 Tab 为 4 个空格时，请勿勾选 Use tab character；而在 Eclipse 中，必须勾选 insert spaces for tabs。</p>
<p>正例： （涉及 1-5 点）</p>
<blockquote>
<p>public static void main(String[] args) {</p>
<p>// 缩进 4 个空格</p>
<p>String say = &quot;hello&quot;;</p>
<p>// 运算符的左右必须有一个空格</p>
<p>int flag = 0;</p>
<p>// 关键词 if 与括号之间必须有一个空格，括号内的 f 与左括号，0 与右括号不需要空格</p>
<p>if (flag == 0) { System.out.println(say);</p>
<p>}</p>
<p>// 左大括号前加空格且不换行；左大括号后换行</p>
<p>if (flag == 1) { System.out.println(&quot;world&quot;);</p>
<p>// 右大括号前换行，右大括号后有 else，不用换行</p>
<p>} else {</p>
<p>System.out.println(&quot;ok&quot;);</p>
<p>// 在右大括号后直接结束，则必须换行</p>
<p>}</p>
<p>}</p>
</blockquote>
<h4 id="【强制】注释的双斜线与注释内容之间有且仅有一个空格。" tabindex="-1"> 【强制】注释的双斜线与注释内容之间有且仅有一个空格。</h4>
<p>正例：</p>
<blockquote>
<p>// 这是示例注释，请注意在双斜线之后有一个空格</p>
<p>String commentString = new String();</p>
</blockquote>
<h4 id="【强制】在进行类型强制转换时-右括号与强制转换值之间不需要任何空格隔开。" tabindex="-1"> 【强制】在进行类型强制转换时，右括号与强制转换值之间不需要任何空格隔开。</h4>
<blockquote>
<p>正例：</p>
<p>double first = 3.2d;</p>
<p>int second = (int)first + 2;</p>
</blockquote>
<h4 id="【强制】单行字符数限制不超过-120-个-超出需要换行-换行时遵循如下原则" tabindex="-1"> 【强制】单行字符数限制不超过 120 个，超出需要换行，换行时遵循如下原则：</h4>
<ol>
<li>
<p>第二行相对第一行缩进 4 个空格，从第三行开始，不再继续缩进，参考示例。</p>
</li>
<li>
<p>运算符与下文一起换行。</p>
</li>
<li>
<p>方法调用的点符号与下文一起换行。</p>
</li>
<li>
<p>方法调用中的多个参数需要换行时，在逗号后进行。</p>
</li>
<li>
<p>在括号前不要换行，见反例。正例：</p>
</li>
</ol>
<blockquote>
<p>StringBuilder sb = new StringBuilder();</p>
<p>// 超过 120 个字符的情况下，换行缩进 4 个空格，并且方法前的点号一起换行</p>
<p>sb.append(&quot;yang&quot;).append(&quot;hao&quot;)...</p>
<p>.append(&quot;chen&quot;)...</p>
<p>.append(&quot;chen&quot;)...</p>
<p>.append(&quot;chen&quot;);</p>
</blockquote>
<p>反例：</p>
<blockquote>
<p>StringBuilder sb = new StringBuilder();</p>
<p>// 超过 120 个字符的情况下，不要在括号前换行</p>
<p>sb.append(&quot;you&quot;).append(&quot;are&quot;)...append (&quot;lucky&quot;);</p>
<p>// 参数很多的方法调用可能超过 120 个字符，逗号后才是换行处</p>
<p>method(args1, args2, args3, ...</p>
<p>, argsX);</p>
</blockquote>
<h4 id="【强制】方法参数在定义和传入时-多个参数逗号后面必须加空格。" tabindex="-1"> 【强制】方法参数在定义和传入时，多个参数逗号后面必须加空格。</h4>
<blockquote>
<p>正例：下例中实参的 args1，后边必须要有一个空格。</p>
<p>method(args1, args2, args3);</p>
</blockquote>
<h4 id="【强制】ide-的-text-file-encoding-设置为-utf-8-ide-中文件的换行符使用-unix-格式-不要使用-windows-格式。" tabindex="-1"> 【强制】IDE 的 text file encoding 设置为 UTF-8; IDE 中文件的换行符使用 Unix 格式，不要使用 Windows 格式。</h4>
<h4 id="【推荐】单个方法的总行数不超过-80-行。" tabindex="-1"> 【推荐】单个方法的总行数不超过 80 行。</h4>
<blockquote>
<p>说明：除注释之外的方法签名、左右大括号、方法内代码、空行、回车及任何不可见字符的总行数不超过</p>
<p>80 行。</p>
<p>正例：代码逻辑分清红花和绿叶，个性和共性，绿叶逻辑单独出来成为额外方法，使主干代码更加清晰；共性逻辑抽取成为共性方法，便于复用和维护。</p>
</blockquote>
<h4 id="【推荐】没有必要增加若干空格来使变量的赋值等号与上一行对应位置的等号对齐。" tabindex="-1"> 【推荐】没有必要增加若干空格来使变量的赋值等号与上一行对应位置的等号对齐。</h4>
<blockquote>
<p>正例：</p>
<p>int one = 1; long two = 2L; float three = 3F;</p>
<p>StringBuilder sb = new StringBuilder();</p>
</blockquote>
<p>说明：增加 sb 这个变量，如果需要对齐，则给one、two、three 都要增加几个空格，在变量比较多的情况下，是非常累赘的事情。</p>
<h4 id="【推荐】不同逻辑、不同语义、不同业务的代码之间插入一个空行分隔开来以提升可读性。" tabindex="-1"> 【推荐】不同逻辑、不同语义、不同业务的代码之间插入一个空行分隔开来以提升可读性。</h4>
<blockquote>
<p>说明：任何情形，没有必要插入多个空行进行隔开。</p>
</blockquote>
<h3 id="四-oop-规约" tabindex="-1"> (四) OOP 规约</h3>
<h4 id="【强制】避免通过一个类的对象引用访问此类的静态变量或静态方法-无谓增加编译器解析成本-直接用类名来访问即可。" tabindex="-1"> 【强制】避免通过一个类的对象引用访问此类的静态变量或静态方法，无谓增加编译器解析成本，直接用类名来访问即可。</h4>
<h4 id="【强制】所有的覆写方法-必须加-override-注解。" tabindex="-1"> 【强制】所有的覆写方法，必须加@Override 注解。</h4>
<p>说明：getObject()与 get0bject()的问题。一个是字母的 O，一个是数字的 0，加@Override 可以准确判断是否覆盖成功。另外，如果在抽象类中对方法签名进行修改，其实现类会马上编译报错。</p>
<h4 id="【强制】相同参数类型-相同业务含义-才可以使用-java-的可变参数-避免使用-object。" tabindex="-1"> 【强制】相同参数类型，相同业务含义，才可以使用 Java 的可变参数，避免使用 Object。</h4>
<blockquote>
<p>说明：可变参数必须放置在参数列表的最后。（建议开发者尽量不用可变参数编程） 正例：public List&lt;User&gt; listUsers(String type, Long... ids) {...}</p>
</blockquote>
<h4 id="【强制】外部正在调用或者二方库依赖的接口-不允许修改方法签名-避免对接口调用方产生影响。接口过时必须加-deprecated-注解-并清晰地说明采用的新接口或者新服务是什么。" tabindex="-1"> 【强制】外部正在调用或者二方库依赖的接口，不允许修改方法签名，避免对接口调用方产生影响。接口过时必须加@Deprecated 注解，并清晰地说明采用的新接口或者新服务是什么。</h4>
<h4 id="【强制】不能使用过时的类或方法。" tabindex="-1"> 【强制】不能使用过时的类或方法。</h4>
<p>说明：java.net.URLDecoder 中的方法 decode(String encodeStr) 这个方法已经过时，应该使用双参数decode(String source, String encode)。接口提供方既然明确是过时接口，那么有义务同时提供新的接口； 作为调用方来说，有义务去考证过时方法的新实现是什么。</p>
<h4 id="【强制】object-的-equals-方法容易抛空指针异常-应使用常量或确定有值的对象来调用-equals。" tabindex="-1"> 【强制】Object 的 equals 方法容易抛空指针异常，应使用常量或确定有值的对象来调用 equals。</h4>
<p>正例：&quot;test&quot;.equals(object); 反例：object.equals(&quot;test&quot;);</p>
<p>说明：推荐使用 JDK7 引入的工具类 java.util.Objects#equals(Object a, Object b)</p>
<h4 id="【强制】所有整型包装类对象之间值的比较-全部使用-equals-方法比较。" tabindex="-1"> 【强制】所有整型包装类对象之间值的比较，全部使用 equals 方法比较。</h4>
<p>说明：对于 Integer var = ? 在-128 至 127 之间的赋值，Integer 对象是在 IntegerCache.cache 产生， 会复用已有对象，这个区间内的 Integer 值可以直接使用==进行判断，但是这个区间之外的所有数据，都会在堆上产生，并不会复用已有对象，这是一个大坑，推荐使用 equals 方法进行判断。</p>
<h4 id="【强制】任何货币金额-均以最小货币单位且整型类型来进行存储。" tabindex="-1"> 【强制】任何货币金额，均以最小货币单位且整型类型来进行存储。</h4>
<h4 id="【强制】浮点数之间的等值判断-基本数据类型不能用-来比较-包装数据类型不能用-equals" tabindex="-1"> 【强制】浮点数之间的等值判断，基本数据类型不能用==来比较，包装数据类型不能用 equals</h4>
<h4 id="来判断。" tabindex="-1"> 来判断。</h4>
<blockquote>
<p>说明：浮点数采用&quot;尾数+阶码&quot;的编码方式，类似于科学计数法的&quot;有效数字+指数&quot;的表示方式。二进制无法精确表示大部分的十进制小数，具体原理参考<a href="https://detail.tmall.com/item.htm?spm=a1z10.3-b.w4011-16861154605.57.37a81b8bGVGoJD&amp;id=575107529181&amp;rn=f1294dc1e36859a5098c36756bafb4a0&amp;abbucket=18" target="_blank" rel="noopener noreferrer"><span>《码出高效》</span></a>。</p>
<p>反例：</p>
<p>float a = 1.0F - 0.9F; float b = 0.9F - 0.8F;</p>
<p>if (a == b) {</p>
<p>// 预期进入此代码块，执行其它业务逻辑</p>
<p>// 但事实上 a==b 的结果为 false</p>
<p>}</p>
<p>Float x = Float.valueOf(a); Float y = Float.valueOf(b); if (x.equals(y)) {</p>
<p>// 预期进入此代码块，执行其它业务逻辑</p>
<p>// 但事实上 equals 的结果为 false</p>
</blockquote>
<p>}</p>
<blockquote>
<p>正例：</p>
</blockquote>
<ol>
<li>指定一个误差范围，两个浮点数的差值在此范围之内，则认为是相等的。</li>
</ol>
<blockquote>
<p>float a = 1.0F - 0.9F; float b = 0.9F - 0.8F; float diff = 1e-6F;</p>
<p>if (Math.abs(a - b) &lt; diff) { System.out.println(&quot;true&quot;);</p>
<p>}</p>
</blockquote>
<ol start="2">
<li>使用 BigDecimal 来定义值，再进行浮点数的运算操作。</li>
</ol>
<blockquote>
<p>BigDecimal a = new BigDecimal(&quot;1.0&quot;); BigDecimal b = new BigDecimal(&quot;0.9&quot;); BigDecimal c = new BigDecimal(&quot;0.8&quot;);</p>
<p>BigDecimal x = a.subtract(b); BigDecimal y = b.subtract(c);</p>
<p>if (x.compareTo(y) == 0) { System.out.println(&quot;true&quot;);</p>
<p>}</p>
</blockquote>
<h4 id="【强制】如上所示-bigdecimal-的等值比较应使用-compareto-方法-而不是-equals-方法。" tabindex="-1"> 【强制】如上所示 BigDecimal 的等值比较应使用 compareTo()方法，而不是 equals()方法。</h4>
<blockquote>
<p>说明：equals()方法会比较值和精度（1.0 与 1.00 返回结果为 false），而 compareTo()则会忽略精度。</p>
</blockquote>
<h4 id="【强制】定义数据对象-do-类时-属性类型要与数据库字段类型相匹配。" tabindex="-1"> 【强制】定义数据对象 DO 类时，属性类型要与数据库字段类型相匹配。</h4>
<p>正例：数据库字段的 bigint 必须与类属性的 Long 类型相对应。</p>
<p>反例：某个案例的数据库表 id 字段定义类型bigint unsigned，实际类对象属性为 Integer，随着 id 越来越大，超过 Integer 的表示范围而溢出成为负数。</p>
<h4 id="【强制】禁止使用构造方法-bigdecimal-double-的方式把-double-值转化为-bigdecimal-对象。" tabindex="-1"> 【强制】禁止使用构造方法 BigDecimal(double)的方式把 double 值转化为 BigDecimal 对象。</h4>
<p>说明：BigDecimal(double)存在精度损失风险，在精确计算或值比较的场景中可能会导致业务逻辑异常。如：BigDecimal g = new BigDecimal(0.1F); 实际的存储值为：0.10000000149</p>
<blockquote>
<p>正例：优先推荐入参为 String 的构造方法，或使用 BigDecimal 的 valueOf 方法，此方法内部其实执行了</p>
<p>Double 的 toString，而 Double 的toString 按 double 的实际能表达的精度对尾数进行了截断。</p>
<p>BigDecimal recommend1 = new BigDecimal(&quot;0.1&quot;); BigDecimal recommend2 = BigDecimal.valueOf(0.1);</p>
</blockquote>
<h4 id="关于基本数据类型与包装数据类型的使用标准如下" tabindex="-1"> 关于基本数据类型与包装数据类型的使用标准如下：</h4>
<ol>
<li>
<p>【强制】所有的 POJO 类属性必须使用包装数据类型。</p>
</li>
<li>
<p>【强制】RPC 方法的返回值和参数必须使用包装数据类型。</p>
</li>
<li>
<p>【推荐】所有的局部变量使用基本数据类型。</p>
</li>
</ol>
<p>说明：POJO 类属性没有初值是提醒使用者在需要使用时，必须自己显式地进行赋值，任何 NPE 问题，或者入库检查，都由使用者来保证。</p>
<p>正例：数据库的查询结果可能是 null，因为自动拆箱，用基本数据类型接收有 NPE 风险。</p>
<p>反例：某业务的交易报表上显示成交总额涨跌情况，即正负 x%，x 为基本数据类型，调用的 RPC 服务，调用不成功时，返回的是默认值，页面显示为 0%，这是不合理的，应该显示成中划线-。所以包装数据类型的 null 值，能够表示额外的信息，如：远程调用失败，异常退出。</p>
<h4 id="【强制】定义-do-dto-vo-等-pojo-类时-不要设定任何属性默认值。" tabindex="-1"> 【强制】定义 DO/DTO/VO 等 POJO 类时，不要设定任何属性默认值。</h4>
<p>反例：POJO 类的 createTime 默认值为 new Date()，但是这个属性在数据提取时并没有置入具体值，在更新其它字段时又附带更新了此字段，导致创建时间被修改成当前时间。</p>
<h4 id="【强制】序列化类新增属性时-请不要修改-serialversionuid-字段-避免反序列失败-如果完全不兼容升级-避免反序列化混乱-那么请修改-serialversionuid-值。" tabindex="-1"> 【强制】序列化类新增属性时，请不要修改 serialVersionUID 字段，避免反序列失败；如果完全不兼容升级，避免反序列化混乱，那么请修改 serialVersionUID 值。</h4>
<p>说明：注意 serialVersionUID 不一致会抛出序列化运行时异常。</p>
<h4 id="【强制】构造方法里面禁止加入任何业务逻辑-如果有初始化逻辑-请放在-init-方法中。" tabindex="-1"> 【强制】构造方法里面禁止加入任何业务逻辑，如果有初始化逻辑，请放在 init 方法中。</h4>
<h4 id="【强制】pojo-类必须写-tostring-方法。使用-ide-中的工具-source-generate-tostring" tabindex="-1"> 【强制】POJO 类必须写 toString 方法。使用 IDE 中的工具：source&gt; generate toString</h4>
<h4 id="时-如果继承了另一个-pojo-类-注意在前面加一下-super-tostring。" tabindex="-1"> 时，如果继承了另一个 POJO 类，注意在前面加一下 super.toString。</h4>
<p>说明：在方法执行抛出异常时，可以直接调用 POJO 的 toString()方法打印其属性值，便于排查问题。</p>
<h4 id="【强制】禁止在-pojo-类中-同时存在对应属性-xxx-的-isxxx-和-getxxx-方法。" tabindex="-1"> 【强制】禁止在 POJO 类中，同时存在对应属性 xxx 的 isXxx()和 getXxx()方法。</h4>
<blockquote>
<p>说明：框架在调用属性 xxx 的提取方法时，并不能确定哪个方法一定是被优先调用到的。</p>
</blockquote>
<h4 id="【推荐】使用索引访问用-string-的-split-方法得到的数组时-需做最后一个分隔符后有无内容的检查-否则会有抛-indexoutofboundsexception-的风险。" tabindex="-1"> 【推荐】使用索引访问用 String 的 split 方法得到的数组时，需做最后一个分隔符后有无内容的检查，否则会有抛 IndexOutOfBoundsException 的风险。</h4>
<blockquote>
<p>说明：</p>
<p>String str = &quot;a,b,c,,&quot;;</p>
<p>String[] ary = str.split(&quot;,&quot;);</p>
<p>// 预 期 大 于 3， 结 果 是 3 System.out.println(ary.length);</p>
</blockquote>
<h4 id="【推荐】当一个类有多个构造方法-或者多个同名方法-这些方法应该按顺序放置在一起-便于阅读-此条规则优先于下一条。" tabindex="-1"> 【推荐】当一个类有多个构造方法，或者多个同名方法，这些方法应该按顺序放置在一起，便于阅读，此条规则优先于下一条。</h4>
<h4 id="【推荐】-类内方法定义的顺序依次是-公有方法或保护方法-私有方法-getter-setter" tabindex="-1"> 【推荐】 类内方法定义的顺序依次是：公有方法或保护方法 &gt; 私有方法 &gt; getter / setter</h4>
<h4 id="方法。" tabindex="-1"> 方法。</h4>
<p>说明：公有方法是类的调用者和维护者最关心的方法，首屏展示最好；保护方法虽然只是子类关心，也可能是&quot;模板设计模式&quot;下的核心方法；而私有方法外部一般不需要特别关心，是一个黑盒实现；因为承载的信息价值较低，所有 Service 和 DAO 的 getter/setter 方法放在类体最后。</p>
<h4 id="【推荐】setter-方法中-参数名称与类成员变量名称一致-this-成员名-参数名。在getter-setter-方法中-不要增加业务逻辑-增加排查问题的难度。" tabindex="-1"> 【推荐】setter 方法中，参数名称与类成员变量名称一致，this.成员名 = 参数名。在getter/setter 方法中，不要增加业务逻辑，增加排查问题的难度。</h4>
<blockquote>
<p>反例：</p>
<p>public Integer getData () { if (condition) {</p>
<p>return this.data + 100;</p>
<p>} else {</p>
<p>return this.data - 100;</p>
<p>}</p>
<p>}</p>
</blockquote>
<h4 id="【推荐】循环体内-字符串的连接方式-使用-stringbuilder-的-append-方法进行扩展。" tabindex="-1"> 【推荐】循环体内，字符串的连接方式，使用 StringBuilder 的 append 方法进行扩展。</h4>
<blockquote>
<p>说明：下例中，反编译出的字节码文件显示每次循环都会 new 出一个StringBuilder 对象，然后进行 append</p>
<p>操作，最后通过 toString 方法返回 String 对象，造成内存资源浪费。反例：</p>
<p>String str = &quot;start&quot;;</p>
<p>for (int i = 0; i &lt; 100; i++) { str = str + &quot;hello&quot;;</p>
<p>}</p>
</blockquote>
<h4 id="【推荐】final-可以声明类、成员变量、方法、以及本地变量-下列情况使用-final-关键字" tabindex="-1"> 【推荐】final 可以声明类、成员变量、方法、以及本地变量，下列情况使用 final 关键字：</h4>
<p> </p>
<ol>
<li>
<p>不允许被继承的类，如：String 类。</p>
</li>
<li>
<p>不允许修改引用的域对象，如：POJO 类的域变量。</p>
</li>
<li>
<p>不允许被覆写的方法，如：POJO 类的 setter 方法。</p>
</li>
<li>
<p>不允许运行过程中重新赋值的局部变量。</p>
</li>
<li>
<p>避免上下文重复使用一个变量，使用 final 关键字可以强制重新定义一个变量，方便更好地进行重构。</p>
</li>
</ol>
<p> </p>
<h4 id="【推荐】慎用-object-的-clone-方法来拷贝对象。" tabindex="-1"> 【推荐】慎用 Object 的 clone 方法来拷贝对象。</h4>
<p>说明：对象 clone 方法默认是浅拷贝，若想实现深拷贝，需覆写 clone 方法实现域对象的深度遍历式拷贝。</p>
<h4 id="【推荐】类成员与方法访问控制从严" tabindex="-1"> 【推荐】类成员与方法访问控制从严：</h4>
<blockquote>
<p>1） 如果不允许外部直接通过 new 来创建对象，那么构造方法必须是 private。</p>
<p>2） 工具类不允许有 public 或 default 构造方法。</p>
<p>3） 类非 static 成员变量并且与子类共享，必须是 protected。</p>
<p>4） 类非 static 成员变量并且仅在本类使用，必须是private。</p>
<p>5） 类 static 成员变量如果仅在本类使用，必须是 private。</p>
<p>6） 若是 static 成员变量，考虑是否为 final。</p>
<p>7）类成员方法只供类内部调用，必须是 private。</p>
<p>8）类成员方法只对继承类公开，那么限制为 protected。</p>
</blockquote>
<p>说明：任何类、方法、参数、变量，严控访问范围。过于宽泛的访问范围，不利于模块解耦。思考：如果是一个 private 的方法，想删除就删除，可是一个 public 的 service 成员方法或成员变量，删除一下，不得手心冒点汗吗？变量像自己的小孩，尽量在自己的视线内，变量作用域太大，无限制的到处跑，那么你会担心的。</p>
<h3 id="五-日期时间" tabindex="-1"> (五) 日期时间</h3>
<h4 id="【强制】日期格式化时-传入-pattern-中表示年份统一使用小写的-y。" tabindex="-1"> 【强制】日期格式化时，传入 pattern 中表示年份统一使用小写的 y。</h4>
<blockquote>
<p>说明：日期格式化时，yyyy 表示当天所在的年，而大写的 YYYY 代表是 week in which year（JDK7 之后引入的概念），意思是当天所在的周属于的年份，一周从周日开始，周六结束，只要本周跨年，返回的 YYYY 就是下一年。</p>
<p>正例：表示日期和时间的格式如下所示：</p>
<p>new SimpleDateFormat(&quot;yyyy-MM-dd HH:mm:ss&quot;)</p>
</blockquote>
<h4 id="【强制】在日期格式中分清楚大写的-m-和小写的-m-大写的-h-和小写的-h-分别指代的意义。" tabindex="-1"> 【强制】在日期格式中分清楚大写的 M 和小写的 m，大写的 H 和小写的 h 分别指代的意义。</h4>
<p>说明：日期格式中的这两对字母表意如下：</p>
<ol>
<li>
<p>表示月份是大写的 M；</p>
</li>
<li>
<p>表示分钟则是小写的 m；</p>
</li>
<li>
<p>24 小时制的是大写的H；</p>
</li>
<li>
<p>12 小时制的则是小写的 h。</p>
</li>
</ol>
<p> </p>
<h4 id="【强制】获取当前毫秒数-system-currenttimemillis-而不是-new-date-gettime-。" tabindex="-1"> 【强制】获取当前毫秒数：System.currentTimeMillis(); 而不是 new Date().getTime()。</h4>
<p>说明：如果想获取更加精确的纳秒级时间值，使用 System.nanoTime 的方式。在 JDK8 中，针对统计时间等场景，推荐使用 Instant 类。</p>
<h4 id="【强制】不允许在程序任何地方中使用-1-java-sql-date。-2-java-sql-time。3-java-sql-timestamp。" tabindex="-1"> 【强制】不允许在程序任何地方中使用：1）java.sql.Date。 2）java.sql.Time。3）java.sql.Timestamp。</h4>
<p>说明：第 1 个不记录时间，getHours()抛出异常；第 2 个不记录日期，getYear()抛出异常；第 3 个在构造方法 super((time/1000)*1000)，在 Timestamp 属性 fastTime 和 nanos 分别存储秒和纳秒信息。</p>
<p>反例： java.util.Date.after(Date)进行时间比较时，当入参是 java.sql.Timestamp 时，会触发 JDK BUG(JDK9 已修复)，可能导致比较时的意外结果。</p>
<h4 id="【强制】不要在程序中写死一年为-365-天-避免在公历闰年时出现日期转换错误或程序逻辑错误。" tabindex="-1"> 【强制】不要在程序中写死一年为 365 天，避免在公历闰年时出现日期转换错误或程序逻辑错误。</h4>
<blockquote>
<p>正例：</p>
<p>// 获取今年的天数</p>
<p>int daysOfThisYear = LocalDate.now().lengthOfYear();</p>
<p>// 获取指定某年的天数</p>
<p>LocalDate.of(2011, 1, 1).lengthOfYear();</p>
<p>反例：</p>
<p>// 第一种情况：在闰年 366 天时，出现数组越界异常</p>
<p>int[] dayArray = new int[365];</p>
<p>// 第二种情况：一年有效期的会员制，今年 1 月 26 日注册，硬编码 365 返回的却是 1 月 25 日</p>
<p>Calendar calendar = Calendar.getInstance(); calendar.set(2020, 1, 26);</p>
<p>calendar.add(Calendar.DATE, 365);</p>
</blockquote>
<h4 id="【推荐】避免公历闰年-2-月问题。闰年的-2-月份有-29-天-一年后的那一天不可能是-2-月-29" tabindex="-1"> 【推荐】避免公历闰年 2 月问题。闰年的 2 月份有 29 天，一年后的那一天不可能是 2 月 29</h4>
<h4 id="日。" tabindex="-1"> 日。</h4>
<h4 id="【推荐】使用枚举值来指代月份。如果使用数字-注意-date-calendar-等日期相关类的月份month-取值在-0-11-之间。" tabindex="-1"> 【推荐】使用枚举值来指代月份。如果使用数字，注意 Date，Calendar 等日期相关类的月份month 取值在 0-11 之间。</h4>
<p>说明：参考 JDK 原生注释，Month value is 0-based. e.g., 0 for January.</p>
<p>正例： Calendar.JANUARY，Calendar.FEBRUARY，Calendar.MARCH 等来指代相应月份来进行传参或比较。</p>
<h3 id="六-集合处理" tabindex="-1"> (六) 集合处理</h3>
<h4 id="【强制】关于-hashcode-和-equals-的处理-遵循如下规则" tabindex="-1"> 【强制】关于 hashCode 和 equals 的处理，遵循如下规则：</h4>
<ol>
<li>
<p>只要覆写 equals，就必须覆写 hashCode。</p>
</li>
<li>
<p>因为 Set 存储的是不重复的对象，依据 hashCode 和 equals 进行判断，所以 Set 存储的对象必须覆写这两种方法。</p>
</li>
<li>
<p>如果自定义对象作为 Map 的键，那么必须覆写hashCode 和 equals。</p>
</li>
</ol>
<p>说明：String 因为覆写了 hashCode 和 equals 方法，所以可以愉快地将 String 对象作为 key 来使用。</p>
<h4 id="【强制】判断所有集合内部的元素是否为空-使用-isempty-方法-而不是-size-0-的方式。" tabindex="-1"> 【强制】判断所有集合内部的元素是否为空，使用 isEmpty()方法，而不是 size()==0 的方式。</h4>
<p>说明：在某些集合中，前者的时间复杂度为 O(1)，而且可读性更好。正例：</p>
<blockquote>
<p>Map&lt;String, Object&gt; map = new HashMap&lt;&gt;(16);</p>
<p>if(map.isEmpty()) {</p>
<p>System.out.println(&quot;no element in this map.&quot;);</p>
<p>}</p>
</blockquote>
<h4 id="【强制】在使用-java-util-stream-collectors-类的-tomap-方法转为-map-集合时-一定要使用含有参数类型为-binaryoperator-参数名为-mergefunction-的方法-否则当出现相同-key-值时会抛出-illegalstateexception-异常。" tabindex="-1"> 【强制】在使用 java.util.stream.Collectors 类的 toMap()方法转为 Map 集合时，一定要使用含有参数类型为 BinaryOperator，参数名为 mergeFunction 的方法，否则当出现相同 key 值时会抛出 IllegalStateException 异常。</h4>
<p>说明：参数 mergeFunction 的作用是当出现 key 重复时，自定义对 value 的处理策略。正例：</p>
<blockquote>
<p>List&lt;Pair&lt;String, Double&gt;&gt; pairArrayList = new ArrayList&lt;&gt;(3); pairArrayList.add(new Pair&lt;&gt;(&quot;version&quot;, 12.10));</p>
<p>pairArrayList.add(new Pair&lt;&gt;(&quot;version&quot;, 12.19));</p>
<p>pairArrayList.add(new Pair&lt;&gt;(&quot;version&quot;, 6.28)); Map&lt;String, Double&gt; map = pairArrayList.stream().collect(</p>
<p>// 生 成 的 map 集 合 中 只 有 一 个 键 值 对 ：{version=6.28} Collectors.toMap(Pair::getKey, Pair::getValue, (v1, v2) -&gt; v2));</p>
</blockquote>
<p>反例：</p>
<blockquote>
<p>String[] departments = new String[] {&quot;iERP&quot;, &quot;iERP&quot;, &quot;EIBU&quot;};</p>
<p>// 抛出 IllegalStateException 异常</p>
<p>Map&lt;Integer, String&gt; map = Arrays.stream(departments)</p>
<p>.collect(Collectors.toMap(String::hashCode, str -&gt; str));</p>
</blockquote>
<h4 id="【强制】在使用-java-util-stream-collectors-类的-tomap-方法转为-map-集合时-一定要注意当-value-为-null-时会抛-npe-异常。" tabindex="-1"> 【强制】在使用 java.util.stream.Collectors 类的 toMap()方法转为 Map 集合时，一定要注意当 value 为 null 时会抛 NPE 异常。</h4>
<p>说明：在 java.util.HashMap 的 merge 方法里会进行如下的判断：</p>
<blockquote>
<p>if (value == null || remappingFunction == null) throw new NullPointerException();</p>
</blockquote>
<p>反例：</p>
<blockquote>
<p>List&lt;Pair&lt;String, Double&gt;&gt; pairArrayList = new ArrayList&lt;&gt;(2); pairArrayList.add(new Pair&lt;&gt;(&quot;version1&quot;, 8.3)); pairArrayList.add(new Pair&lt;&gt;(&quot;version2&quot;, null));</p>
<p>Map&lt;String, Double&gt; map = pairArrayList.stream().collect(</p>
<p>// 抛出 NullPointerException 异常</p>
<p>Collectors.toMap(Pair::getKey, Pair::getValue, (v1, v2) -&gt; v2));</p>
</blockquote>
<h4 id="【强制】arraylist-的-sublist-结果不可强转成-arraylist-否则会抛出-classcastexception-异常-java-util-randomaccesssublist-cannot-be-cast-to-java-util-arraylist。" tabindex="-1"> 【强制】ArrayList 的 subList 结果不可强转成 ArrayList，否则会抛出 ClassCastException 异常：java.util.RandomAccessSubList cannot be cast to java.util.ArrayList。</h4>
<p>说明：subList()返回的是 ArrayList 的内部类 SubList，并不是 ArrayList 本身，而是ArrayList 的一个视图，对于 SubList 的所有操作最终会反映到原列表上。</p>
<h4 id="【强制】使用-map-的方法-keyset-values-entryset-返回集合对象时-不可以对其进行添加元素操作-否则会抛出-unsupportedoperationexception-异常。" tabindex="-1"> 【强制】使用 Map 的方法 keySet()/values()/entrySet()返回集合对象时，不可以对其进行添加元素操作，否则会抛出 UnsupportedOperationException 异常。</h4>
<h4 id="【强制】collections-类返回的对象-如-emptylist-singletonlist-等都是-immutable-list-不可对其进行添加或者删除元素的操作。" tabindex="-1"> 【强制】Collections 类返回的对象，如：emptyList()/singletonList()等都是 immutable list， 不可对其进行添加或者删除元素的操作。</h4>
<blockquote>
<p>反例：如果查询无结果，返回 Collections.emptyList()空集合对象，调用方一旦进行了添加元素的操作，就会触发 UnsupportedOperationException 异常。</p>
</blockquote>
<h4 id="【强制】在-sublist-场景中-高度注意对父集合元素的增加或删除-均会导致子列表的遍历、增加、删除产生-concurrentmodificationexception-异常。" tabindex="-1"> 【强制】在 subList 场景中，高度注意对父集合元素的增加或删除，均会导致子列表的遍历、增加、删除产生 ConcurrentModificationException 异常。</h4>
<h4 id="【强制】使用集合转数组的方法-必须使用集合的-toarray-t-array-传入的是类型完全一致、长度为-0-的空数组。" tabindex="-1"> 【强制】使用集合转数组的方法，必须使用集合的 toArray(T[] array)，传入的是类型完全一致、长度为 0 的空数组。</h4>
<blockquote>
<p>反例：直接使用 toArray 无参方法存在问题，此方法返回值只能是 Object[]类，若强转其它类型数组将出现ClassCastException 错误。</p>
<p>正例：</p>
<p>List&lt;String&gt; list = new ArrayList&lt;&gt;(2); list.add(&quot;guan&quot;);</p>
<p>list.add(&quot;bao&quot;);</p>
<p>String[] array = list.toArray(new String[0]);</p>
<p>说明：使用 toArray 带参方法，数组空间大小的 length： 1） 等于 0，动态创建与 size 相同的数组，性能最好。</p>
</blockquote>
<ol start="2">
<li>
<p>大于 0 但小于size，重新创建大小等于 size 的数组，增加 GC 负担。</p>
</li>
<li>
<p>等于 size，在高并发情况下，数组创建完成之后，size 正在变大的情况下，负面影响与 2 相同。</p>
</li>
<li>
<p>大于 size，空间浪费，且在 size 处插入 null 值，存在 NPE 隐患。</p>
</li>
</ol>
<h4 id="【强制】在使用-collection-接口任何实现类的-addall-方法时-都要对输入的集合参数进行npe-判断。" tabindex="-1"> 【强制】在使用 Collection 接口任何实现类的 addAll()方法时，都要对输入的集合参数进行NPE 判断。</h4>
<p>说明：在 ArrayList#addAll 方法的第一行代码即 Object[] a = c.toArray(); 其中 c 为输入集合参数，如果为 null，则直接抛出异常。</p>
<h4 id="【强制】使用工具类-arrays-aslist-把数组转换成集合时-不能使用其修改集合相关的方法-它的-add-remove-clear-方法会抛出-unsupportedoperationexception-异常。" tabindex="-1"> 【强制】使用工具类 Arrays.asList()把数组转换成集合时，不能使用其修改集合相关的方法， 它的 add/remove/clear 方法会抛出 UnsupportedOperationException 异常。</h4>
<p>说明：asList 的返回对象是一个 Arrays 内部类，并没有实现集合的修改方法。Arrays.asList 体现的是适配器模式，只是转换接口，后台的数据仍是数组。</p>
<blockquote>
<p>String[] str = new String[] { &quot;chen&quot;, &quot;yang&quot;, &quot;hao&quot; }; List list = Arrays.asList(str);</p>
</blockquote>
<p>第一种情况：list.add(&quot;yangguanbao&quot;); 运行时异常。</p>
<p>第二种情况：str[0] = &quot;change&quot;; 也会随之修改，反之亦然。</p>
<h4 id="【强制】泛型通配符-extends-t-来接收返回的数据-此写法的泛型集合不能使用-add-方法-而-super-t-不能使用-get-方法-两者在接口调用赋值的场景中容易出错。" tabindex="-1"> 【强制】泛型通配符&lt;? extends T&gt;来接收返回的数据，此写法的泛型集合不能使用 add 方法， 而&lt;? super T&gt;不能使用 get 方法，两者在接口调用赋值的场景中容易出错。</h4>
<p>说明：扩展说一下 PECS(Producer Extends Consumer Super)原则：第一、频繁往外读取内容的，适合用</p>
<p>&lt;? extends T&gt;。第二、经常往里插入的，适合用&lt;? super T&gt;</p>
<h4 id="【强制】在无泛型限制定义的集合赋值给泛型限制的集合时-在使用集合元素时-需要进行instanceof-判断-避免抛出-classcastexception-异常。" tabindex="-1"> 【强制】在无泛型限制定义的集合赋值给泛型限制的集合时，在使用集合元素时，需要进行instanceof 判断，避免抛出 ClassCastException 异常。</h4>
<p>说明：毕竟泛型是在 JDK5 后才出现，考虑到向前兼容，编译器是允许非泛型集合与泛型集合互相赋值。</p>
<p>反例：</p>
<blockquote>
<p>List&lt;String&gt; generics = null;</p>
<p>List notGenerics = new ArrayList(10); notGenerics.add(new Object()); notGenerics.add(new Integer(1)); generics = notGenerics;</p>
<p>// 此处抛出 ClassCastException 异常</p>
<p>String string = generics.get(0);</p>
</blockquote>
<h4 id="【强制】不要在-foreach-循环里进行元素的-remove-add-操作。remove-元素请使用-iterator" tabindex="-1"> 【强制】不要在 foreach 循环里进行元素的 remove/add 操作。remove 元素请使用 Iterator</h4>
<h4 id="方式-如果并发操作-需要对-iterator-对象加锁。" tabindex="-1"> 方式，如果并发操作，需要对 Iterator 对象加锁。</h4>
<p>正例：</p>
<blockquote>
<p>List&lt;String&gt; list = new ArrayList&lt;&gt;(); list.add(&quot;1&quot;);</p>
<p>list.add(&quot;2&quot;);</p>
<p>Iterator&lt;String&gt; iterator = list.iterator(); while (iterator.hasNext()) {</p>
<p>String item = iterator.next(); if (删除元素的条件) {</p>
<p>iterator.remove();</p>
<p>}</p>
<p>}</p>
<p>反例：</p>
<p>for (String item : list) {</p>
<p>if (&quot;1&quot;.equals(item)) { list.remove(item);</p>
<p>}</p>
<p>}</p>
</blockquote>
<p>说明：以上代码的执行结果肯定会出乎大家的意料，那么试一下把&quot;1&quot;换成&quot;2&quot;，会是同样的结果吗？</p>
<h4 id="【强制】在-jdk7-版本及以上-comparator-实现类要满足如下三个条件-不然-arrays-sort-collections-sort-会抛-illegalargumentexception-异常。" tabindex="-1"> 【强制】在 JDK7 版本及以上，Comparator 实现类要满足如下三个条件，不然 Arrays.sort， Collections.sort 会抛 IllegalArgumentException 异常。</h4>
<blockquote>
<p>说明：三个条件如下</p>
</blockquote>
<ol>
<li>
<p>x，y 的比较结果和 y，x 的比较结果相反。</p>
</li>
<li>
<p>x&gt;y，y&gt;z，则 x&gt;z。</p>
</li>
<li>
<p>x=y，则 x，z 比较结果和 y，z 比较结果相同。</p>
</li>
</ol>
<blockquote>
<p>反例：下例中没有处理相等的情况，交换两个对象判断结果并不互反，不符合第一个条件，在实际使用中可能会出现异常。</p>
<p>new Comparator&lt;Student&gt;() { @Override</p>
<p>public int compare(Student o1, Student o2) { return o1.getId() &gt; o2.getId() ? 1 : -1;</p>
<p>}</p>
<p>};</p>
</blockquote>
<h4 id="【推荐】集合泛型定义时-在-jdk7-及以上-使用-diamond-语法或全省略。" tabindex="-1"> 【推荐】集合泛型定义时，在 JDK7 及以上，使用 diamond 语法或全省略。</h4>
<blockquote>
<p>说明：菱形泛型，即 diamond，直接使用&lt;&gt;来指代前边已经指定的类型。</p>
<p>正例：</p>
<p>// diamond 方式，即&lt;&gt;</p>
<p>HashMap&lt;String, String&gt; userCache = new HashMap&lt;&gt;(16);</p>
<p>// 全省略方式</p>
<p>ArrayList&lt;User&gt; users = new ArrayList(10);</p>
</blockquote>
<h4 id="【推荐】集合初始化时-指定集合初始值大小。" tabindex="-1"> 【推荐】集合初始化时，指定集合初始值大小。</h4>
<blockquote>
<p>说明：HashMap 使用 HashMap(int initialCapacity) 初始化，如果暂时无法确定集合大小，那么指定默认值（16）即可。</p>
<p>正例：initialCapacity = (需要存储的元素个数 / 负载因子) + 1。注意负载因子（即 loader factor）默认为 0.75，如果暂时无法确定初始值大小，请设置为 16（即默认值）。</p>
</blockquote>
<p>反例： HashMap 需要放置 1024 个元素，由于没有设置容量初始大小，随着元素增加而被迫不断扩容， resize()方法总共会调用 8 次，反复重建哈希表和数据迁移。当放置的集合元素个数达千万级时会影响程序性能。</p>
<h4 id="【推荐】使用-entryset-遍历-map-类集合-kv-而不是-keyset-方式进行遍历。" tabindex="-1"> 【推荐】使用 entrySet 遍历 Map 类集合 KV，而不是 keySet 方式进行遍历。</h4>
<p>说明：keySet 其实是遍历了 2 次，一次是转为 Iterator 对象，另一次是从 hashMap 中取出 key 所对应的value。而 entrySet 只是遍历了一次就把 key 和 value 都放到了 entry 中，效率更高。如果是 JDK8，使用Map.forEach 方法。</p>
<p>正例：values()返回的是 V 值集合，是一个 list 集合对象；keySet()返回的是K 值集合，是一个 Set 集合对象；entrySet()返回的是 K-V 值组合集合。</p>
<h4 id="【推荐】高度注意-map-类集合-k-v-能不能存储null-值的情况-如下表格" tabindex="-1"> 【推荐】高度注意 Map 类集合 K/V 能不能存储null 值的情况，如下表格：</h4>
<p>+---------------------+-----------------+-----------------+---------------+--------------------------+
| &gt; 集合类            | &gt; Key           | &gt; Value         | &gt; Super       | &gt; 说明                   |
+=====================+=================+=================+===============+==========================+
| &gt; Hashtable         | &gt; 不允许为 null | &gt; 不允许为 null | &gt; Dictionary  | &gt; 线程安全               |
+---------------------+-----------------+-----------------+---------------+--------------------------+
| &gt; ConcurrentHashMap | &gt; 不允许为 null | &gt; 不允许为 null | &gt; AbstractMap | &gt; 锁分段技术（JDK8:CAS） |
+---------------------+-----------------+-----------------+---------------+--------------------------+
| &gt; TreeMap           | &gt; 不允许为 null | &gt; 允许为 null   | &gt; AbstractMap | &gt; 线程不安全             |
+---------------------+-----------------+-----------------+---------------+--------------------------+
| &gt; HashMap           | &gt; 允许为 null   | &gt; 允许为 null   | &gt; AbstractMap | &gt; 线程不安全             |
+---------------------+-----------------+-----------------+---------------+--------------------------+</p>
<p>反例：由于 HashMap 的干扰，很多人认为 ConcurrentHashMap 是可以置入 null 值，而事实上，存储</p>
<p>null 值时会抛出 NPE 异常。</p>
<h4 id="【参考】合理利用好集合的有序性-sort-和稳定性-order-避免集合的无序性-unsort-和不稳定性-unorder-带来的负面影响。" tabindex="-1"> 【参考】合理利用好集合的有序性(sort)和稳定性(order)，避免集合的无序性(unsort)和不稳定性(unorder)带来的负面影响。</h4>
<p>说明：有序性是指遍历的结果是按某种比较规则依次排列的。稳定性指集合每次遍历的元素次序是一定的。如：ArrayList 是 order/unsort；HashMap 是 unorder/unsort；TreeSet 是 order/sort。</p>
<h4 id="【参考】利用-set-元素唯一的特性-可以快速对一个集合进行去重操作-避免使用-list-的contains-进行遍历去重或者判断包含操作。" tabindex="-1"> 【参考】利用 Set 元素唯一的特性，可以快速对一个集合进行去重操作，避免使用 List 的contains()进行遍历去重或者判断包含操作。</h4>
<h3 id="七-并发处理" tabindex="-1"> (七) 并发处理</h3>
<h4 id="【强制】获取单例对象需要保证线程安全-其中的方法也要保证线程安全。" tabindex="-1"> 【强制】获取单例对象需要保证线程安全，其中的方法也要保证线程安全。</h4>
<p>说明：资源驱动类、工具类、单例工厂类都需要注意。</p>
<h4 id="【强制】创建线程或线程池时请指定有意义的线程名称-方便出错时回溯。" tabindex="-1"> 【强制】创建线程或线程池时请指定有意义的线程名称，方便出错时回溯。</h4>
<blockquote>
<p>正例：自定义线程工厂，并且根据外部特征进行分组，比如，来自同一机房的调用，把机房编号赋值给</p>
<p>whatFeatureOfGroup</p>
<p>public class UserThreadFactory implements ThreadFactory { private final String namePrefix;</p>
<p>private final AtomicInteger nextId = new AtomicInteger(1);</p>
<p>// 定义线程组名称，在利用 jstack 来排查问题时，非常有帮助</p>
<p>UserThreadFactory(String whatFeatureOfGroup) {</p>
<p>namePrefix = &quot;From UserThreadFactory's &quot; + whatFeatureOfGroup + &quot;-Worker-&quot;;</p>
<p>}</p>
<p>@Override</p>
<p>public Thread newThread(Runnable task) {</p>
<p>String name = namePrefix + nextId.getAndIncrement(); Thread thread = new Thread(null, task, name, 0, false); System.out.println(thread.getName());</p>
<p>return thread;</p>
<p>}</p>
<p>}</p>
</blockquote>
<h4 id="【强制】线程资源必须通过线程池提供-不允许在应用中自行显式创建线程。" tabindex="-1"> 【强制】线程资源必须通过线程池提供，不允许在应用中自行显式创建线程。</h4>
<blockquote>
<p>说明：线程池的好处是减少在创建和销毁线程上所消耗的时间以及系统资源的开销，解决资源不足的问题。如果不使用线程池，有可能造成系统创建大量同类线程而导致消耗完内存或者&quot;过度切换&quot;的问题。</p>
</blockquote>
<h4 id="【强制】线程池不允许使用-executors-去创建-而是通过-threadpoolexecutor-的方式-这样的处理方式让写的同学更加明确线程池的运行规则-规避资源耗尽的风险。" tabindex="-1"> 【强制】线程池不允许使用 Executors 去创建，而是通过 ThreadPoolExecutor 的方式，这样的处理方式让写的同学更加明确线程池的运行规则，规避资源耗尽的风险。</h4>
<blockquote>
<p>说明：Executors 返回的线程池对象的弊端如下：</p>
</blockquote>
<p>1） FixedThreadPool 和 SingleThreadPool：</p>
<p>允许的请求队列长度为 Integer.MAX_VALUE，可能会堆积大量的请求，从而导致 OOM。</p>
<p>2） CachedThreadPool：</p>
<blockquote>
<p>允许的创建线程数量为 Integer.MAX_VALUE，可能会创建大量的线程，从而导致 OOM。</p>
</blockquote>
<h4 id="【强制】simpledateformat-是线程不安全的类-一般不要定义为-static-变量-如果定义为-static-必须加锁-或者使用-dateutils-工具类。" tabindex="-1"> 【强制】SimpleDateFormat 是线程不安全的类，一般不要定义为 static 变量，如果定义为 static， 必须加锁，或者使用 DateUtils 工具类。</h4>
<blockquote>
<p>正例：注意线程安全，使用 DateUtils。亦推荐如下处理：</p>
<p>private static final ThreadLocal&lt;DateFormat&gt; df = new ThreadLocal&lt;DateFormat&gt;() { @Override</p>
<p>protected DateFormat initialValue() {</p>
<p>return new SimpleDateFormat(&quot;yyyy-MM-dd&quot;);</p>
<p>}</p>
<p>};</p>
</blockquote>
<p>说 明 ： 如 果 是 JDK8 的 应 用 ， 可 以 使 用 Instant 代 替 Date，LocalDateTime 代 替 Calendar， DateTimeFormatter 代替 SimpleDateFormat，官方给出的解释：simple beautiful strong immutable thread-safe。</p>
<h4 id="【强制】必须回收自定义的-threadlocal-变量-尤其在线程池场景下-线程经常会被复用-如果不清理自定义的-threadlocal-变量-可能会影响后续业务逻辑和造成内存泄露等问题。尽量在代理中使用-try-finally-块进行回收。" tabindex="-1"> 【强制】必须回收自定义的 ThreadLocal 变量，尤其在线程池场景下，线程经常会被复用， 如果不清理自定义的 ThreadLocal 变量，可能会影响后续业务逻辑和造成内存泄露等问题。尽量在代理中使用 try-finally 块进行回收。</h4>
<blockquote>
<p>正例：</p>
<p>objectThreadLocal.set(userInfo); try {</p>
</blockquote>
<p>// ...</p>
<p>} finally {</p>
<blockquote>
<p>objectThreadLocal.remove();</p>
<p>}</p>
</blockquote>
<h4 id="【强制】高并发时-同步调用应该去考量锁的性能损耗。能用无锁数据结构-就不要用锁-能锁区块-就不要锁整个方法体-能用对象锁-就不要用类锁。" tabindex="-1"> 【强制】高并发时，同步调用应该去考量锁的性能损耗。能用无锁数据结构，就不要用锁；能锁区块，就不要锁整个方法体；能用对象锁，就不要用类锁。</h4>
<p>说明：尽可能使加锁的代码块工作量尽可能的小，避免在锁代码块中调用 RPC 方法。</p>
<h4 id="【强制】对多个资源、数据库表、对象同时加锁时-需要保持一致的加锁顺序-否则可能会造成死锁。" tabindex="-1"> 【强制】对多个资源、数据库表、对象同时加锁时，需要保持一致的加锁顺序，否则可能会造成死锁。</h4>
<p>说明：线程一需要对表 A、B、C 依次全部加锁后才可以进行更新操作，那么线程二的加锁顺序也必须是 A、B、C，否则可能出现死锁。</p>
<h4 id="【强制】在使用阻塞等待获取锁的方式中-必须在-try-代码块之外-并且在加锁方法与-try-代码块之间没有任何可能抛出异常的方法调用-避免加锁成功后-在-finally-中无法解锁。" tabindex="-1"> 【强制】在使用阻塞等待获取锁的方式中，必须在 try 代码块之外，并且在加锁方法与 try 代码块之间没有任何可能抛出异常的方法调用，避免加锁成功后，在 finally 中无法解锁。</h4>
<blockquote>
<p>说明一：如果在 lock 方法与 try 代码块之间的方法调用抛出异常，那么无法解锁，造成其它线程无法成功获取锁。</p>
<p>说明二：如果 lock 方法在try 代码块之内，可能由于其它方法抛出异常，导致在 finally 代码块中，unlock 对未加锁的对象解锁，它会调用 AQS 的tryRelease 方法（取决于具体实现类），抛出IllegalMonitorStateException 异常。</p>
<p>说明三：在 Lock 对象的 lock 方法实现中可能抛出 unchecked 异常，产生的后果与说明二相同。正例：</p>
<p>Lock lock = new XxxLock();</p>
<p>// ...</p>
<p>lock.lock(); try {</p>
<p>doSomething(); doOthers();</p>
<p>} finally {</p>
<p>lock.unlock();</p>
</blockquote>
<p>}</p>
<blockquote>
<p>反例：</p>
<p>Lock lock = new XxxLock();</p>
<p>// ...</p>
</blockquote>
<p>try {</p>
<p>// 如果此处抛出异常，则直接执行 finally 代码块</p>
<p>doSomething();</p>
<p>// 无论加锁是否成功，finally 代码块都会执行</p>
<p>lock.lock(); doOthers();</p>
<blockquote>
<p>} finally {</p>
<p>lock.unlock();</p>
<p>}</p>
</blockquote>
<h4 id="【强制】在使用尝试机制来获取锁的方式中-进入业务代码块之前-必须先判断当前线程是否持有锁。锁的释放规则与锁的阻塞等待方式相同。" tabindex="-1"> 【强制】在使用尝试机制来获取锁的方式中，进入业务代码块之前，必须先判断当前线程是否持有锁。锁的释放规则与锁的阻塞等待方式相同。</h4>
<blockquote>
<p>说明：Lock 对象的 unlock 方法在执行时，它会调用 AQS 的 tryRelease 方法（取决于具体实现类），如果当前线程不持有锁，则抛出 IllegalMonitorStateException 异常。</p>
<p>正例：</p>
<p>Lock lock = new XxxLock();</p>
<p>// ...</p>
<p>boolean isLocked = lock.tryLock(); if (isLocked) {</p>
<p>try {</p>
<p>doSomething(); doOthers();</p>
<p>} finally {</p>
<p>lock.unlock();</p>
<p>}</p>
<p>}</p>
</blockquote>
<h4 id="【强制】并发修改同一记录时-避免更新丢失-需要加锁。要么在应用层加锁-要么在缓存加锁-要么在数据库层使用乐观锁-使用-version-作为更新依据。" tabindex="-1"> 【强制】并发修改同一记录时，避免更新丢失，需要加锁。要么在应用层加锁，要么在缓存加锁，要么在数据库层使用乐观锁，使用 version 作为更新依据。</h4>
<p>说明：如果每次访问冲突概率小于 20%，推荐使用乐观锁，否则使用悲观锁。乐观锁的重试次数不得小于3 次。</p>
<h4 id="【强制】多线程并行处理定时任务时-timer-运行多个-timetask-时-只要其中之一没有捕获抛出的异常-其它任务便会自动终止运行-使用-scheduledexecutorservice-则没有这个问题。" tabindex="-1"> 【强制】多线程并行处理定时任务时，Timer 运行多个 TimeTask 时，只要其中之一没有捕获抛出的异常，其它任务便会自动终止运行，使用 ScheduledExecutorService 则没有这个问题。</h4>
<h4 id="【推荐】资金相关的金融敏感信息-使用悲观锁策略。" tabindex="-1"> 【推荐】资金相关的金融敏感信息，使用悲观锁策略。</h4>
<blockquote>
<p>说明：乐观锁在获得锁的同时已经完成了更新操作，校验逻辑容易出现漏洞，另外，乐观锁对冲突的解决策略有较复杂的要求，处理不当容易造成系统压力或数据异常，所以资金相关的金融敏感信息不建议使用乐观锁更新。</p>
</blockquote>
<p>正例：悲观锁遵循一锁、二判、三更新、四释放的原则。</p>
<h4 id="【推荐】使用-countdownlatch-进行异步转同步操作-每个线程退出前必须调用-countdown-方法-线程执行代码注意-catch-异常-确保-countdown-方法被执行到-避免主线程无法执行至await-方法-直到超时才返回结果。" tabindex="-1"> 【推荐】使用 CountDownLatch 进行异步转同步操作，每个线程退出前必须调用 countDown 方法，线程执行代码注意 catch 异常，确保 countDown 方法被执行到，避免主线程无法执行至await 方法，直到超时才返回结果。</h4>
<p>说明：注意，子线程抛出异常堆栈，不能在主线程 try-catch 到。</p>
<h4 id="【推荐】避免-random-实例被多线程使用-虽然共享该实例是线程安全的-但会因竞争同一-seed" tabindex="-1"> 【推荐】避免 Random 实例被多线程使用，虽然共享该实例是线程安全的，但会因竞争同一 seed</h4>
<h4 id="导致的性能下降。" tabindex="-1"> 导致的性能下降。</h4>
<p>说明：Random 实例包括 java.util.Random 的实例或者 Math.random()的方式。</p>
<p>正例：在 JDK7 之后，可以直接使用 API ThreadLocalRandom，而在 JDK7 之前，需要编码保证每个线程持有一个单独的 Random 实例。</p>
<h4 id="【推荐】通过双重检查锁-double-checked-locking-在并发场景下-存在延迟初始化的优化问题隐患-可参考-the-double-checked-locking-is-broken-declaration-推荐解决方案中较为简单一种-适用于-jdk5-及以上版本-将目标属性声明为-volatile-型-比如将-helper-的属性声明修改为-private-volatile-helper-helper-null-。" tabindex="-1"> 【推荐】通过双重检查锁（double-checked locking）（在并发场景下）存在延迟初始化的优化问题隐患（可参考 The &quot;Double-Checked Locking is Broken&quot; Declaration），推荐解决方案中较为简单一种（适用于 JDK5 及以上版本），将目标属性声明为 volatile 型，比如将 helper 的属性声明修改为`private volatile Helper helper = null;`。</h4>
<blockquote>
<p>正例：</p>
<p>public class LazyInitDemo {</p>
<p>private volatile Helper helper = null;</p>
<p>public Helper getHelper() { if (helper == null) {</p>
<p>synchronized (this) {</p>
<p>if (helper == null) { helper = new Helper(); }</p>
<p>}</p>
<p>}</p>
<p>return helper;</p>
<p>}</p>
<p>// other methods and fields...</p>
<p>}</p>
</blockquote>
<h4 id="【参考】volatile-解决多线程内存不可见问题。对于一写多读-是可以解决变量同步问题-但是如果多写-同样无法解决线程安全问题。" tabindex="-1"> 【参考】volatile 解决多线程内存不可见问题。对于一写多读，是可以解决变量同步问题，但是如果多写，同样无法解决线程安全问题。</h4>
<p>说明：如果是 count++操作，使用如下类实现：AtomicInteger count = new AtomicInteger(); count.addAndGet(1); 如果是JDK8，推荐使用LongAdder 对象，比 AtomicLong 性能更好（减少乐观锁的重试次数）。</p>
<h4 id="【参考】hashmap-在容量不够进行-resize-时由于高并发可能出现死链-导致-cpu-飙升-在开发过程中注意规避此风险。" tabindex="-1"> 【参考】HashMap 在容量不够进行 resize 时由于高并发可能出现死链，导致 CPU 飙升，在开发过程中注意规避此风险。</h4>
<h4 id="【参考】threadlocal-对象使用-static-修饰-threadlocal-无法解决共享对象的更新问题。说明-这个变量是针对一个线程内所有操作共享的-所以设置为静态变量-所有此类实例共享此静态变量-也就是说在类第一次被使用时装载-只分配一块存储空间-所有此类的对象-只要是这个线程内定义的-都可以操控这个变量。" tabindex="-1"> 【参考】ThreadLocal 对象使用 static 修饰，ThreadLocal 无法解决共享对象的更新问题。说明：这个变量是针对一个线程内所有操作共享的，所以设置为静态变量，所有此类实例共享此静态变量， 也就是说在类第一次被使用时装载，只分配一块存储空间，所有此类的对象(只要是这个线程内定义的)都可以操控这个变量。</h4>
<h3 id="八-控制语句" tabindex="-1"> (八) 控制语句</h3>
<h4 id="【强制】在一个-switch-块内-每个-case-要么通过-continue-break-return-等来终止-要么注释说明程序将继续执行到哪一个-case-为止-在一个-switch-块内-都必须包含一个-default" tabindex="-1"> 【强制】在一个 switch 块内，每个 case 要么通过 continue/break/return 等来终止，要么注释说明程序将继续执行到哪一个 case 为止；在一个 switch 块内，都必须包含一个 default</h4>
<h4 id="语句并且放在最后-即使它什么代码也没有。" tabindex="-1"> 语句并且放在最后，即使它什么代码也没有。</h4>
<p>说明：注意 break 是退出 switch 语句块，而 return 是退出方法体。</p>
<h4 id="【强制】当-switch-括号内的变量类型为-string-并且此变量为外部参数时-必须先进行-null" tabindex="-1"> 【强制】当 switch 括号内的变量类型为 String 并且此变量为外部参数时，必须先进行 null</h4>
<h4 id="判断。" tabindex="-1"> 判断。</h4>
<blockquote>
<p>反例：如下的代码输出是什么？</p>
<p>public class SwitchString {</p>
<p>public static void main(String[] args) { method(null);</p>
<p>}</p>
<p>public static void method(String param) { switch (param) {</p>
<p>// 肯定不是进入这里</p>
<p>case &quot;sth&quot;:</p>
<p>System.out.println(&quot;it's sth&quot;); break;</p>
<p>// 也不是进入这里</p>
<p>case &quot;null&quot;:</p>
<p>System.out.println(&quot;it's null&quot;); break;</p>
<p>// 也不是进入这里</p>
<p>default:</p>
<p>System.out.println(&quot;default&quot;);</p>
<p>}</p>
<p>}</p>
<p>}</p>
</blockquote>
<ol start="3">
<li>【强制】在 if/else/for/while/do 语句中必须使用大括号。</li>
</ol>
<p>说明：即使只有一行代码，也禁止不采用大括号的编码方式：if (condition) statements;</p>
<h4 id="【强制】三目运算符-condition-表达式-1-表达式-2-中-高度注意表达式-1-和-2-在类型对齐时-可能抛出因自动拆箱导致的-npe-异常。" tabindex="-1"> 【强制】三目运算符 condition? 表达式 1 : 表达式 2 中，高度注意表达式 1 和 2 在类型对齐时，可能抛出因自动拆箱导致的 NPE 异常。</h4>
<blockquote>
<p>说明：以下两种场景会触发类型对齐的拆箱操作：</p>
</blockquote>
<ol>
<li>
<p>表达式 1 或表达式 2 的值只要有一个是原始类型。</p>
</li>
<li>
<p>表达式 1 或表达式 2 的值的类型不一致，会强制拆箱升级成表示范围更大的那个类型。反例：</p>
</li>
</ol>
<blockquote>
<p>Integer a = 1; Integer b = 2; Integer c = null; Boolean flag = false;</p>
<p>// a*b 的结果是 int 类型，那么 c 会强制拆箱成 int 类型，抛出 NPE 异常</p>
<p>Integer result=(flag? a*b : c);</p>
</blockquote>
<h4 id="【强制】在高并发场景中-避免使用-等于-判断作为中断或退出的条件。" tabindex="-1"> 【强制】在高并发场景中，避免使用&quot;等于&quot;判断作为中断或退出的条件。</h4>
<p>说明：如果并发控制没有处理好，容易产生等值判断被&quot;击穿&quot;的情况，使用大于或小于的区间判断条件来代替。</p>
<p>反例：判断剩余奖品数量等于 0 时，终止发放奖品，但因为并发处理错误导致奖品数量瞬间变成了负数， 这样的话，活动无法终止。</p>
<h4 id="【推荐】当某个方法的代码总行数超过-10-行时-return-throw-等中断逻辑的右大括号后均需要加一个空行。" tabindex="-1"> 【推荐】当某个方法的代码总行数超过 10 行时，return / throw 等中断逻辑的右大括号后均需要加一个空行。</h4>
<blockquote>
<p>说明：这样做逻辑清晰，有利于代码阅读时重点关注。</p>
</blockquote>
<ol start="7">
<li>【推荐】表达异常的分支时，少用 if-else 方式，这种方式可以改写成：</li>
</ol>
<blockquote>
<p>if (condition) {</p>
<p>...</p>
<p>return obj;</p>
<p>}</p>
<p>// 接着写 else 的业务逻辑代码;</p>
</blockquote>
<p>说明：如果非使用 if()...else if()...else...方式表达逻辑，避免后续代码维护困难，请勿超过 3 层。</p>
<p>正例：超过 3 层的 if-else 的逻辑判断代码可以使用卫语句、策略模式、状态模式等来实现，其中卫语句示例如下：</p>
<blockquote>
<p>public void findBoyfriend (Man man) { if (man.isUgly()) {</p>
<p>System.out.println(&quot;本姑娘是外貌协会的资深会员&quot;); return;</p>
<p>}</p>
<p>if (man.isPoor()) {</p>
<p>System.out.println(&quot;贫贱夫妻百事哀&quot;); return;</p>
<p>}</p>
<p>if (man.isBadTemper()) {</p>
<p>System.out.println(&quot;银河有多远，你就给我滚多远&quot;); return;</p>
<p>}</p>
<p>System.out.println(&quot;可以先交往一段时间看看&quot;);</p>
<p>}</p>
</blockquote>
<h4 id="【推荐】除常用方法-如-getxxx-isxxx-等外-不要在条件判断中执行其它复杂的语句-将复杂逻辑判断的结果赋值给一个有意义的布尔变量名-以提高可读性。" tabindex="-1"> 【推荐】除常用方法（如 getXxx/isXxx）等外，不要在条件判断中执行其它复杂的语句，将复杂逻辑判断的结果赋值给一个有意义的布尔变量名，以提高可读性。</h4>
<blockquote>
<p>说明：很多 if 语句内的逻辑表达式相当复杂，与、或、取反混合运算，甚至各种方法纵深调用，理解成本非常高。如果赋值一个非常好理解的布尔变量名字，则是件令人爽心悦目的事情。</p>
<p>正例：</p>
<p>// 伪代码如下</p>
<p>final boolean existed = (file.open(fileName, &quot;w&quot;) != null) &amp;&amp; (...) || (...); if (existed) {</p>
<p>...</p>
<p>}</p>
<p>反例：</p>
<p>public final void acquire ( long arg) { if (!tryAcquire(arg) &amp;&amp;</p>
<p>acquireQueued(addWaiter(Node.EXCLUSIVE), arg)) { selfInterrupt();</p>
<p>}</p>
</blockquote>
<h4 id="【推荐】不要在其它表达式-尤其是条件表达式-中-插入赋值语句。" tabindex="-1"> 【推荐】不要在其它表达式（尤其是条件表达式）中，插入赋值语句。</h4>
<blockquote>
<p>说明：赋值点类似于人体的穴位，对于代码的理解至关重要，所以赋值语句需要清晰地单独成为一行。反例：</p>
<p>public Lock getLock(boolean fair) {</p>
<p>// 算术表达式中出现赋值操作，容易忽略 count 值已经被改变</p>
<p>threshold = (count = Integer.MAX_VALUE) - 1;</p>
<p>// 条件表达式中出现赋值操作，容易误认为是 sync==fair return (sync = fair) ? new FairSync() : new NonfairSync();</p>
<p>}</p>
</blockquote>
<ol start="10">
<li>
<p>【推荐】循环体中的语句要考量性能，以下操作尽量移至循环体外处理，如定义对象、变量、获取数据库连接，进行不必要的 try-catch 操作（这个 try-catch 是否可以移至循环体外）。</p>
</li>
<li>
<h4 id="【推荐】避免采用取反逻辑运算符。" tabindex="-1"> 【推荐】避免采用取反逻辑运算符。</h4>
</li>
</ol>
<blockquote>
<p>说明：取反逻辑不利于快速理解，并且取反逻辑写法一般都存在对应的正向逻辑写法。正例：使用 if (x &lt; 628) 来表达 x 小于 628。</p>
<p>反例：使用 if (!(x &gt;= 628)) 来表达 x 小于 628。</p>
</blockquote>
<h4 id="【推荐】公开接口需要进行入参保护-尤其是批量操作的接口。" tabindex="-1"> 【推荐】公开接口需要进行入参保护，尤其是批量操作的接口。</h4>
<p>反例：某业务系统，提供一个用户批量查询的接口，API 文档上有说最多查多少个，但接口实现上没做任何保护，导致调用方传了一个 1000 的用户 id 数组过来后，查询信息后，内存爆了。</p>
<h4 id="【参考】下列情形-需要进行参数校验" tabindex="-1"> 【参考】下列情形，需要进行参数校验：</h4>
<ol>
<li>
<p>调用频次低的方法。</p>
</li>
<li>
<p>执行时间开销很大的方法。此情形中，参数校验时间几乎可以忽略不计，但如果因为参数错误导致中间执行回退，或者错误，那得不偿失。</p>
</li>
<li>
<p>需要极高稳定性和可用性的方法。</p>
</li>
<li>
<p>对外提供的开放接口，不管是 RPC/API/HTTP 接口。</p>
</li>
<li>
<p>敏感权限入口。</p>
</li>
</ol>
<h4 id="【参考】下列情形-不需要进行参数校验" tabindex="-1"> 【参考】下列情形，不需要进行参数校验：</h4>
<ol>
<li>
<p>极有可能被循环调用的方法。但在方法说明里必须注明外部参数检查。</p>
</li>
<li>
<p>底层调用频度比较高的方法。毕竟是像纯净水过滤的最后一道，参数错误不太可能到底层才会暴露问题。一般 DAO 层与 Service 层都在同一个应用中，部署在同一台服务器中，所以 DAO 的参数校验，可以省略。</p>
</li>
<li>
<p>被声明成 private 只会被自己代码所调用的方法，如果能够确定调用方法的代码传入参数已经做过检查或者肯定不会有问题，此时可以不校验参数。</p>
</li>
</ol>
<h3 id="九-注释规约" tabindex="-1"> (九) 注释规约</h3>
<h4 id="【强制】类、类属性、类方法的注释必须使用-javadoc-规范-使用-内容-格式-不得使用" tabindex="-1"> 【强制】类、类属性、类方法的注释必须使用 Javadoc 规范，使用/**内容*/格式，不得使用</h4>
<h4 id="xxx-方式。" tabindex="-1"> // xxx 方式。</h4>
<p>说明：在 IDE 编辑窗口中，Javadoc 方式会提示相关注释，生成 Javadoc 可以正确输出相应注释；在 IDE</p>
<p>中，工程调用方法时，不进入方法即可悬浮提示方法、参数、返回值的意义，提高阅读效率。</p>
<h4 id="【强制】所有的抽象方法-包括接口中的方法-必须要用-javadoc-注释、除了返回值、参数、异常说明外-还必须指出该方法做什么事情-实现什么功能。" tabindex="-1"> 【强制】所有的抽象方法（包括接口中的方法）必须要用 Javadoc 注释、除了返回值、参数、异常说明外，还必须指出该方法做什么事情，实现什么功能。</h4>
<p>说明：对子类的实现要求，或者调用注意事项，请一并说明。</p>
<h4 id="【强制】所有的类都必须添加创建者和创建日期。" tabindex="-1"> 【强制】所有的类都必须添加创建者和创建日期。</h4>
<blockquote>
<p>说明：在设置模板时，注意 IDEA 的@author 为`${USER}`，而 eclipse 的@author 为`${user}`，大小写有区别，而日期的设置统一为 yyyy/MM/dd 的格式。</p>
<p>正例：</p>
<p>/**</p>
<p>* @author yangguanbao</p>
<p>* @date 2016/10/31</p>
<p>*/</p>
</blockquote>
<h4 id="【强制】方法内部单行注释-在被注释语句上方另起一行-使用-注释。方法内部多行注释使用-注释-注意与代码对齐。" tabindex="-1"> 【强制】方法内部单行注释，在被注释语句上方另起一行，使用//注释。方法内部多行注释使用/* */注释，注意与代码对齐。</h4>
<h4 id="【强制】所有的枚举类型字段必须要有注释-说明每个数据项的用途。" tabindex="-1"> 【强制】所有的枚举类型字段必须要有注释，说明每个数据项的用途。</h4>
<h4 id="【推荐】与其-半吊子-英文来注释-不如用中文注释把问题说清楚。专有名词与关键字保持英文原文即可。" tabindex="-1"> 【推荐】与其&quot;半吊子&quot;英文来注释，不如用中文注释把问题说清楚。专有名词与关键字保持英文原文即可。</h4>
<p>反例：&quot;TCP 连接超时&quot;解释成&quot;传输控制协议连接超时&quot;，理解反而费脑筋。</p>
<h4 id="【推荐】代码修改的同时-注释也要进行相应的修改-尤其是参数、返回值、异常、核心逻辑等的修改。" tabindex="-1"> 【推荐】代码修改的同时，注释也要进行相应的修改，尤其是参数、返回值、异常、核心逻辑等的修改。</h4>
<p>说明：代码与注释更新不同步，就像路网与导航软件更新不同步一样，如果导航软件严重滞后，就失去了导航的意义。</p>
<h4 id="【推荐】在类中删除未使用的任何字段、方法、内部类-在方法中删除未使用的任何参数声明与内部变量。" tabindex="-1"> 【推荐】在类中删除未使用的任何字段、方法、内部类；在方法中删除未使用的任何参数声明与内部变量。</h4>
<h4 id="【参考】谨慎注释掉代码。在上方详细说明-而不是简单地注释掉。如果无用-则删除。" tabindex="-1"> 【参考】谨慎注释掉代码。在上方详细说明，而不是简单地注释掉。如果无用，则删除。</h4>
<p>说明：代码被注释掉有两种可能性：1）后续会恢复此段代码逻辑。2）永久不用。前者如果没有备注信息， 难以知晓注释动机。后者建议直接删掉即可，假如需要查阅历史代码，登录代码仓库即可。</p>
<h4 id="【参考】对于注释的要求-第一、能够准确反映设计思想和代码逻辑-第二、能够描述业务含义-使别的程序员能够迅速了解到代码背后的信息。完全没有注释的大段代码对于阅读者形同天书-注释是给自己看的-即使隔很长时间-也能清晰理解当时的思路-注释也是给继任者看的-使其能够快速接替自己的工作。" tabindex="-1"> 【参考】对于注释的要求：第一、能够准确反映设计思想和代码逻辑；第二、能够描述业务含义，使别的程序员能够迅速了解到代码背后的信息。完全没有注释的大段代码对于阅读者形同天书，注释是给自己看的，即使隔很长时间，也能清晰理解当时的思路；注释也是给继任者看的，使其能够快速接替自己的工作。</h4>
<h4 id="【参考】好的命名、代码结构是自解释的-注释力求精简准确、表达到位。避免出现注释的一个极端-过多过滥的注释-代码的逻辑一旦修改-修改注释又是相当大的负担。" tabindex="-1"> 【参考】好的命名、代码结构是自解释的，注释力求精简准确、表达到位。避免出现注释的一个极端：过多过滥的注释，代码的逻辑一旦修改，修改注释又是相当大的负担。</h4>
<p>反例：</p>
<blockquote>
<p>// put elephant into fridge put(elephant, fridge);</p>
<p>方法名 put，加上两个有意义的变量名 elephant 和fridge，已经说明了这是在干什么，语义清晰的代码不需要额外的注释。</p>
</blockquote>
<h4 id="【参考】特殊注释标记-请注明标记人与标记时间。注意及时处理这些标记-通过标记扫描-经常清理此类标记。线上故障有时候就是来源于这些标记处的代码。" tabindex="-1"> 【参考】特殊注释标记，请注明标记人与标记时间。注意及时处理这些标记，通过标记扫描， 经常清理此类标记。线上故障有时候就是来源于这些标记处的代码。</h4>
<ol>
<li>待办事宜（TODO）:（标记人，标记时间，[预计处理时间]）</li>
</ol>
<blockquote>
<p>表示需要实现，但目前还未实现的功能。这实际上是一个 Javadoc 的标签，目前的 Javadoc 还没有实现，但已经被广泛使用。只能应用于类，接口和方法（因为它是一个 Javadoc 标签）。</p>
</blockquote>
<ol start="2">
<li>错误，不能工作（FIXME）:（标记人，标记时间，[预计处理时间]）</li>
</ol>
<blockquote>
<p>在注释中用 FIXME 标记某代码是错误的，而且不能工作，需要及时纠正的情况。</p>
</blockquote>
<h3 id="十-前后端规约" tabindex="-1"> (十) 前后端规约</h3>
<h4 id="【强制】前后端交互的-api-需要明确协议、域名、路径、请求方法、请求内容、状态码、响应体。" tabindex="-1"> 【强制】前后端交互的 API，需要明确协议、域名、路径、请求方法、请求内容、状态码、响应体。</h4>
<blockquote>
<p>说明：</p>
</blockquote>
<ol>
<li>
<p>协议：生产环境必须使用 HTTPS。</p>
</li>
<li>
<p>路径：每一个 API 需对应一个路径，表示API 具体的请求地址：</p>
<p>a.  代表一种资源，只能为名词，推荐使用复数，不能为动词，请求方法已经表达动作意义。</p>
<p>b.  URL 路径不能使用大写，单词如果需要分隔，统一使用下划线。</p>
<p>c.  路径禁止携带表示请求内容类型的后缀，比如&quot;.json&quot;,&quot;.xml&quot;，通过 accept 头表达即可。</p>
</li>
<li>
<p>请求方法：对具体操作的定义，常见的请求方法如下：</p>
</li>
</ol>
<p> </p>
<p>a.  GET：从服务器取出资源。</p>
<p>b.  POST：在服务器新建一个资源。c） PUT：在服务器更新资源。</p>
<blockquote>
<p>d） DELETE：从服务器删除资源。</p>
</blockquote>
<ol>
<li>请求内容：URL 带的参数必须无敏感信息或符合安全要求；body 里带参数时必须设置 Content-Type。5） 响应体：响应体 body 可放置多种数据类型，由 Content-Type 头来确定。</li>
</ol>
<h4 id="【强制】前后端数据列表相关的接口返回-如果为空-则返回空数组-或空集合-。" tabindex="-1"> 【强制】前后端数据列表相关的接口返回，如果为空，则返回空数组[]或空集合{}。</h4>
<p>说明：此条约定有利于数据层面上的协作更加高效，减少前端很多琐碎的 null 判断。</p>
<h4 id="【强制】服务端发生错误时-返回给前端的响应信息必须包含-http-状态码-errorcode、errormessage、用户提示信息四个部分。" tabindex="-1"> 【强制】服务端发生错误时，返回给前端的响应信息必须包含 HTTP 状态码，errorCode、errorMessage、用户提示信息四个部分。</h4>
<p>说明：四个部分的涉众对象分别是浏览器、前端开发、错误排查人员、用户。其中输出给用户的提示信息要求：简短清晰、提示友好，引导用户进行下一步操作或解释错误原因，提示信息可以包括错误原因、上下文环境、推荐操作等。 errorCode：参考。errorMessage：简要描述后端出错原因，便于错误排查人员快速定位问题，注意不要包含敏感数据信息。</p>
<p>正例：常见的 HTTP 状态码如下</p>
<ol>
<li>
<p>200 OK: 表明该请求被成功地完成，所请求的资源发送到客户端。</p>
</li>
<li>
<p>401 Unauthorized: 请求要求身份验证，常见对于需要登录而用户未登录的情况。</p>
</li>
<li>
<p>403 Forbidden：服务器拒绝请求，常见于机密信息或复制其它登录用户链接访问服务器的情况。</p>
</li>
<li>
<p>404 Not Found: 服务器无法取得所请求的网页，请求资源不存在。</p>
</li>
<li>
<p>500 Internal Server Error: 服务器内部错误。</p>
</li>
</ol>
<h4 id="【强制】在前后端交互的-json-格式数据中-所有的-key-必须为小写字母开始的lowercamelcase-风格-符合英文表达习惯-且表意完整。" tabindex="-1"> 【强制】在前后端交互的 JSON 格式数据中，所有的 key 必须为小写字母开始的lowerCamelCase 风格，符合英文表达习惯，且表意完整。</h4>
<p>正例：errorCode / errorMessage / assetStatus / menuList / orderList / configFlag</p>
<p>反例：ERRORCODE / ERROR_CODE / error_message / error-message / errormessage / ErrorMessage / msg</p>
<h4 id="【强制】errormessage-是前后端错误追踪机制的体现-可以在前端输出到-type-hidden" tabindex="-1"> 【强制】errorMessage 是前后端错误追踪机制的体现，可以在前端输出到 type=&quot;hidden&quot;</h4>
<h4 id="文字类控件中-或者用户端的日志中-帮助我们快速地定位出问题。" tabindex="-1"> 文字类控件中，或者用户端的日志中，帮助我们快速地定位出问题。</h4>
<h4 id="【强制】对于需要使用超大整数的场景-服务端一律使用-string-字符串类型返回-禁止使用long-类型。" tabindex="-1"> 【强制】对于需要使用超大整数的场景，服务端一律使用 String 字符串类型返回，禁止使用Long 类型。</h4>
<blockquote>
<p>说明：Java 服务端如果直接返回 Long 整型数据给前端，JS 会自动转换为 Number 类型（注：此类型为双精度浮点数，表示原理与取值范围等同于 Java 中的 Double）。Long 类型能表示的最大值是 2 的 63 次方</p>
<p>-1，在取值范围之内，超过 2 的 53 次方 (9007199254740992)的数值转化为 JS 的 Number 时，有些数 值会有精度损失。扩展说明，在 Long 取值范围内，任何 2 的指数次整数都是绝对不会存在精度损失的，所以说精度损失是一个概率问题。若浮点数尾数位与指数位空间不限，则可以精确表示任何整数，但很不幸， 双精度浮点数的尾数位只有 52 位。</p>
<p>反例：通常在订单号或交易号大于等于 16 位，大概率会出现前后端单据不一致的情况，比如，&quot;orderId&quot;: 362909601374617692，前端拿到的值却是: 362909601374617660。</p>
</blockquote>
<h4 id="【强制】http-请求通过-url-传递参数时-不能超过-2048-字节。" tabindex="-1"> 【强制】HTTP 请求通过 URL 传递参数时，不能超过 2048 字节。</h4>
<p>说明：不同浏览器对于 URL 的最大长度限制略有不同，并且对超出最大长度的处理逻辑也有差异，2048 字节是取所有浏览器的最小值。</p>
<p>反例：某业务将退货的商品 id 列表放在 URL 中作为参数传递，当一次退货商品数量过多时，URL 参数超长， 传递到后端的参数被截断，导致部分商品未能正确退货。</p>
<h4 id="【强制】http-请求通过-body-传递内容时-必须控制长度-超出最大长度后-后端解析会出错。" tabindex="-1"> 【强制】HTTP 请求通过 body 传递内容时，必须控制长度，超出最大长度后，后端解析会出错。</h4>
<blockquote>
<p>说明：nginx 默认限制是 1MB，tomcat 默认限制为 2MB，当确实有业务需要传较大内容时，可以通过调大服务器端的限制。</p>
</blockquote>
<h4 id="【强制】在翻页场景中-用户输入参数的小于-1-则前端返回第一页参数给后端-后端发现用户输入的参数大于总页数-直接返回最后一页。" tabindex="-1"> 【强制】在翻页场景中，用户输入参数的小于 1，则前端返回第一页参数给后端；后端发现用户输入的参数大于总页数，直接返回最后一页。</h4>
<h4 id="【强制】服务器内部重定向必须使用-forward-外部重定向地址必须使用-url-统一代理模块生成-否则会因线上采用-https-协议而导致浏览器提示-不安全-并且还会带来-url-维护不一致的问题。" tabindex="-1"> 【强制】服务器内部重定向必须使用 forward；外部重定向地址必须使用 URL 统一代理模块生成，否则会因线上采用 HTTPS 协议而导致浏览器提示&quot;不安全&quot;，并且还会带来 URL 维护不一致的问题。</h4>
<h4 id="【推荐】服务器返回信息必须被标记是否可以缓存-如果缓存-客户端可能会重用之前的请求结果。" tabindex="-1"> 【推荐】服务器返回信息必须被标记是否可以缓存，如果缓存，客户端可能会重用之前的请求结果。</h4>
<blockquote>
<p>说明：缓存有利于减少交互次数，减少交互的平均延迟。</p>
<p>正例：http 1.1 中，s-maxage 告诉服务器进行缓存，时间单位为秒，用法如下，</p>
<p>response.setHeader(&quot;Cache-Control&quot;, &quot;s-maxage=&quot; + cacheSeconds);</p>
</blockquote>
<h4 id="【推荐】服务端返回的数据-使用-json-格式而非-xml。" tabindex="-1"> 【推荐】服务端返回的数据，使用 JSON 格式而非 XML。</h4>
<blockquote>
<p>说明：尽管 HTTP 支持使用不同的输出格式，例如纯文本，JSON，CSV，XML，RSS 甚至 HTML。如果我们使用的面向用户的服务，应该选择 JSON 作为通信中使用的标准数据交换格式，包括请求和响应。此外， application/JSON 是一种通用的 MIME 类型，具有实用、精简、易读的特点。</p>
</blockquote>
<h4 id="【推荐】前后端的时间格式统一为-yyyy-mm-dd-hh-mm-ss-统一为-gmt。" tabindex="-1"> 【推荐】前后端的时间格式统一为&quot;yyyy-MM-dd HH:mm:ss&quot;，统一为 GMT。</h4>
<h4 id="【参考】在接口路径中不要加入版本号-版本控制在-http-头信息中体现-有利于向前兼容。" tabindex="-1"> 【参考】在接口路径中不要加入版本号，版本控制在 HTTP 头信息中体现，有利于向前兼容。</h4>
<p>说明：当用户在低版本与高版本之间反复切换工作时，会导致迁移复杂度升高，存在数据错乱风险。</p>
<h3 id="十一-其他" tabindex="-1"> (十一) 其他</h3>
<h4 id="【强制】在使用正则表达式时-利用好其预编译功能-可以有效加快正则匹配速度。" tabindex="-1"> 【强制】在使用正则表达式时，利用好其预编译功能，可以有效加快正则匹配速度。</h4>
<p>说明：不要在方法体内定义：Pattern pattern = Pattern.compile(&quot;规则&quot;);</p>
<h4 id="【强制】避免用-apache-beanutils-进行属性的-copy。" tabindex="-1"> 【强制】避免用 Apache Beanutils 进行属性的 copy。</h4>
<p>说明：Apache BeanUtils 性能较差，可以使用其他方案比如 Spring BeanUtils, Cglib BeanCopier，注意均是浅拷贝。</p>
<h4 id="【强制】velocity-调用-pojo-类的属性时-直接使用属性名取值即可-模板引擎会自动按规范调用-pojo-的-getxxx-如果是-boolean-基本数据类型变量-boolean-命名不需要加-is-前缀-会自动调用-isxxx-方法。" tabindex="-1"> 【强制】velocity 调用 POJO 类的属性时，直接使用属性名取值即可，模板引擎会自动按规范调用 POJO 的 getXxx()，如果是 boolean 基本数据类型变量（boolean 命名不需要加 is 前缀）， 会自动调用 isXxx()方法。</h4>
<p>说明：注意如果是 Boolean 包装类对象，优先调用 getXxx()的方法。</p>
<h4 id="【强制】后台输送给页面的变量必须加-var-中间的感叹号。" tabindex="-1"> 【强制】后台输送给页面的变量必须加$!{var}------中间的感叹号。</h4>
<p>说明：如果 var 等于 null 或者不存在，那么${var}会直接显示在页面上。</p>
<h4 id="【强制】注意-math-random-这个方法返回是-double-类型-注意取值的范围-0≤x-1-能够取到零值-注意除零异常-如果想获取整数类型的随机数-不要将-x-放大-10-的若干倍然后取整-直接使用-random-对象的-nextint-或者-nextlong-方法。" tabindex="-1"> 【强制】注意 Math.random() 这个方法返回是 double 类型，注意取值的范围 0≤x&lt;1（能够取到零值，注意除零异常），如果想获取整数类型的随机数，不要将 x 放大 10 的若干倍然后取整，直接使用 Random 对象的 nextInt 或者 nextLong 方法。</h4>
<h4 id="【推荐】不要在视图模板中加入任何复杂的逻辑。" tabindex="-1"> 【推荐】不要在视图模板中加入任何复杂的逻辑。</h4>
<p>说明：根据 MVC 理论，视图的职责是展示，不要抢模型和控制器的活。</p>
<h4 id="【推荐】任何数据结构的构造或初始化-都应指定大小-避免数据结构无限增长吃光内存。" tabindex="-1"> 【推荐】任何数据结构的构造或初始化，都应指定大小，避免数据结构无限增长吃光内存。</h4>
<h4 id="【推荐】及时清理不再使用的代码段或配置信息。" tabindex="-1"> 【推荐】及时清理不再使用的代码段或配置信息。</h4>
<p>说明：对于垃圾代码或过时配置，坚决清理干净，避免程序过度臃肿，代码冗余。</p>
<p>正例：对于暂时被注释掉，后续可能恢复使用的代码片断，在注释代码上方，统一规定使用三个斜杠(///) 来说明注释掉代码的理由。如：</p>
<blockquote>
<p>public static void hello() {</p>
<p>/// 业务方通知活动暂停</p>
<p>// Business business = new Business();</p>
<p>// business.active(); System.out.println(&quot;it's finished&quot;);</p>
<p>}</p>
</blockquote>
<h2 id="二、异常日志" tabindex="-1"> 二、异常日志</h2>
<h3 id="一-错误码" tabindex="-1"> (一) 错误码</h3>
<h4 id="【强制】错误码的制定原则-快速溯源、沟通标准化。" tabindex="-1"> 【强制】错误码的制定原则：快速溯源、沟通标准化。</h4>
<p>说明： 错误码想得过于完美和复杂，就像康熙字典中的生僻字一样，用词似乎精准，但是字典不容易随身携带并且简单易懂。</p>
<p>正例：错误码回答的问题是谁的错？错在哪？1）错误码必须能够快速知晓错误来源，可快速判断是谁的问题。2）错误码必须能够进行清晰地比对（代码中容易equals）。3）错误码有利于团队快速对错误原因达到一致认知。</p>
<h4 id="【强制】错误码不体现版本号和错误等级信息。" tabindex="-1"> 【强制】错误码不体现版本号和错误等级信息。</h4>
<p>说明：错误码以不断追加的方式进行兼容。错误等级由日志和错误码本身的释义来决定。</p>
<h4 id="【强制】全部正常-但不得不填充错误码时返回五个零-00000。" tabindex="-1"> 【强制】全部正常，但不得不填充错误码时返回五个零：00000。</h4>
<h4 id="【强制】错误码为字符串类型-共-5-位-分成两个部分-错误产生来源-四位数字编号。" tabindex="-1"> 【强制】错误码为字符串类型，共 5 位，分成两个部分：错误产生来源+四位数字编号。</h4>
<p>说明：错误产生来源分为 A/B/C，A 表示错误来源于用户，比如参数错误，用户安装版本过低，用户支付超时等问题；B 表示错误来源于当前系统，往往是业务逻辑出错，或程序健壮性差等问题；C 表示错误来源于第三方服务，比如 CDN 服务出错，消息投递超时等问题；四位数字编号从 0001 到 9999，大类之间的步长间距预留 100，参考文末。</p>
<h4 id="【强制】编号不与公司业务架构-更不与组织架构挂钩-以先到先得的原则在统一平台上进行-审批生效-编号即被永久固定。" tabindex="-1"> 【强制】编号不与公司业务架构，更不与组织架构挂钩，以先到先得的原则在统一平台上进行， 审批生效，编号即被永久固定。</h4>
<h4 id="【强制】错误码使用者避免随意定义新的错误码。" tabindex="-1"> 【强制】错误码使用者避免随意定义新的错误码。</h4>
<p>说明：尽可能在原有错误码附表中找到语义相同或者相近的错误码在代码中使用即可。</p>
<h4 id="【强制】错误码不能直接输出给用户作为提示信息使用。" tabindex="-1"> 【强制】错误码不能直接输出给用户作为提示信息使用。</h4>
<p>说明：堆栈（stack_trace）、错误信息(error_message)、错误码（error_code）、提示信息（user_tip） 是一个有效关联并互相转义的和谐整体，但是请勿互相越俎代庖。</p>
<h4 id="【推荐】错误码之外的业务独特信息由-error-message-来承载-而不是让错误码本身涵盖过多具体业务属性。" tabindex="-1"> 【推荐】错误码之外的业务独特信息由 error_message 来承载，而不是让错误码本身涵盖过多具体业务属性。</h4>
<h4 id="【推荐】在获取第三方服务错误码时-向上抛出允许本系统转义-由-c-转为-b-并且在错误信息上带上原有的第三方错误码。" tabindex="-1"> 【推荐】在获取第三方服务错误码时，向上抛出允许本系统转义，由 C 转为 B，并且在错误信息上带上原有的第三方错误码。</h4>
<h4 id="【参考】错误码分为一级宏观错误码、二级宏观错误码、三级宏观错误码。" tabindex="-1"> 【参考】错误码分为一级宏观错误码、二级宏观错误码、三级宏观错误码。</h4>
<p>说明：在无法更加具体确定的错误场景中，可以直接使用一级宏观错误码，分别是：A0001（用户端错误）、</p>
<p>B0001（系统执行出错）、C0001（调用第三方服务出错）。</p>
<p>正例：调用第三方服务出错是一级，中间件错误是二级，消息服务出错是三级。</p>
<ol start="11">
<li>
<h4 id="【参考】错误码的后三位编号与-http-状态码没有任何关系。" tabindex="-1"> 【参考】错误码的后三位编号与 HTTP 状态码没有任何关系。</h4>
</li>
<li>
<h4 id="【参考】错误码有利于不同文化背景的开发者进行交流与代码协作。" tabindex="-1"> 【参考】错误码有利于不同文化背景的开发者进行交流与代码协作。</h4>
</li>
</ol>
<p>说明：英文单词形式的错误码不利于非英语母语国家（如阿拉伯语、希伯来语、俄罗斯语等）之间的开发者互相协作。</p>
<h4 id="【参考】错误码即人性-感性认知-口口相传-使用纯数字来进行错误码编排不利于感性记忆和分类。" tabindex="-1"> 【参考】错误码即人性，感性认知+口口相传，使用纯数字来进行错误码编排不利于感性记忆和分类。</h4>
<p>说明：数字是一个整体，每位数字的地位和含义是相同的。</p>
<p>反例：一个五位数字 12345，第 1 位是错误等级，第 2 位是错误来源，345 是编号，人的大脑不会主动地拆开并分辨每位数字的不同含义。</p>
<h3 id="二-异常处理" tabindex="-1"> (二) 异常处理</h3>
<ol>
<li>【强制】Java 类库中定义的可以通过预检查方式规避的 RuntimeException 异常不应该通过catch 的方式来处理，比如：NullPointerException，IndexOutOfBoundsException 等等。说明：无法通过预检查的异常除外，比如，在解析字符串形式的数字时，可能存在数字格式错误，不得不 通过 catch NumberFormatException 来实现。</li>
</ol>
<p>正例：if (obj != null) {...}</p>
<p>反例：try { obj.method(); } catch (NullPointerException e) {...}</p>
<h4 id="【强制】异常捕获后不要用来做流程控制-条件控制。" tabindex="-1"> 【强制】异常捕获后不要用来做流程控制，条件控制。</h4>
<p>说明：异常设计的初衷是解决程序运行中的各种意外情况，且异常的处理效率比条件判断方式要低很多。</p>
<h4 id="【强制】catch-时请分清稳定代码和非稳定代码-稳定代码指的是无论如何不会出错的代码。对于非稳定代码的-catch-尽可能进行区分异常类型-再做对应的异常处理。" tabindex="-1"> 【强制】catch 时请分清稳定代码和非稳定代码，稳定代码指的是无论如何不会出错的代码。对于非稳定代码的 catch 尽可能进行区分异常类型，再做对应的异常处理。</h4>
<p>说明：对大段代码进行 try-catch，使程序无法根据不同的异常做出正确的应激反应，也不利于定位问题， 这是一种不负责任的表现。</p>
<p>正例：用户注册的场景中，如果用户输入非法字符，或用户名称已存在，或用户输入密码过于简单，在程序上作出分门别类的判断，并提示给用户。</p>
<ol start="4">
<li>
<h4 id="【强制】捕获异常是为了处理它-不要捕获了却什么都不处理而抛弃之-如果不想处理它-请将该异常抛给它的调用者。最外层的业务使用者-必须处理异常-将其转化为用户可以理解的内容。" tabindex="-1"> 【强制】捕获异常是为了处理它，不要捕获了却什么都不处理而抛弃之，如果不想处理它，请将该异常抛给它的调用者。最外层的业务使用者，必须处理异常，将其转化为用户可以理解的内容。</h4>
</li>
<li>
<h4 id="【强制】事务场景中-抛出异常被-catch-后-如果需要回滚-一定要注意手动回滚事务。" tabindex="-1"> 【强制】事务场景中，抛出异常被 catch 后，如果需要回滚，一定要注意手动回滚事务。</h4>
</li>
<li>
<h4 id="【强制】finally-块必须对资源对象、流对象进行关闭-有异常也要做-try-catch。" tabindex="-1"> 【强制】finally 块必须对资源对象、流对象进行关闭，有异常也要做 try-catch。</h4>
</li>
</ol>
<p>说明：如果 JDK7 及以上，可以使用 try-with-resources 方式。</p>
<h4 id="【强制】不要在-finally-块中使用-return。" tabindex="-1"> 【强制】不要在 finally 块中使用 return。</h4>
<blockquote>
<p>说明：try 块中的 return 语句执行成功后，并不马上返回，而是继续执行 finally 块中的语句，如果此处存在 return 语句，则在此直接返回，无情丢弃掉try 块中的返回点。</p>
<p>反例：</p>
<p>private int x = 0;</p>
<p>public int checkReturn() { try {</p>
<p>// x 等于 1，此处不返回return ++x;</p>
<p>} finally {</p>
<p>// 返回的结果是 2 return ++x;</p>
<p>}</p>
<p>}</p>
</blockquote>
<h4 id="【强制】捕获异常与抛异常-必须是完全匹配-或者捕获异常是抛异常的父类。" tabindex="-1"> 【强制】捕获异常与抛异常，必须是完全匹配，或者捕获异常是抛异常的父类。</h4>
<p>说明：如果预期对方抛的是绣球，实际接到的是铅球，就会产生意外情况。</p>
<h4 id="【强制】在调用-rpc、二方包、或动态生成类的相关方法时-捕捉异常必须使用-throwable" tabindex="-1"> 【强制】在调用 RPC、二方包、或动态生成类的相关方法时，捕捉异常必须使用 Throwable</h4>
<h4 id="类来进行拦截。" tabindex="-1"> 类来进行拦截。</h4>
<p>说明：通过反射机制来调用方法，如果找不到方法，抛出 NoSuchMethodException。什么情况会抛出NoSuchMethodError 呢？二方包在类冲突时，仲裁机制可能导致引入非预期的版本使类的方法签名不匹配， 或者在字节码修改框架（比如：ASM）动态创建或修改类时，修改了相应的方法签名。这些情况，即使代码编译期是正确的，但在代码运行期时，会抛出 NoSuchMethodError。</p>
<h4 id="【推荐】方法的返回值可以为-null-不强制返回空集合-或者空对象等-必须添加注释充分说明什么情况下会返回-null-值。" tabindex="-1"> 【推荐】方法的返回值可以为 null，不强制返回空集合，或者空对象等，必须添加注释充分说明什么情况下会返回 null 值。</h4>
<p>说明：本手册明确防止 NPE 是调用者的责任。即使被调用方法返回空集合或者空对象，对调用者来说，也并非高枕无忧，必须考虑到远程调用失败、序列化失败、运行时异常等场景返回 null 的情况。</p>
<ol start="11">
<li>
<p>【推荐】防止 NPE，是程序员的基本修养，注意 NPE 产生的场景：</p>
<ol>
<li>
<p>返回类型为基本数据类型，return 包装数据类型的对象时，自动拆箱有可能产生 NPE。反例：public int f() { return Integer 对象}， 如果为 null，自动解箱抛 NPE。</p>
</li>
<li>
<p>数据库的查询结果可能为 null。</p>
</li>
<li>
<p>集合里的元素即使 isNotEmpty，取出的数据元素也可能为 null。4） 远程调用返回对象时，一律要求进行空指针判断，防止 NPE。</p>
</li>
</ol>
</li>
</ol>
<p> </p>
<ol start="5">
<li>
<p>对于 Session 中获取的数据，建议进行 NPE 检查，避免空指针。</p>
</li>
<li>
<p>级联调用 obj.getA().getB().getC()；一连串调用，易产生 NPE。正例：使用 JDK8 的 Optional 类来防止 NPE 问题。</p>
</li>
</ol>
<p> </p>
<ol start="12">
<li>
<h4 id="【推荐】定义时区分-unchecked-checked-异常-避免直接抛出-new-runtimeexception-更不允许抛出-exception-或者-throwable-应使用有业务含义的自定义异常。推荐业界已定义过的自定义异常-如-daoexception-serviceexception-等。" tabindex="-1"> 【推荐】定义时区分 unchecked / checked 异常，避免直接抛出 new RuntimeException()， 更不允许抛出 Exception 或者 Throwable，应使用有业务含义的自定义异常。推荐业界已定义过的自定义异常，如：DAOException / ServiceException 等。</h4>
</li>
<li>
<h4 id="【参考】对于公司外的-http-api-开放接口必须使用-errorcode-而应用内部推荐异常抛出-跨应用间-rpc-调用优先考虑使用-result-方式-封装-issuccess-方法、errorcode、errormessage-而应用内部直接抛出异常即可。" tabindex="-1"> 【参考】对于公司外的 http/api 开放接口必须使用 errorCode；而应用内部推荐异常抛出； 跨应用间 RPC 调用优先考虑使用 Result 方式，封装 isSuccess()方法、errorCode、errorMessage；而应用内部直接抛出异常即可。</h4>
</li>
</ol>
<p>说明：关于 RPC 方法返回方式使用 Result 方式的理由：</p>
<ol>
<li>
<p>使用抛异常返回方式，调用方如果没有捕获到就会产生运行时错误。</p>
</li>
<li>
<p>如果不加栈信息，只是 new 自定义异常，加入自己的理解的 error message，对于调用端解决问题的帮助不会太多。如果加了栈信息，在频繁调用出错的情况下，数据序列化和传输的性能损耗也是问题。</p>
</li>
</ol>
<h3 id="三-日志规约" tabindex="-1"> (三) 日志规约</h3>
<ol>
<li>【强制】应用中不可直接使用日志系统（Log4j、Logback）中的 API，而应依赖使用日志框架</li>
</ol>
<blockquote>
<p>（SLF4J、JCL--Jakarta Commons Logging）中的 API，使用门面模式的日志框架，有利于维护和各个类的日志处理方式统一。</p>
<p>说明：日志框架（SLF4J、JCL--Jakarta Commons Logging）的使用方式（推荐使用 SLF4J） 使用 SLF4J：</p>
<p>import org.slf4j.Logger; import org.slf4j.LoggerFactory;</p>
<p>private static final Logger logger = LoggerFactory.getLogger(Test.class);</p>
<p>使用 JCL：</p>
<p>import org.apache.commons.logging.Log; import org.apache.commons.logging.LogFactory;</p>
<p>private static final Log log = LogFactory.getLog(Test.class);</p>
</blockquote>
<h4 id="【强制】所有日志文件至少保存-15-天-因为有些异常具备以-周-为频次发生的特点。对于当天日志-以-应用名-log-来保存-保存在-home-admin-应用名-logs-目录下-过往日志格式为-logname-log-保存日期-日期格式-yyyy-mm-dd" tabindex="-1"> 【强制】所有日志文件至少保存 15 天，因为有些异常具备以&quot;周&quot;为频次发生的特点。对于当天日志，以&quot;应用名.log&quot;来保存，保存在/home/admin/应用名/logs/目录下，过往日志格式为: {logname}.log.{保存日期}，日期格式：yyyy-MM-dd</h4>
<p>正例：以 aap 应用为例，日志保存在/home/admin/aapserver/logs/aap.log，历史日志名称为</p>
<p>aap.log.2016-08-01</p>
<ol start="3">
<li>
<h4 id="【强制】根据国家法律-网络运行状态、网络安全事件、个人敏感信息操作等相关记录-留存的日志不少于六个月-并且进行网络多机备份。" tabindex="-1"> 【强制】根据国家法律，网络运行状态、网络安全事件、个人敏感信息操作等相关记录，留存的日志不少于六个月，并且进行网络多机备份。</h4>
</li>
<li>
<p>【强制】应用中的扩展日志（如打点、临时监控、访问日志等）命名方式： appName_logType_logName.log。logType:日志类型，如 stats/monitor/access 等；logName:日志描述。这种命名的好处：通过文件名就可知道日志文件属于什么应用，什么类型，什么目的，也有利于归类查找。</p>
</li>
</ol>
<blockquote>
<p>说明：推荐对日志进行分类，如将错误日志和业务日志分开存放，便于开发人员查看，也便于通过日志对系统进行及时监控。</p>
<p>正例：mppserver 应用中单独监控时区转换异常，如：mppserver_monitor_timeZoneConvert.log</p>
</blockquote>
<h4 id="【强制】在日志输出时-字符串变量之间的拼接使用占位符的方式。" tabindex="-1"> 【强制】在日志输出时，字符串变量之间的拼接使用占位符的方式。</h4>
<blockquote>
<p>说明：因为 String 字符串的拼接会使用 StringBuilder 的 append()方式，有一定的性能损耗。使用占位符仅是替换动作，可以有效提升性能。</p>
<p>正例：logger.debug(&quot;Processing trade with id: {} and symbol: {}&quot;, id, symbol);</p>
</blockquote>
<ol start="6">
<li>【强制】对于 trace/debug/info 级别的日志输出，必须进行日志级别的开关判断。</li>
</ol>
<blockquote>
<p>说明：虽然在 debug(参数)的方法体内第一行代码 isDisabled(Level.DEBUG_INT)为真时（Slf4j 的常见实现Log4j 和 Logback），就直接 return，但是参数可能会进行字符串拼接运算。此外，如果 debug(getName()) 这种参数内有 getName()方法调用，无谓浪费方法调用的开销。</p>
<p>正例：</p>
<p>// 如果判断为真，那么可以输出 trace 和 debug 级别的日志</p>
<p>if (logger.isDebugEnabled()) {</p>
<p>logger.debug(&quot;Current ID is: {} and name is: {}&quot;, id, getName());</p>
<p>}</p>
</blockquote>
<ol start="7">
<li>【强制】避免重复打印日志，浪费磁盘空间，务必在日志配置文件中设置 additivity=false。</li>
</ol>
<blockquote>
<p>正例：&lt;logger name=&quot;com.taobao.dubbo.config&quot; additivity=&quot;false&quot;&gt;</p>
</blockquote>
<h4 id="【强制】生产环境禁止直接使用-system-out-或system-err-输出日志或使用e-printstacktrace-打印异常堆栈。" tabindex="-1"> 【强制】生产环境禁止直接使用 System.out 或System.err 输出日志或使用e.printStackTrace()打印异常堆栈。</h4>
<blockquote>
<p>说明：标准日志输出与标准错误输出文件每次 Jboss 重启时才滚动，如果大量输出送往这两个文件，容易造成文件大小超过操作系统大小限制。</p>
</blockquote>
<h4 id="【强制】异常信息应该包括两类信息-案发现场信息和异常堆栈信息。如果不处理-那么通过关键字-throws-往上抛出。" tabindex="-1"> 【强制】异常信息应该包括两类信息：案发现场信息和异常堆栈信息。如果不处理，那么通过关键字 throws 往上抛出。</h4>
<blockquote>
<p>正例：logger.error(&quot;inputParams:{} and errorMessage:{}&quot;, 各类参数或者对象 toString(), e.getMessage(), e);</p>
</blockquote>
<h4 id="【强制】日志打印时禁止直接用-json-工具将对象转换成-string。" tabindex="-1"> 【强制】日志打印时禁止直接用 JSON 工具将对象转换成 String。</h4>
<p>说明：如果对象里某些 get 方法被覆写，存在抛出异常的情况，则可能会因为打印日志而影响正常业务流程的执行。</p>
<p>正例：打印日志时仅打印出业务相关属性值或者调用其对象的 toString()方法。</p>
<h4 id="【推荐】谨慎地记录日志。生产环境禁止输出-debug-日志-有选择地输出-info-日志-如果使用warn-来记录刚上线时的业务行为信息-一定要注意日志输出量的问题-避免把服务器磁盘撑爆-并记得及时删除这些观察日志。" tabindex="-1"> 【推荐】谨慎地记录日志。生产环境禁止输出 debug 日志；有选择地输出 info 日志；如果使用warn 来记录刚上线时的业务行为信息，一定要注意日志输出量的问题，避免把服务器磁盘撑爆，并记得及时删除这些观察日志。</h4>
<p>说明：大量地输出无效日志，不利于系统性能提升，也不利于快速定位错误点。记录日志时请思考：这些日志真的有人看吗？看到这条日志你能做什么？能不能给问题排查带来好处？</p>
<h4 id="【推荐】可以使用-warn-日志级别来记录用户输入参数错误的情况-避免用户投诉时-无所适从。如非必要-请不要在此场景打出-error-级别-避免频繁报警。" tabindex="-1"> 【推荐】可以使用 warn 日志级别来记录用户输入参数错误的情况，避免用户投诉时，无所适从。如非必要，请不要在此场景打出 error 级别，避免频繁报警。</h4>
<p>说明：注意日志输出的级别，error 级别只记录系统逻辑出错、异常或者重要的错误信息。</p>
<h4 id="【推荐】尽量用英文来描述日志错误信息-如果日志中的错误信息用英文描述不清楚的话使用中文描述即可-否则容易产生歧义。" tabindex="-1"> 【推荐】尽量用英文来描述日志错误信息，如果日志中的错误信息用英文描述不清楚的话使用中文描述即可，否则容易产生歧义。</h4>
<p>说明：国际化团队或海外部署的服务器由于字符集问题，使用全英文来注释和描述日志错误信息。</p>
<h2 id="三、单元测试" tabindex="-1"> 三、单元测试</h2>
<h4 id="【强制】好的单元测试必须遵守-air-原则。" tabindex="-1"> 【强制】好的单元测试必须遵守 AIR 原则。</h4>
<p>说明：单元测试在线上运行时，感觉像空气（AIR）一样感觉不到，但在测试质量的保障上，却是非常关键的。好的单元测试宏观上来说，具有自动化、独立性、可重复执行的特点。</p>
<ul>
<li>
<p>A：Automatic（自动化）</p>
</li>
<li>
<p>I：Independent（独立性）</p>
</li>
<li>
<p>R：Repeatable（可重复）</p>
</li>
</ul>
<ol start="2">
<li>
<h4 id="【强制】单元测试应该是全自动执行的-并且非交互式的。测试用例通常是被定期执行的-执行过程必须完全自动化才有意义。输出结果需要人工检查的测试不是一个好的单元测试。单元测试中不准使用-system-out-来进行人肉验证-必须使用-assert-来验证。" tabindex="-1"> 【强制】单元测试应该是全自动执行的，并且非交互式的。测试用例通常是被定期执行的，执行过程必须完全自动化才有意义。输出结果需要人工检查的测试不是一个好的单元测试。单元测试中不准使用 System.out 来进行人肉验证，必须使用 assert 来验证。</h4>
</li>
<li>
<h4 id="【强制】保持单元测试的独立性。为了保证单元测试稳定可靠且便于维护-单元测试用例之间决不能互相调用-也不能依赖执行的先后次序。" tabindex="-1"> 【强制】保持单元测试的独立性。为了保证单元测试稳定可靠且便于维护，单元测试用例之间决不能互相调用，也不能依赖执行的先后次序。</h4>
</li>
</ol>
<p>反例：method2 需要依赖 method1 的执行，将执行结果作为 method2 的输入。</p>
<h4 id="【强制】单元测试是可以重复执行的-不能受到外界环境的影响。" tabindex="-1"> 【强制】单元测试是可以重复执行的，不能受到外界环境的影响。</h4>
<p>说明：单元测试通常会被放到持续集成中，每次有代码 check in 时单元测试都会被执行。如果单测对外部环境（网络、服务、中间件等）有依赖，容易导致持续集成机制的不可用。</p>
<p>正例：为了不受外界环境影响，要求设计代码时就把 SUT 的依赖改成注入，在测试时用 spring 这样的 DI</p>
<p>框架注入一个本地（内存）实现或者 Mock 实现。</p>
<h4 id="【强制】对于单元测试-要保证测试粒度足够小-有助于精确定位问题。单测粒度至多是类级别-一般是方法级别。" tabindex="-1"> 【强制】对于单元测试，要保证测试粒度足够小，有助于精确定位问题。单测粒度至多是类级别，一般是方法级别。</h4>
<p>说明：只有测试粒度小才能在出错时尽快定位到出错位置。单测不负责检查跨类或者跨系统的交互逻辑， 那是集成测试的领域。</p>
<h4 id="【强制】核心业务、核心应用、核心模块的增量代码确保单元测试通过。" tabindex="-1"> 【强制】核心业务、核心应用、核心模块的增量代码确保单元测试通过。</h4>
<p>说明：新增代码及时补充单元测试，如果新增代码影响了原有单元测试，请及时修正。</p>
<ol start="7">
<li>【强制】单元测试代码必须写在如下工程目录：src/test/java，不允许写在业务代码目录下。</li>
</ol>
<p>说明：源码编译时会跳过此目录，而单元测试框架默认是扫描此目录。</p>
<h4 id="【推荐】单元测试的基本目标-语句覆盖率达到-70-核心模块的语句覆盖率和分支覆盖率都要达到-100" tabindex="-1"> 【推荐】单元测试的基本目标：语句覆盖率达到 70%；核心模块的语句覆盖率和分支覆盖率都要达到 100%</h4>
<p>说明：在工程规约的应用分层中提到的 DAO 层，Manager 层，可重用度高的 Service，都应该进行单元测试。</p>
<ol start="9">
<li>
<h4 id="【推荐】编写单元测试代码遵守-bcde-原则-以保证被测试模块的交付质量。" tabindex="-1"> 【推荐】编写单元测试代码遵守 BCDE 原则，以保证被测试模块的交付质量。</h4>
<ul>
<li>
<p>B：Border，边界值测试，包括循环边界、特殊取值、特殊时间点、数据顺序等。</p>
</li>
<li>
<p>C：Correct，正确的输入，并得到预期的结果。</p>
</li>
<li>
<p>D：Design，与设计文档相结合，来编写单元测试。</p>
</li>
<li>
<p>E：Error，强制错误信息输入（如：非法数据、异常流程、业务允许外等），并得到预期的结果。</p>
</li>
</ul>
</li>
<li>
<h4 id="【推荐】对于数据库相关的查询-更新-删除等操作-不能假设数据库里的数据是存在的-或者直接操作数据库把数据插入进去-请使用程序插入或者导入数据的方式来准备数据。" tabindex="-1"> 【推荐】对于数据库相关的查询，更新，删除等操作，不能假设数据库里的数据是存在的，或者直接操作数据库把数据插入进去，请使用程序插入或者导入数据的方式来准备数据。</h4>
</li>
</ol>
<p>反例：删除某一行数据的单元测试，在数据库中，先直接手动增加一行作为删除目标，但是这一行新增数据并不符合业务插入规则，导致测试结果异常。</p>
<h4 id="【推荐】和数据库相关的单元测试-可以设定自动回滚机制-不给数据库造成脏数据。或者对单元测试产生的数据有明确的前后缀标识。" tabindex="-1"> 【推荐】和数据库相关的单元测试，可以设定自动回滚机制，不给数据库造成脏数据。或者对单元测试产生的数据有明确的前后缀标识。</h4>
<blockquote>
<p>正例：在阿里巴巴企业智能事业部的内部单元测试中，使用 <em>ENTERPRISE_INTELLIGENCE _UNIT_TEST_</em></p>
</blockquote>
<p>的前缀来标识单元测试相关代码。</p>
<ol start="12">
<li>
<h4 id="【推荐】对于不可测的代码在适当的时机做必要的重构-使代码变得可测-避免为了达到测试要求而书写不规范测试代码。" tabindex="-1"> 【推荐】对于不可测的代码在适当的时机做必要的重构，使代码变得可测，避免为了达到测试要求而书写不规范测试代码。</h4>
</li>
<li>
<h4 id="【推荐】在设计评审阶段-开发人员需要和测试人员一起确定单元测试范围-单元测试最好覆盖所有测试用例-uc-。" tabindex="-1"> 【推荐】在设计评审阶段，开发人员需要和测试人员一起确定单元测试范围，单元测试最好覆盖所有测试用例（UC）。</h4>
</li>
<li>
<h4 id="【推荐】单元测试作为一种质量保障手段-在项目提测前完成单元测试-不建议项目发布后补充单元测试用例。" tabindex="-1"> 【推荐】单元测试作为一种质量保障手段，在项目提测前完成单元测试，不建议项目发布后补充单元测试用例。</h4>
</li>
<li>
<h4 id="【参考】为了更方便地进行单元测试-业务代码应避免以下情况" tabindex="-1"> 【参考】为了更方便地进行单元测试，业务代码应避免以下情况：</h4>
<ul>
<li>
<p>构造方法中做的事情过多。</p>
</li>
<li>
<p>存在过多的全局变量和静态方法。</p>
</li>
<li>
<p>存在过多的外部依赖。</p>
</li>
<li>
<p>存在过多的条件语句。</p>
</li>
</ul>
</li>
</ol>
<blockquote>
<p>说明：多层条件语句建议使用卫语句、策略模式、状态模式等方式重构。</p>
</blockquote>
<ol start="16">
<li>
<h4 id="【参考】不要对单元测试存在如下误解" tabindex="-1"> 【参考】不要对单元测试存在如下误解：</h4>
<ul>
<li>
<p>那是测试同学干的事情。本文是开发手册，凡是本文内容都是与开发同学强相关的。</p>
</li>
<li>
<p>单元测试代码是多余的。系统的整体功能与各单元部件的测试正常与否是强相关的。</p>
</li>
<li>
<p>单元测试代码不需要维护。一年半载后，那么单元测试几乎处于废弃状态。</p>
</li>
<li>
<p>单元测试与线上故障没有辩证关系。好的单元测试能够最大限度地规避线上故障。</p>
</li>
</ul>
</li>
</ol>
<h2 id="四、安全规约" tabindex="-1"> 四、安全规约</h2>
<h4 id="【强制】隶属于用户个人的页面或者功能必须进行权限控制校验。" tabindex="-1"> 【强制】隶属于用户个人的页面或者功能必须进行权限控制校验。</h4>
<p>说明：防止没有做水平权限校验就可随意访问、修改、删除别人的数据，比如查看他人的私信内容。</p>
<h4 id="【强制】用户敏感数据禁止直接展示-必须对展示数据进行脱敏。" tabindex="-1"> 【强制】用户敏感数据禁止直接展示，必须对展示数据进行脱敏。</h4>
<p>说明：中国大陆个人手机号码显示：139****1219，隐藏中间 4 位，防止隐私泄露。</p>
<ol start="3">
<li>【强制】用户输入的 SQL 参数严格使用参数绑定或者 METADATA 字段值限定，防止 SQL 注入， 禁止字符串拼接 SQL 访问数据库。</li>
</ol>
<p>反例：某系统签名大量被恶意修改，即是因为对于危险字符 # --没有进行转义，导致数据库更新时，where</p>
<p>后边的信息被注释掉，对全库进行更新。</p>
<h4 id="【强制】用户请求传入的任何参数必须做有效性验证。" tabindex="-1"> 【强制】用户请求传入的任何参数必须做有效性验证。</h4>
<blockquote>
<p>说明：忽略参数校验可能导致：</p>
</blockquote>
<ul>
<li>
<p>page size 过大导致内存溢出</p>
</li>
<li>
<p>恶意 order by 导致数据库慢查询</p>
</li>
<li>
<p>缓存击穿</p>
</li>
<li>
<p>SSRF</p>
</li>
<li>
<p>任意重定向</p>
</li>
<li>
<p>SQL 注入，Shell 注入，反序列化注入</p>
</li>
<li>
<p>正则输入源串拒绝服务 ReDoS</p>
</li>
</ul>
<blockquote>
<p>Java 代码用正则来验证客户端的输入，有些正则写法验证普通用户输入没有问题，但是如果攻击人员使用的是特殊构造的字符串来验证，有可能导致死循环的结果。</p>
</blockquote>
<ol start="5">
<li>
<h4 id="【强制】禁止向-html-页面输出未经安全过滤或未正确转义的用户数据。" tabindex="-1"> 【强制】禁止向 HTML 页面输出未经安全过滤或未正确转义的用户数据。</h4>
</li>
<li>
<p>【强制】表单、AJAX 提交必须执行 CSRF 安全验证。</p>
</li>
</ol>
<p>说明：CSRF(Cross-site request forgery)跨站请求伪造是一类常见编程漏洞。对于存在 CSRF 漏洞的应用/ 网站，攻击者可以事先构造好 URL，只要受害者用户一访问，后台便在用户不知情的情况下对数据库中用户参数进行相应修改。</p>
<ol start="7">
<li>
<h4 id="【强制】url-外部重定向传入的目标地址必须执行白名单过滤。" tabindex="-1"> 【强制】URL 外部重定向传入的目标地址必须执行白名单过滤。</h4>
</li>
<li>
<h4 id="【强制】在使用平台资源-譬如短信、邮件、电话、下单、支付-必须实现正确的防重放的机制-如数量限制、疲劳度控制、验证码校验-避免被滥刷而导致资损。" tabindex="-1"> 【强制】在使用平台资源，譬如短信、邮件、电话、下单、支付，必须实现正确的防重放的机制，如数量限制、疲劳度控制、验证码校验，避免被滥刷而导致资损。</h4>
</li>
</ol>
<p>说明：如注册时发送验证码到手机，如果没有限制次数和频率，那么可以利用此功能骚扰到其它用户，并造成短信平台资源浪费。</p>
<h4 id="【推荐】发贴、评论、发送即时消息等用户生成内容的场景必须实现防刷、文本内容违禁词过滤等风控策略。" tabindex="-1"> 【推荐】发贴、评论、发送即时消息等用户生成内容的场景必须实现防刷、文本内容违禁词过滤等风控策略。</h4>
<h2 id="五、mysql-数据库" tabindex="-1"> 五、MySQL 数据库</h2>
<h3 id="一-建表规约" tabindex="-1"> (一) 建表规约</h3>
<h4 id="【强制】表达是与否概念的字段-必须使用-is-xxx-的方式命名-数据类型是-unsigned-tinyint" tabindex="-1"> 【强制】表达是与否概念的字段，必须使用 is_xxx 的方式命名，数据类型是 unsigned tinyint</h4>
<h4 id="_1-表示是-0-表示否-。" tabindex="-1"> （1 表示是，0 表示否）。</h4>
<blockquote>
<p>说明：任何字段如果为非负数，必须是 unsigned。</p>
<p>注意：POJO 类中的任何布尔类型的变量，都不要加 is 前缀，所以，需要在&lt;resultMap&gt;设置从 is_xxx 到Xxx 的映射关系。数据库表示是与否的值，使用 tinyint 类型，坚持 is_xxx 的命名方式是为了明确其取值含义与取值范围。</p>
<p>正例：表达逻辑删除的字段名 is_deleted，1 表示删除，0 表示未删除。</p>
</blockquote>
<ol start="2">
<li>【强制】表名、字段名必须使用小写字母或数字，禁止出现数字开头，禁止两个下划线中间只出现数字。数据库字段名的修改代价很大，因为无法进行预发布，所以字段名称需要慎重考虑。说明：MySQL 在 Windows 下不区分大小写，但在 Linux 下默认是区分大小写。因此，数据库名、表名、字段名，都不允许出现任何大写字母，避免节外生枝。</li>
</ol>
<p>正例：aliyun_admin，rdc_config，level3_name 反例：AliyunAdmin，rdcConfig，level_3_name</p>
<h4 id="【强制】表名不使用复数名词。" tabindex="-1"> 【强制】表名不使用复数名词。</h4>
<p>说明：表名应该仅仅表示表里面的实体内容，不应该表示实体数量，对应于 DO 类名也是单数形式，符合表达习惯。</p>
<h4 id="【强制】禁用保留字-如-desc、range、match、delayed-等-请参考-mysql-官方保留字。" tabindex="-1"> 【强制】禁用保留字，如 desc、range、match、delayed 等，请参考 MySQL 官方保留字。</h4>
<h4 id="【强制】主键索引名为-pk-字段名-唯一索引名为-uk-字段名-普通索引名则为-idx-字段名。" tabindex="-1"> 【强制】主键索引名为 pk_字段名；唯一索引名为 uk_字段名；普通索引名则为 idx_字段名。</h4>
<p>说明：pk_ 即 primary key；uk_ 即 unique key；idx_ 即 index 的简称。</p>
<h4 id="【强制】小数类型为-decimal-禁止使用-float-和-double。" tabindex="-1"> 【强制】小数类型为 decimal，禁止使用 float 和 double。</h4>
<p>说明：在存储的时候，float 和 double 都存在精度损失的问题，很可能在比较值的时候，得到不正确的结果。如果存储的数据范围超过 decimal 的范围，建议将数据拆成整数和小数并分开存储。</p>
<h4 id="【强制】如果存储的字符串长度几乎相等-使用-char-定长字符串类型。" tabindex="-1"> 【强制】如果存储的字符串长度几乎相等，使用 char 定长字符串类型。</h4>
<h4 id="【强制】varchar-是可变长字符串-不预先分配存储空间-长度不要超过-5000-如果存储长度大于此值-定义字段类型为-text-独立出来一张表-用主键来对应-避免影响其它字段索引效率。" tabindex="-1"> 【强制】varchar 是可变长字符串，不预先分配存储空间，长度不要超过 5000，如果存储长度大于此值，定义字段类型为 text，独立出来一张表，用主键来对应，避免影响其它字段索引效率。</h4>
<h4 id="【强制】表必备三字段-id-create-time-update-time。" tabindex="-1"> 【强制】表必备三字段：id, create_time, update_time。</h4>
<p>说明：其中 id 必为主键，类型为bigint unsigned、单表时自增、步长为 1。create_time, update_time</p>
<p>的类型均为 datetime 类型，前者现在时表示主动式创建，后者过去分词表示被动式更新。</p>
<h4 id="【推荐】表的命名最好是遵循-业务名称-表的作用-。" tabindex="-1"> 【推荐】表的命名最好是遵循&quot;业务名称_表的作用&quot;。</h4>
<p>正例：alipay_task / force_project / trade_config</p>
<h4 id="【推荐】库名与应用名称尽量一致。" tabindex="-1"> 【推荐】库名与应用名称尽量一致。</h4>
<h4 id="【推荐】如果修改字段含义或对字段表示的状态追加时-需要及时更新字段注释。" tabindex="-1"> 【推荐】如果修改字段含义或对字段表示的状态追加时，需要及时更新字段注释。</h4>
<h4 id="【推荐】字段允许适当冗余-以提高查询性能-但必须考虑数据一致。冗余字段应遵循" tabindex="-1"> 【推荐】字段允许适当冗余，以提高查询性能，但必须考虑数据一致。冗余字段应遵循：</h4>
<pre><code>1.  不是频繁修改的字段。

2.  不是唯一索引的字段。

3.  不是 varchar 超长字段，更不能是text 字段。
</code></pre>
<blockquote>
<p>正例：各业务线经常冗余存储商品名称，避免查询时需要调用 IC 服务获取。</p>
</blockquote>
<h4 id="【推荐】单表行数超过-500-万行或者单表容量超过-2gb-才推荐进行分库分表。" tabindex="-1"> 【推荐】单表行数超过 500 万行或者单表容量超过 2GB，才推荐进行分库分表。</h4>
<p>说明：如果预计三年后的数据量根本达不到这个级别，请不要在创建表时就分库分表。</p>
<h4 id="【参考】合适的字符存储长度-不但节约数据库表空间、节约索引存储-更重要的是提升检索速度。" tabindex="-1"> 【参考】合适的字符存储长度，不但节约数据库表空间、节约索引存储，更重要的是提升检索速度。</h4>
<p>正例：无符号值可以避免误存负数，且扩大了表示范围。</p>
<p>+------------+--------------+---------------------+--------+----------------------------------+
| &gt; 对象     | &gt; 年龄区间   | &gt; 类型              | &gt; 字节 | &gt; 表示范围                       |
+============+==============+=====================+========+==================================+
| &gt; 人       | &gt; 150 岁之内 | &gt; tinyint unsigned  | &gt; 1    | &gt; 无符号值：0 到 255             |
+------------+--------------+---------------------+--------+----------------------------------+
| &gt; 龟       | &gt; 数百岁     | &gt; smallint unsigned | &gt; 2    | &gt; 无符号值：0 到 65535           |
+------------+--------------+---------------------+--------+----------------------------------+
| &gt; 恐龙化石 | &gt; 数千万年   | &gt; int unsigned      | &gt; 4    | &gt; 无符号值：0 到约 43 亿         |
+------------+--------------+---------------------+--------+----------------------------------+
| &gt; 太阳     | &gt; 约 50 亿年 | &gt; bigint unsigned   | &gt; 8    | &gt; 无符号值：0 到约 10 的 19 次方 |
+------------+--------------+---------------------+--------+----------------------------------+</p>
<h3 id="二-索引规约" tabindex="-1"> (二) 索引规约</h3>
<h4 id="【强制】业务上具有唯一特性的字段-即使是组合字段-也必须建成唯一索引。" tabindex="-1"> 【强制】业务上具有唯一特性的字段，即使是组合字段，也必须建成唯一索引。</h4>
<p>说明：不要以为唯一索引影响了 insert 速度，这个速度损耗可以忽略，但提高查找速度是明显的；另外， 即使在应用层做了非常完善的校验控制，只要没有唯一索引，根据墨菲定律，必然有脏数据产生。</p>
<h4 id="【强制】超过三个表禁止-join。需要-join-的字段-数据类型保持绝对一致-多表关联查询时-保证被关联的字段需要有索引。" tabindex="-1"> 【强制】超过三个表禁止 join。需要 join 的字段，数据类型保持绝对一致；多表关联查询时， 保证被关联的字段需要有索引。</h4>
<p>说明：即使双表 join 也要注意表索引、SQL 性能。</p>
<h4 id="【强制】在-varchar-字段上建立索引时-必须指定索引长度-没必要对全字段建立索引-根据实际文本区分度决定索引长度。" tabindex="-1"> 【强制】在 varchar 字段上建立索引时，必须指定索引长度，没必要对全字段建立索引，根据实际文本区分度决定索引长度。</h4>
<p>说明：索引的长度与区分度是一对矛盾体，一般对字符串类型数据，长度为 20 的索引，区分度会高达 90%</p>
<p>以上，可以使用 count(distinct left(列名, 索引长度))/count(*)的区分度来确定。</p>
<h4 id="【强制】页面搜索严禁左模糊或者全模糊-如果需要请走搜索引擎来解决。" tabindex="-1"> 【强制】页面搜索严禁左模糊或者全模糊，如果需要请走搜索引擎来解决。</h4>
<p>说明：索引文件具有 B-Tree 的最左前缀匹配特性，如果左边的值未确定，那么无法使用此索引。</p>
<h4 id="【推荐】如果有-order-by-的场景-请注意利用索引的有序性。order-by-最后的字段是组合索引的一部分-并且放在索引组合顺序的最后-避免出现-file-sort-的情况-影响查询性能。" tabindex="-1"> 【推荐】如果有 order by 的场景，请注意利用索引的有序性。order by 最后的字段是组合索引的一部分，并且放在索引组合顺序的最后，避免出现 file_sort 的情况，影响查询性能。</h4>
<p>正例：where a=? and b=? order by c; 索引：a_b_c</p>
<p>反例：索引如果存在范围查询，那么索引有序性无法利用，如：WHERE a&gt;10 ORDER BY b; 索引 a_b 无法排序。</p>
<h4 id="【推荐】利用覆盖索引来进行查询操作-避免回表。" tabindex="-1"> 【推荐】利用覆盖索引来进行查询操作，避免回表。</h4>
<p>说明：如果一本书需要知道第 11 章是什么标题，会翻开第 11 章对应的那一页吗？目录浏览一下就好，这个目录就是起到覆盖索引的作用。</p>
<p>正例：能够建立索引的种类分为主键索引、唯一索引、普通索引三种，而覆盖索引只是一种查询的一种效果，用 explain 的结果，extra 列会出现：using index。</p>
<h4 id="【推荐】利用延迟关联或者子查询优化超多分页场景。" tabindex="-1"> 【推荐】利用延迟关联或者子查询优化超多分页场景。</h4>
<p>说明：MySQL 并不是跳过 offset 行，而是取 offset+N 行，然后返回放弃前 offset 行，返回 N 行，那当offset 特别大的时候，效率就非常的低下，要么控制返回的总页数，要么对超过特定阈值的页数进行 SQL 改写。</p>
<p>正例：先快速定位需要获取的 id 段，然后再关联：</p>
<blockquote>
<p>SELECT t1.* FROM 表 1 as t1, (select id from 表 1 where 条 件 LIMIT 100000,20 ) as t2 where t1.id=t2.id</p>
</blockquote>
<h4 id="【推荐】sql-性能优化的目标-至少要达到-range-级别-要求是-ref-级别-如果可以是-consts-最好。" tabindex="-1"> 【推荐】SQL 性能优化的目标：至少要达到 range 级别，要求是 ref 级别，如果可以是 consts 最好。</h4>
<p>说明：</p>
<ol>
<li>
<p>consts 单表中最多只有一个匹配行（主键或者唯一索引），在优化阶段即可读取到数据。</p>
</li>
<li>
<p>ref 指的是使用普通的索引（normal index）。3） range 对索引进行范围检索。</p>
</li>
</ol>
<p>反例：explain 表的结果，type=index，索引物理文件全扫描，速度非常慢，这个 index 级别比较 range</p>
<p>还低，与全表扫描是小巫见大巫。</p>
<h4 id="【推荐】建组合索引的时候-区分度最高的在最左边。" tabindex="-1"> 【推荐】建组合索引的时候，区分度最高的在最左边。</h4>
<p>正例：如果 where a=? and b=?，a 列的几乎接近于唯一值，那么只需要单建 idx_a 索引即可。</p>
<p>说明：存在非等号和等号混合判断条件时，在建索引时，请把等号条件的列前置。如：where c&gt;? and d=?</p>
<p>那么即使 c 的区分度更高，也必须把d 放在索引的最前列，即建立组合索引 idx_d_c。</p>
<h4 id="【推荐】防止因字段类型不同造成的隐式转换-导致索引失效。" tabindex="-1"> 【推荐】防止因字段类型不同造成的隐式转换，导致索引失效。</h4>
<h4 id="【参考】创建索引时避免有如下极端误解" tabindex="-1"> 【参考】创建索引时避免有如下极端误解：</h4>
<p> </p>
<ol>
<li>
<p>索引宁滥勿缺。认为一个查询就需要建一个索引。</p>
</li>
<li>
<p>吝啬索引的创建。认为索引会消耗空间、严重拖慢记录的更新以及行的新增速度。</p>
</li>
<li>
<p>抵制惟一索引。认为惟一索引一律需要在应用层通过&quot;先查后插&quot;方式解决。</p>
</li>
</ol>
<h3 id="三-sql-语句" tabindex="-1"> (三) SQL 语句</h3>
<h4 id="【强制】不要使用-count-列名-或-count-常量-来替代-count-count-是-sql92-定义的标准统计行数的语法-跟数据库无关-跟-null-和非-null-无关。" tabindex="-1"> 【强制】不要使用 count(列名)或 count(常量)来替代 count(*)，count(*)是 SQL92 定义的标准统计行数的语法，跟数据库无关，跟 NULL 和非 NULL 无关。</h4>
<p>说明：count(*)会统计值为 NULL 的行，而 count(列名)不会统计此列为 NULL 值的行。</p>
<ol start="2">
<li>
<h4 id="【强制】count-distinct-col-计算该列除null-之外的不重复行数-注意-count-distinct-col1-col2-如果其中一列全为-null-那么即使另一列有不同的值-也返回为-0。" tabindex="-1"> 【强制】count(distinct col) 计算该列除NULL 之外的不重复行数，注意 count(distinct col1, col2) 如果其中一列全为 NULL，那么即使另一列有不同的值，也返回为 0。</h4>
</li>
<li>
<h4 id="【强制】当某一列的值全是-null-时-count-col-的返回结果为-0-但-sum-col-的返回结果为null-因此使用-sum-时需注意-npe-问题。" tabindex="-1"> 【强制】当某一列的值全是 NULL 时，count(col)的返回结果为 0，但 sum(col)的返回结果为NULL，因此使用 sum()时需注意 NPE 问题。</h4>
</li>
</ol>
<p>正例：可以使用如下方式来避免 sum 的 NPE 问题：SELECT IFNULL(SUM(column), 0) FROM table;</p>
<ol start="4">
<li>【强制】使用 ISNULL()来判断是否为 NULL 值。</li>
</ol>
<p>说明：NULL 与任何值的直接比较都为 NULL。</p>
<ol>
<li>
<p>NULL&lt;&gt;NULL 的返回结果是 NULL，而不是 false。</p>
</li>
<li>
<p>NULL=NULL 的返回结果是 NULL，而不是 true。</p>
</li>
<li>
<p>NULL&lt;&gt;1 的返回结果是 NULL，而不是 true。</p>
</li>
</ol>
<p>反例：在 SQL 语句中，如果在 null 前换行，影响可读性。select * from table where column1 is null and column3 is not null; 而`ISNULL(column)`是一个整体，简洁易懂。从性能数据上分析，`ISNULL(column)` 执行效率更快一些。</p>
<ol start="5">
<li>
<h4 id="【强制】代码中写分页查询逻辑时-若-count-为-0-应直接返回-避免执行后面的分页语句。" tabindex="-1"> 【强制】代码中写分页查询逻辑时，若 count 为 0 应直接返回，避免执行后面的分页语句。</h4>
</li>
<li>
<h4 id="【强制】不得使用外键与级联-一切外键概念必须在应用层解决。" tabindex="-1"> 【强制】不得使用外键与级联，一切外键概念必须在应用层解决。</h4>
</li>
</ol>
<p>说明：（概念解释）学生表中的 student_id 是主键，那么成绩表中的 student_id 则为外键。如果更新学生表中的 student_id，同时触发成绩表中的 student_id 更新，即为级联更新。外键与级联更新适用于单机低并发，不适合分布式、高并发集群；级联更新是强阻塞，存在数据库更新风暴的风险；外键影响数据库的插入速度。</p>
<ol start="7">
<li>
<h4 id="【强制】禁止使用存储过程-存储过程难以调试和扩展-更没有移植性。" tabindex="-1"> 【强制】禁止使用存储过程，存储过程难以调试和扩展，更没有移植性。</h4>
</li>
<li>
<h4 id="【强制】数据订正-特别是删除或修改记录操作-时-要先-select-避免出现误删除-确认无误才能执行更新语句。" tabindex="-1"> 【强制】数据订正（特别是删除或修改记录操作）时，要先 select，避免出现误删除，确认无误才能执行更新语句。</h4>
</li>
<li>
<h4 id="【强制】对于数据库中表记录的查询和变更-只要涉及多个表-都需要在列名前加表的别名-或表名-进行限定。" tabindex="-1"> 【强制】对于数据库中表记录的查询和变更，只要涉及多个表，都需要在列名前加表的别名（或表名）进行限定。</h4>
</li>
</ol>
<p>说明：对多表进行查询记录、更新记录、删除记录时，如果对操作列没有限定表的别名（或表名），并且操作列在多个表中存在时，就会抛异常。</p>
<p>正例：select t1.name from table_first as t1 , table_second as t2 where t1.id=t2.id;</p>
<p>反例：在某业务中，由于多表关联查询语句没有加表的别名（或表名）的限制，正常运行两年后，最近在某个表中增加一个同名字段，在预发布环境做数据库变更后，线上查询语句出现出 1052 异常：Column 'name' in field list is ambiguous。</p>
<h4 id="【推荐】sql-语句中表的别名前加-as-并且以-t1、t2、t3、-的顺序依次命名。" tabindex="-1"> 【推荐】SQL 语句中表的别名前加 as，并且以 t1、t2、t3、...的顺序依次命名。</h4>
<p>说明：1）别名可以是表的简称，或者是依照表在 SQL 语句中出现的顺序，以 t1、t2、t3 的方式命名。2） 别名前加 as 使别名更容易识别。</p>
<p>正例：select t1.name from table_first as t1, table_second as t2 where t1.id=t2.id;</p>
<ol start="11">
<li>
<h4 id="【推荐】in-操作能避免则避免-若实在避免不了-需要仔细评估-in-后边的集合元素数量-控制在-1000-个之内。" tabindex="-1"> 【推荐】in 操作能避免则避免，若实在避免不了，需要仔细评估 in 后边的集合元素数量，控制在 1000 个之内。</h4>
</li>
<li>
<h4 id="【参考】因国际化需要-所有的字符存储与表示-均采用-utf8-字符集-那么字符计数方法需要注意。" tabindex="-1"> 【参考】因国际化需要，所有的字符存储与表示，均采用 utf8 字符集，那么字符计数方法需要注意。</h4>
</li>
</ol>
<p>说明：</p>
<blockquote>
<p>SELECT LENGTH(&quot;轻松工作&quot;)； 返回为 12</p>
<p>SELECT CHARACTER_LENGTH(&quot;轻松工作&quot;)； 返回为 4</p>
<p>如果需要存储表情，那么选择 utf8mb4 来进行存储，注意它与 utf8 编码的区别。</p>
</blockquote>
<ol start="13">
<li>【参考】TRUNCATE TABLE 比 DELETE 速度快，且使用的系统和事务日志资源少，但 TRUNCATE</li>
</ol>
<h4 id="无事务且不触发-trigger-有可能造成事故-故不建议在开发代码中使用此语句。" tabindex="-1"> 无事务且不触发 trigger，有可能造成事故，故不建议在开发代码中使用此语句。</h4>
<p>说明：TRUNCATE TABLE 在功能上与不带 WHERE 子句的 DELETE 语句相同。</p>
<h3 id="四-orm-映射" tabindex="-1"> (四) ORM 映射</h3>
<ol>
<li>
<p>【强制】在表查询中，一律不要使用 * 作为查询的字段列表，需要哪些字段必须明确写明。说明：1）增加查询分析器解析成本。2）增减字段容易与 resultMap 配置不一致。3）无用字段增加网络消耗，尤其是 text 类型的字段。</p>
</li>
<li>
<h4 id="【强制】pojo-类的布尔属性不能加-is-而数据库字段必须加-is-要求在-resultmap-中进行字段与属性之间的映射。" tabindex="-1"> 【强制】POJO 类的布尔属性不能加 is，而数据库字段必须加 is_，要求在 resultMap 中进行字段与属性之间的映射。</h4>
</li>
</ol>
<p>说明：参见定义 POJO 类以及数据库字段定义规定，在 sql.xml 增加映射，是必须的。</p>
<h4 id="【强制】不要用-resultclass-当返回参数-即使所有类属性名与数据库字段一一对应-也需要定义-resultmap-反过来-每一个表也必然有一个-resultmap-与之对应。" tabindex="-1"> 【强制】不要用 resultClass 当返回参数，即使所有类属性名与数据库字段一一对应，也需要定义&lt;resultMap&gt;；反过来，每一个表也必然有一个&lt;resultMap&gt;与之对应。</h4>
<p>说明：配置映射关系，使字段与 DO 类解耦，方便维护。</p>
<ol start="4">
<li>
<p>【强制】sql.xml 配置参数使用：#{}，#param# 不要使用${} 此种方式容易出现 SQL 注入。</p>
</li>
<li>
<p>【强制】iBATIS 自带的 queryForList(String statementName,int start,int size)不推荐使用。说明：其实现方式是在数据库取到 statementName 对应的 SQL 语句的所有记录，再通过 subList 取start,size 的子集合。</p>
</li>
</ol>
<p>正例：</p>
<blockquote>
<p>Map&lt;String, Object&gt; map = new HashMap&lt;&gt;(16); map.put(&quot;start&quot;, start);</p>
<p>map.put(&quot;size&quot;, size);</p>
</blockquote>
<ol start="6">
<li>【强制】不允许直接拿 HashMap 与 Hashtable 作为查询结果集的输出。</li>
</ol>
<p>反例：某同学为避免写一个&lt;resultMap&gt;xxx&lt;/resultMap&gt;，直接使用 HashTable 来接收数据库返回结果，结果出现日常是把 bigint 转成 Long 值，而线上由于数据库版本不一样，解析成 BigInteger，导致线上问题。</p>
<ol start="7">
<li>
<h4 id="【强制】更新数据表记录时-必须同时更新记录对应的-update-time-字段值为当前时间。" tabindex="-1"> 【强制】更新数据表记录时，必须同时更新记录对应的 update_time 字段值为当前时间。</h4>
</li>
<li>
<h4 id="【推荐】不要写一个大而全的数据更新接口。传入为-pojo-类-不管是不是自己的目标更新字段-都进行-update-table-set-c1-value1-c2-value2-c3-value3-这是不对的。执行-sql-时-不要更新无改动的字段-一是易出错-二是效率低-三是增加-binlog-存储。" tabindex="-1"> 【推荐】不要写一个大而全的数据更新接口。传入为 POJO 类，不管是不是自己的目标更新字段，都进行 update table set c1=value1,c2=value2,c3=value3; 这是不对的。执行 SQL 时， 不要更新无改动的字段，一是易出错；二是效率低；三是增加 binlog 存储。</h4>
</li>
<li>
<h4 id="【参考】-transactional-事务不要滥用。事务会影响数据库的-qps-另外使用事务的地方需要考虑各方面的回滚方案-包括缓存回滚、搜索引擎回滚、消息补偿、统计修正等。" tabindex="-1"> 【参考】@Transactional 事务不要滥用。事务会影响数据库的 QPS，另外使用事务的地方需要考虑各方面的回滚方案，包括缓存回滚、搜索引擎回滚、消息补偿、统计修正等。</h4>
</li>
<li>
<h4 id="【参考】-isequal-中的-comparevalue-是与属性值对比的常量-一般是数字-表示相等时带上此条件-isnotempty-表示不为空且不为-null-时执行-isnotnull-表示不为-null-值时执行。" tabindex="-1"> 【参考】&lt;isEqual&gt;中的 compareValue 是与属性值对比的常量，一般是数字，表示相等时带上此条件；&lt;isNotEmpty&gt;表示不为空且不为 null 时执行；&lt;isNotNull&gt;表示不为 null 值时执行。</h4>
</li>
</ol>
<h2 id="六、工程结构" tabindex="-1"> 六、工程结构</h2>
<h3 id="一-应用分层" tabindex="-1"> (一) 应用分层</h3>
<h4 id="【推荐】根据业务架构实践-结合业界分层规范与流行技术框架分析-推荐分层结构如图所示-默认上层依赖于下层-箭头关系表示可直接依赖-如-开放-api-层可以依赖于-web-层" tabindex="-1"> 【推荐】根据业务架构实践，结合业界分层规范与流行技术框架分析，推荐分层结构如图所示， 默认上层依赖于下层，箭头关系表示可直接依赖，如：开放 API 层可以依赖于 Web 层</h4>
<h4 id="controller-层-也可以直接依赖于-service-层-依此类推" tabindex="-1"> （Controller 层），也可以直接依赖于 Service 层，依此类推：</h4>
<ul>
<li>
<p>开放 API 层：可直接封装 Service 接口暴露成 RPC 接口；通过 Web 封装成http 接口；网关控制层等。</p>
</li>
<li>
<p>终端显示层：各个端的模板渲染并执行显示的层。当前主要是 velocity 渲染，JS 渲染，JSP 渲染，移动端展示等。</p>
</li>
<li>
<p>Web 层：主要是对访问控制进行转发，各类基本参数校验，或者不复用的业务简单处理等。</p>
</li>
<li>
<p>Service 层：相对具体的业务逻辑服务层。</p>
</li>
<li>
<p>Manager 层：通用业务处理层，它有如下特征：</p>
</li>
</ul>
<ol>
<li>
<p>对第三方平台封装的层，预处理返回结果及转化异常信息，适配上层接口。</p>
</li>
<li>
<p>对 Service 层通用能力的下沉，如缓存方案、中间件通用处理。</p>
</li>
<li>
<p>与 DAO 层交互，对多个 DAO 的组合复用。</p>
<ul>
<li>
<p>DAO 层：数据访问层，与底层 MySQL、Oracle、Hbase、OB 等进行数据交互。</p>
</li>
<li>
<p>第三方服务：包括其它部门 RPC 服务接口，基础平台，其它公司的 HTTP 接口，如淘宝开放平台、支付宝付款服务、高德地图服务等。</p>
</li>
<li>
<p>外部数据接口：外部（应用）数据存储服务提供的接口，多见于数据迁移场景中。</p>
</li>
</ul>
</li>
</ol>
<p> </p>
<ol start="2">
<li>【参考】（分层异常处理规约）在 DAO 层，产生的异常类型有很多，无法用细粒度的异常进行 catch，使用 catch(Exception e)方式，并 throw new DAOException(e)，不需要打印日志，因为日志在 Manager/Service 层一定需要捕获并打印到日志文件中去，如果同台服务器再打日志，</li>
</ol>
<h4 id="浪费性能和存储。在-service-层出现异常时-必须记录出错日志到磁盘-尽可能带上参数信息-相当于保护案发现场。manager-层与-service-同机部署-日志方式与-dao-层处理一致-如果是单独部署-则采用与-service-一致的处理方式。web-层绝不应该继续往上抛异常-因为已经处于顶层-如果意识到这个异常将导致页面无法正常渲染-那么就应该直接跳转到友好错误页面-尽量加上友好的错误提示信息。开放接口层要将异常处理成错误码和错误信息方式返回。" tabindex="-1"> 浪费性能和存储。在 Service 层出现异常时，必须记录出错日志到磁盘，尽可能带上参数信息， 相当于保护案发现场。Manager 层与 Service 同机部署，日志方式与 DAO 层处理一致，如果是单独部署，则采用与 Service 一致的处理方式。Web 层绝不应该继续往上抛异常，因为已经处于顶层，如果意识到这个异常将导致页面无法正常渲染，那么就应该直接跳转到友好错误页面， 尽量加上友好的错误提示信息。开放接口层要将异常处理成错误码和错误信息方式返回。</h4>
<ol start="3">
<li>
<h4 id="【参考】分层领域模型规约" tabindex="-1"> 【参考】分层领域模型规约：</h4>
<ul>
<li>
<p>DO（Data Object）：此对象与数据库表结构一一对应，通过 DAO 层向上传输数据源对象。</p>
</li>
<li>
<p>（Data Transfer Object）：数据传输对象，Service 或 Manager 向外传输的对象。</p>
</li>
<li>
<p>（Business Object）：业务对象，可以由 Service 层输出的封装业务逻辑的对象。</p>
</li>
<li>
<p>：数据查询对象，各层接收上层的查询请求。注意超过 2 个参数的查询封装，禁止使用 Map 类来传输。</p>
</li>
<li>
<p>VO（View Object）：显示层对象，通常是 Web 向模板渲染引擎层传输的对象。</p>
</li>
</ul>
</li>
</ol>
<h3 id="二-二方库依赖" tabindex="-1"> (二) 二方库依赖</h3>
<ol>
<li>
<p>【强制】定义 GAV 遵从以下规则：</p>
<ol>
<li>GroupID 格式：com.{公司/BU }.业务线 [.子业务线]，最多 4 级。</li>
</ol>
</li>
</ol>
<blockquote>
<p>说明：{公司/BU} 例如：alibaba/taobao/tmall/aliexpress 等 BU 一级；子业务线可选。正例：com.taobao.jstorm 或 com.alibaba.dubbo.register</p>
</blockquote>
<ol start="2">
<li>
<p>ArtifactID 格式：产品线名-模块名。语义不重复不遗漏，先到中央仓库去查证一下。正例：dubbo-client / fastjson-api / jstorm-tool</p>
</li>
<li>
<p>Version：详细规定参考下方。</p>
</li>
</ol>
<h4 id="【强制】二方库版本号命名方式-主版本号-次版本号-修订号" tabindex="-1"> 【强制】二方库版本号命名方式：主版本号.次版本号.修订号</h4>
<ol>
<li>
<p>主版本号：产品方向改变，或者大规模 API 不兼容，或者架构不兼容升级。</p>
</li>
<li>
<p>次版本号：保持相对兼容性，增加主要功能特性，影响范围极小的 API 不兼容修改。</p>
</li>
<li>
<p>修订号：保持完全兼容性，修复 BUG、新增次要功能特性等。说明：注意起始版本号必须为：1.0.0，而不是 0.0.1。</p>
</li>
</ol>
<p>反例：仓库内某二方库版本号从 1.0.0.0 开始，一直默默&quot;升级&quot;成 1.0.0.64，完全失去版本的语义信息。</p>
<h4 id="【强制】线上应用不要依赖-snapshot-版本-安全包除外-正式发布的类库必须先去中央仓库进行查证-使-release-版本号有延续性-且版本号不允许覆盖升级。" tabindex="-1"> 【强制】线上应用不要依赖 SNAPSHOT 版本（安全包除外）；正式发布的类库必须先去中央仓库进行查证，使 RELEASE 版本号有延续性，且版本号不允许覆盖升级。</h4>
<p>说明：不依赖 SNAPSHOT 版本是保证应用发布的幂等性。另外，也可以加快编译时的打包构建。</p>
<h4 id="【强制】二方库的新增或升级-保持除功能点之外的其它-jar-包仲裁结果不变。如果有改变-必须明确评估和验证。" tabindex="-1"> 【强制】二方库的新增或升级，保持除功能点之外的其它 jar 包仲裁结果不变。如果有改变， 必须明确评估和验证。</h4>
<p>说明：在升级时，进行 dependency:resolve 前后信息比对，如果仲裁结果完全不一致，那么通过</p>
<p>dependency:tree 命令，找出差异点，进行&lt;exclude&gt;排除 jar 包。</p>
<ol start="5">
<li>
<h4 id="【强制】二方库里可以定义枚举类型-参数可以使用枚举类型-但是接口返回值不允许使用枚举类型或者包含枚举类型的-pojo-对象。" tabindex="-1"> 【强制】二方库里可以定义枚举类型，参数可以使用枚举类型，但是接口返回值不允许使用枚举类型或者包含枚举类型的 POJO 对象。</h4>
</li>
<li>
<h4 id="【强制】依赖于一个二方库群时-必须定义一个统一的版本变量-避免版本号不一致。" tabindex="-1"> 【强制】依赖于一个二方库群时，必须定义一个统一的版本变量，避免版本号不一致。</h4>
</li>
</ol>
<p>说明：依赖 springframework-core,-context,-beans，它们都是同一个版本，可以定义一个变量来保存版本：${spring.version}，定义依赖的时候，引用该版本。</p>
<ol start="7">
<li>【强制】禁止在子项目的 pom 依赖中出现相同的 GroupId，相同的 ArtifactId，但是不同的Version。</li>
</ol>
<p>说明：在本地调试时会使用各子项目指定的版本号，但是合并成一个 war，只能有一个版本号出现在最后的lib 目录中。曾经出现过线下调试是正确的，发布到线上却出故障的先例。</p>
<ol start="8">
<li>
<h4 id="【推荐】底层基础技术框架、核心数据管理平台、或近硬件端系统谨慎引入第三方实现。" tabindex="-1"> 【推荐】底层基础技术框架、核心数据管理平台、或近硬件端系统谨慎引入第三方实现。</h4>
</li>
<li>
<p>【推荐】所有 pom 文件中的依赖声明放在&lt;dependencies&gt;语句块中，所有版本仲裁放在</p>
</li>
</ol>
<blockquote>
<p>&lt;dependencyManagement&gt;语句块中。</p>
</blockquote>
<p>说明：&lt;dependencyManagement&gt;里只是声明版本，并不实现引入，因此子项目需要显式的声明依赖， version 和 scope 都读取自父 pom。而&lt;dependencies&gt;所有声明在主 pom 的&lt;dependencies&gt;里的依赖都会自动引入，并默认被所有的子项目继承。</p>
<ol start="10">
<li>
<h4 id="【推荐】二方库不要有配置项-最低限度不要再增加配置项。" tabindex="-1"> 【推荐】二方库不要有配置项，最低限度不要再增加配置项。</h4>
</li>
<li>
<h4 id="【推荐】不要使用不稳定的工具包或者-utils-类。" tabindex="-1"> 【推荐】不要使用不稳定的工具包或者 Utils 类。</h4>
</li>
</ol>
<p>说明：不稳定指的是提供方无法做到向下兼容，在编译阶段正常，但在运行时产生异常，因此，尽量使用业界稳定的二方工具包。</p>
<h4 id="【参考】为避免应用二方库的依赖冲突问题-二方库发布者应当遵循以下原则" tabindex="-1"> 【参考】为避免应用二方库的依赖冲突问题，二方库发布者应当遵循以下原则：</h4>
<ol>
<li>
<p><strong>精简可控原则</strong>。移除一切不必要的 API 和依赖，只包含 Service API、必要的领域模型对象、Utils 类、常量、枚举等。如果依赖其它二方库，尽量是 provided 引入，让二方库使用者去依赖具体版本号；无 log 具体实现，只依赖日志框架。</p>
</li>
<li>
<p><strong>稳定可追溯原则</strong>。每个版本的变化应该被记录，二方库由谁维护，源码在哪里，都需要能方便查到。除非用户主动升级版本，否则公共二方库的行为不应该发生变化。</p>
</li>
</ol>
<h3 id="三-服务器" tabindex="-1"> (三) 服务器</h3>
<ol>
<li>【推荐】高并发服务器建议调小 TCP 协议的 time_wait 超时时间。</li>
</ol>
<p>说明：操作系统默认 240 秒后，才会关闭处于 time_wait 状态的连接，在高并发访问下，服务器端会因为处于 time_wait 的连接数太多，可能无法建立新的连接，所以需要在服务器上调小此等待值。</p>
<p>正例：在 linux 服务器上请通过变更/etc/sysctl.conf 文件去修改该缺省值（秒）：</p>
<blockquote>
<p>net.ipv4.tcp_fin_timeout = 30</p>
</blockquote>
<ol start="2">
<li>【推荐】调大服务器所支持的最大文件句柄数（File Descriptor，简写为 fd）。</li>
</ol>
<p>说明：主流操作系统的设计是将 TCP/UDP 连接采用与文件一样的方式去管理，即一个连接对应于一个 fd。主流的linux 服务器默认所支持最大fd 数量为1024，当并发连接数很大时很容易因为fd 不足而出现&quot;open too many files&quot;错误，导致新的连接无法建立。建议将 linux 服务器所支持的最大句柄数调高数倍（与服务器的内存数量相关）。</p>
<h4 id="【推荐】给-jvm-环境参数设置-xx-heapdumponoutofmemoryerror-参数-让-jvm-碰到-oom" tabindex="-1"> 【推荐】给 JVM 环境参数设置-XX:+HeapDumpOnOutOfMemoryError 参数，让 JVM 碰到 OOM</h4>
<h4 id="场景时输出-dump-信息。" tabindex="-1"> 场景时输出 dump 信息。</h4>
<p>说明：OOM 的发生是有概率的，甚至相隔数月才出现一例，出错时的堆内信息对解决问题非常有帮助。</p>
<ol start="4">
<li>
<p>【推荐】在线上生产环境，JVM 的 Xms 和 Xmx 设置一样大小的内存容量，避免在 GC 后调整堆大小带来的压力。</p>
</li>
<li>
<h4 id="【参考】服务器内部重定向必须使用-forward-外部重定向地址必须使用-url-broker-生成-否则因线上采用-https-协议而导致浏览器提示-不安全-。此外-还会带来-url-维护不一致的问题。" tabindex="-1"> 【参考】服务器内部重定向必须使用 forward；外部重定向地址必须使用 URL Broker 生成，否则因线上采用 HTTPS 协议而导致浏览器提示&quot;不安全&quot;。此外，还会带来 URL 维护不一致的问题。</h4>
</li>
</ol>
<h2 id="七、设计规约" tabindex="-1"> 七、设计规约</h2>
<h4 id="【强制】存储方案和底层数据结构的设计获得评审一致通过-并沉淀成为文档。" tabindex="-1"> 【强制】存储方案和底层数据结构的设计获得评审一致通过，并沉淀成为文档。</h4>
<p>说明：有缺陷的底层数据结构容易导致系统风险上升，可扩展性下降，重构成本也会因历史数据迁移和系统平滑过渡而陡然增加，所以，存储方案和数据结构需要认真地进行设计和评审，生产环境提交执行后， 需要进行 double check。</p>
<p>正例：评审内容包括存储介质选型、表结构设计能否满足技术方案、存取性能和存储空间能否满足业务发展、表或字段之间的辩证关系、字段名称、字段类型、索引等；数据结构变更（如在原有表中新增字段） 也需要进行评审通过后上线。</p>
<h4 id="【强制】在需求分析阶段-如果与系统交互的-user-超过一类并且相关的-user-case-超过-5-个-使用用例图来表达更加清晰的结构化需求。" tabindex="-1"> 【强制】在需求分析阶段，如果与系统交互的 User 超过一类并且相关的 User Case 超过 5 个， 使用用例图来表达更加清晰的结构化需求。</h4>
<h4 id="【强制】如果某个业务对象的状态超过-3-个-使用状态图来表达并且明确状态变化的各个触发条件。" tabindex="-1"> 【强制】如果某个业务对象的状态超过 3 个，使用状态图来表达并且明确状态变化的各个触发条件。</h4>
<p>说明：状态图的核心是对象状态，首先明确对象有多少种状态，然后明确两两状态之间是否存在直接转换关系，再明确触发状态转换的条件是什么。</p>
<p>正例：淘宝订单状态有已下单、待付款、已付款、待发货、已发货、已收货等。比如已下单与已收货这两种状态之间是不可能有直接转换关系的。</p>
<h4 id="【强制】如果系统中某个功能的调用链路上的涉及对象超过-3-个-使用时序图来表达并且明确各调用环节的输入与输出。" tabindex="-1"> 【强制】如果系统中某个功能的调用链路上的涉及对象超过 3 个，使用时序图来表达并且明确各调用环节的输入与输出。</h4>
<p>说明：时序图反映了一系列对象间的交互与协作关系，清晰立体地反映系统的调用纵深链路。</p>
<h4 id="【强制】如果系统中模型类超过-5-个-并且存在复杂的依赖关系-使用类图来表达并且明确类之间的关系。" tabindex="-1"> 【强制】如果系统中模型类超过 5 个，并且存在复杂的依赖关系，使用类图来表达并且明确类之间的关系。</h4>
<p>说明：类图像建筑领域的施工图，如果搭平房，可能不需要，但如果建造蚂蚁 Z 空间大楼，肯定需要详细的施工图。</p>
<h4 id="【强制】如果系统中超过-2-个对象之间存在协作关系-并且需要表示复杂的处理流程-使用活动图来表示。" tabindex="-1"> 【强制】如果系统中超过 2 个对象之间存在协作关系，并且需要表示复杂的处理流程，使用活动图来表示。</h4>
<p>说明：活动图是流程图的扩展，增加了能够体现协作关系的对象泳道，支持表示并发等。</p>
<h4 id="【推荐】系统架构设计时明确以下目标" tabindex="-1"> 【推荐】系统架构设计时明确以下目标：</h4>
<ul>
<li>
<p>确定系统边界。确定系统在技术层面上的做与不做。</p>
</li>
<li>
<p>确定系统内模块之间的关系。确定模块之间的依赖关系及模块的宏观输入与输出。</p>
</li>
<li>
<p>确定指导后续设计与演化的原则。使后续的子系统或模块设计在一个既定的框架内和技术方向上继续演化。</p>
</li>
<li>
<p>确定非功能性需求。非功能性需求是指安全性、可用性、可扩展性等。</p>
</li>
</ul>
<p>【推荐】需求分析与系统设计在考虑主干功能的同时，需要充分评估异常流程与业务边界。反例：用户在淘宝付款过程中，银行扣款成功，发送给用户扣款成功短信，但是支付宝入款时由于断网演练产生异常，淘宝订单页面依然显示未付款，导致用户投诉。</p>
<h4 id="【推荐】类在设计与实现时要符合单一原则。" tabindex="-1"> 【推荐】类在设计与实现时要符合单一原则。</h4>
<p>说明：单一原则最易理解却是最难实现的一条规则，随着系统演进，很多时候，忘记了类设计的初衷。</p>
<h4 id="【推荐】谨慎使用继承的方式来进行扩展-优先使用聚合-组合的方式来实现。" tabindex="-1"> 【推荐】谨慎使用继承的方式来进行扩展，优先使用聚合/组合的方式来实现。</h4>
<p>说明：不得已使用继承的话，必须符合里氏代换原则，此原则说父类能够出现的地方子类一定能够出现， 比如，&quot;把钱交出来&quot;，钱的子类美元、欧元、人民币等都可以出现。</p>
<h4 id="【推荐】系统设计阶段-根据依赖倒置原则-尽量依赖抽象类与接口-有利于扩展与维护。" tabindex="-1"> 【推荐】系统设计阶段，根据依赖倒置原则，尽量依赖抽象类与接口，有利于扩展与维护。</h4>
<p>说明：低层次模块依赖于高层次模块的抽象，方便系统间的解耦。</p>
<h4 id="【推荐】系统设计阶段-注意对扩展开放-对修改闭合。" tabindex="-1"> 【推荐】系统设计阶段，注意对扩展开放，对修改闭合。</h4>
<p>说明：极端情况下，交付的代码是不可修改的，同一业务域内的需求变化，通过模块或类的扩展来实现。</p>
<p>【推荐】系统设计阶段，共性业务或公共行为抽取出来公共模块、公共配置、公共类、公共方法等，在系统中不出现重复代码的情况，即 DRY 原则（Don't Repeat Yourself）。</p>
<blockquote>
<p>说明：随着代码的重复次数不断增加，维护成本指数级上升。随意复制和粘贴代码，必然会导致代码的重复， 在维护代码时，需要修改所有的副本，容易遗漏。必要时抽取共性方法，或者抽象公共类，甚至是组件化。正例：一个类中有多个 public 方法，都需要进行数行相同的参数校验操作，这个时候请抽取：</p>
<p>private boolean checkParam(DTO dto) {...}</p>
</blockquote>
<h4 id="【推荐】避免如下误解-敏捷开发-讲故事-编码-发布。" tabindex="-1"> 【推荐】避免如下误解：敏捷开发 = 讲故事 + 编码 + 发布。</h4>
<blockquote>
<p>说明：敏捷开发是快速交付迭代可用的系统，省略多余的设计方案，摒弃传统的审批流程，但核心关键点上的必要设计和文档沉淀是需要的。</p>
</blockquote>
<p>反例：某团队为了业务快速发展，敏捷成了产品经理催进度的借口，系统中均是勉强能运行但像面条一样的代码，可维护性和可扩展性极差，一年之后，不得不进行大规模重构，得不偿失。</p>
<h4 id="【参考】设计文档的作用是明确需求、理顺逻辑、后期维护-次要目的用于指导编码。" tabindex="-1"> 【参考】设计文档的作用是明确需求、理顺逻辑、后期维护，次要目的用于指导编码。</h4>
<p>说明：避免为了设计而设计，系统设计文档有助于后期的系统维护和重构，所以设计结果需要进行分类归档保存。</p>
<h4 id="【参考】可扩展性的本质是找到系统的变化点-并隔离变化点。" tabindex="-1"> 【参考】可扩展性的本质是找到系统的变化点，并隔离变化点。</h4>
<p>说明：世间众多设计模式其实就是一种设计模式即隔离变化点的模式。</p>
<p>正例：极致扩展性的标志，就是需求的新增，不会在原有代码交付物上进行任何形式的修改。</p>
<h4 id="【参考】设计的本质就是识别和表达系统难点。" tabindex="-1"> 【参考】设计的本质就是识别和表达系统难点。</h4>
<p>说明：识别和表达完全是两回事，很多人错误地认为识别到系统难点在哪里，表达只是自然而然的事情， 但是大家在设计评审中经常出现语焉不详，甚至是词不达意的情况。准确地表达系统难点需要具备如下能力： 表达规则和表达工具的熟练性。抽象思维和总结能力的局限性。基础知识体系的完备性。深入浅出的生动表达力。</p>
<h4 id="【参考】代码即文档的观点是错误的-清晰的代码只是文档的某个片断-而不是全部。" tabindex="-1"> 【参考】代码即文档的观点是错误的，清晰的代码只是文档的某个片断，而不是全部。</h4>
<p>说明：代码的深度调用，模块层面上的依赖关系网，业务场景逻辑，非功能性需求等问题是需要相应的文档来完整地呈现的。</p>
<h4 id="【参考】在做无障碍产品设计时-需要考虑到" tabindex="-1"> 【参考】在做无障碍产品设计时，需要考虑到：</h4>
<ul>
<li>
<p>所有可交互的控件元素必须能被 tab 键聚焦，并且焦点顺序需符合自然操作逻辑。</p>
</li>
<li>
<p>用于登录校验和请求拦截的验证码均需提供图形验证以外的其它方式。</p>
</li>
<li>
<p>自定义的控件类型需明确交互方式。</p>
</li>
</ul>
<p>正例：用户登录场景中，输入框的按钮都需要考虑 tab 键聚焦，符合自然逻辑的操作顺序如下，&quot;输入用户名，输入密码，输入验证码，点击登录&quot;，其中验证码实现语音验证方式。如果有自定义标签实现的控件设置控件类型可使用 role 属性。</p>
<h3 id="附-专有名词解释" tabindex="-1"> 附 ：专有名词解释</h3>
<ol>
<li>
<p>POJO（Plain Ordinary Java Object）: 在本规约中，POJO 专指只有 setter/getter/toString 的简单类，包括 DO/DTO/BO/VO 等。</p>
</li>
<li>
<p>DO（Data Object）：阿里巴巴专指数据库表一一对应的 POJO 类。此对象与数据库表结构一一对应，通过 DAO 层向上传输数据源对象。</p>
</li>
<li>
<p>DTO（Data Transfer Object）：数据传输对象，Service 或 Manager 向外传输的对象。</p>
</li>
<li>
<p>BO（Business Object）：业务对象，可以由 Service 层输出的封装业务逻辑的对象。</p>
</li>
<li>
<p>Query:数据查询对象，各层接收上层的查询请求。注意超过 2 个参数的查询封装，禁止使用Map 类来传输。</p>
</li>
<li>
<p>VO（View Object）：显示层对象，通常是 Web 向模板渲染引擎层传输的对象。</p>
</li>
<li>
<p>AO（Application Object）: 阿里巴巴专指Application Object，即在 Service 层上，极为贴近业务的复用代码。</p>
</li>
<li>
<p>CAS（Compare And Swap）：解决多线程并行情况下使用锁造成性能损耗的一种机制，这是硬件实现的原子操作。CAS 操作包含三个操作数：内存位置、预期原值和新值。如果内存位置的值与预期原值相匹配，那么处理器会自动将该位置值更新为新值。否则，处理器不做任何操作。</p>
</li>
<li>
<p>GAV（GroupId、ArtifactId、Version）: Maven 坐标，是用来唯一标识 jar 包。</p>
</li>
<li>
<p>OOP（Object Oriented Programming）: 本文泛指类、对象的编程处理方式。</p>
</li>
<li>
<p>AQS（AbstractQueuedSynchronizer）: 利用先进先出队列实现的底层同步工具类，它是很多上层同步实现类的基础，比如：ReentrantLock、CountDownLatch、Semaphore 等，它们通过继承 AQS 实现其模版方法，然后将 AQS 子类作为同步组件的内部类，通常命名为 Sync。</p>
</li>
<li>
<p>ORM（Object Relation Mapping）: 对象关系映射，对象领域模型与底层数据之间的转换，本文泛指 iBATIS, mybatis 等框架。</p>
</li>
<li>
<p>（java.lang.NullPointerException）: 空指针异常。</p>
</li>
<li>
<p>（Out Of Memory）: 源于 java.lang.OutOfMemoryError，当 JVM 没有足够的内存来为对象分配空间并且垃圾回收器也无法回收空间时，系统出现的严重状况。</p>
</li>
<li>
<p>一方库: 本工程内部子项目模块依赖的库（jar 包）。</p>
</li>
<li>
<p>二方库: 公司内部发布到中央仓库，可供公司内部其它应用依赖的库（jar 包）。</p>
</li>
<li>
<p>三方库: 公司之外的开源库（jar 包）。</p>
</li>
</ol>
<h2 id="pdf版" tabindex="-1"> PDF版</h2>
<p><a href="https://ucc-private-download.oss-cn-beijing.aliyuncs.com/66995068b45c4ebfa74afcfc2e76212c.pdf?Expires=1635837643&amp;OSSAccessKeyId=LTAIvsP3ECkg4Nm9&amp;Signature=MxfsOZji%2F62tUuLm994p3S90%2Bm4%3D" target="_blank" rel="noopener noreferrer">官方pdf</a></p>
]]></content:encoded>
    </item>
    <item>
      <title>这8个编程教学网站，足够为程序员打开编程大门，值得收藏</title>
      <link>https://wukongnotnull.com/posts/goodshare/6.html</link>
      <guid>https://wukongnotnull.com/posts/goodshare/6.html</guid>
      <source url="https://wukongnotnull.com/rss.xml">这8个编程教学网站，足够为程序员打开编程大门，值得收藏</source>
      <description> 这8个编程教学网站，足够为程序员打开编程大门，值得收藏
文章编号：t003
想要学习编程立志成为一名程序
有哪些教学网站可以推荐呢
一定要是国内的
一定要是免费的
那么这8个网站你一定不要错过
</description>
      <category>Java</category>
      <category>编程导航</category>
      <category>好物分享</category>
      <pubDate>Tue, 25 Oct 2022 00:00:00 GMT</pubDate>
      <content:encoded><![CDATA[<h1 id="这8个编程教学网站-足够为程序员打开编程大门-值得收藏" tabindex="-1"> 这8个编程教学网站，足够为程序员打开编程大门，值得收藏</h1>
<p>文章编号：t003</p>
<p>想要学习编程立志成为一名程序</p>
<p>有哪些教学网站可以推荐呢</p>
<p>一定要是国内的</p>
<p>一定要是免费的</p>
<p>那么这8个网站你一定不要错过</p>

<h2 id="菜鸟教程" tabindex="-1"> 菜鸟教程</h2>
<p><img src="https://cdn.jsdelivr.net/gh/wuKongNotNull/images-hosting/wukong-website/菜鸟教程-1.png" alt=""></p>
<p>一个适合编程入门的教学网站</p>
<p>页面简洁无广告</p>
<p>不需要注册和登录</p>
<p>涵盖语言比较丰富</p>
<p>前端三剑客</p>
<p>HTML CSS JavaScript</p>
<p>前端三大框架</p>
<p>VUE React Angular</p>
<p>外加丰富的服务器语言</p>
<p>比如 C Java Python Go 等</p>
<p>这个网站为什么很受编程小白的欢迎呢？</p>
<p>因为语言简洁易懂</p>
<p>很复杂的技术理论</p>
<p>在这里都被转化成大白话</p>
<p>缺点就是只适合小白入门</p>
<p>深入学习某门语言</p>
<p>还是要去阅读官方文档</p>
<p>和专业的书籍</p>
<p>类似的网站还有</p>
<p>w3school 和 w3cschool</p>
<p>三者都是局限于小白入门</p>
<p>选择其中之一就行</p>
<p>不要深究</p>
<h2 id="腾讯课堂" tabindex="-1"> 腾讯课堂</h2>
<p><img src="https://cdn.jsdelivr.net/gh/wuKongNotNull/images-hosting/wukong-website/tengxunketang.png" alt=""></p>
<p>选择分类 IT 互联网</p>
<p>有大量的编程教学视频</p>
<p>这些技术视频</p>
<p>都是市面上培训机构录制</p>
<p>为了宣传自己的品牌</p>
<p>一般培训机构都会选择</p>
<p>自己家最好的老师授课录制</p>
<p>质量都不错</p>
<h2 id="b站" tabindex="-1"> B站</h2>
<p><img src="https://cdn.jsdelivr.net/gh/wuKongNotNull/images-hosting/wukong-website/b-website.png" alt=""></p>
<p>一个被二次元耽误的编程学习网站</p>
<p>B站上知识区和科技区</p>
<p>有大量国内外优秀的编程类视频</p>
<p>因为B站用户主要是学生群体</p>
<p>早就被国内编程培训机构盯上</p>
<p>黑马程序员和尚硅谷</p>
<p>视频质量都不错</p>
<p>还有大量国外技术大佬和常春藤名校</p>
<p>Youtube上发布的视频被搬运到B站</p>
<p>一边学编程一边练英文听力 真香</p>
<p>这里还聚集很多国际计算机科学家</p>
<p>比如讲 AI 的吴恩达和李沐等</p>
<p>绝对是豪华的科技明星阵容</p>
<h2 id="慕课网" tabindex="-1"> 慕课网</h2>
<p><img src="https://cdn.jsdelivr.net/gh/wuKongNotNull/images-hosting/wukong-website/muke.png" alt=""></p>
<p>打开网站点击免费课目录</p>
<p>你会发现海量精品课程</p>
<p>可以根据难度进行分类</p>
<p>课程的老师很多是公司在职技术大佬</p>
<p>讲解的技术比较贴近企业实战</p>
<p>每节课都是专门录制和专业剪辑</p>
<p>这是  我比较喜欢的地方</p>
<p>不像培训机构的录屏课</p>
<p>会遇到视频清晰度低麦克风有杂音</p>
<p>老师还时不时闲聊浪费时间</p>
<h2 id="中国大学mooc" tabindex="-1"> 中国大学mooc</h2>
<p><img src="https://cdn.jsdelivr.net/gh/wuKongNotNull/images-hosting/wukong-website/mooc.png" alt=""></p>
<p>一个收集中国知名高校精品课程的官方网站</p>
<p>点击计算机分类</p>
<p>二级分类分别有</p>
<p>大数据与人工智能</p>
<p>程序设计与开发</p>
<p>计算机基础与应用等</p>
<p>所有课程都是985 211高校的在职教授录制</p>
<p>比如清华大学北京大学等</p>
<p>有名校情结或者非计算机科班的同学</p>
<p>想体验一下大学教授的授课风格</p>
<p>建议看一看</p>
<h2 id="freecodecamp" tabindex="-1"> freeCodeCamp</h2>
<p><img src="https://cdn.jsdelivr.net/gh/wuKongNotNull/images-hosting/wukong-website/freecodecamp.png" alt=""></p>
<p>一个非营利性国际编程社区</p>
<p>学员来自全球各地</p>
<p>2021年春节正式上线中文站</p>
<p>所有资源都是免费无广告</p>
<p>主要讲授HTML CSS JavaScript</p>
<p>Bootstrap React Python 等</p>
<p>最大的特色就是交互式编程课程</p>
<p>你不需要搭建繁琐的编程环境</p>
<p>直接在网站上写代码运行测试</p>
<h2 id="网易公开课" tabindex="-1"> 网易公开课</h2>
<p><img src="https://cdn.jsdelivr.net/gh/wuKongNotNull/images-hosting/wukong-website/wangyi.png" alt=""></p>
<p>打开网站</p>
<p>点击导航选项</p>
<p>国际名校公开课</p>
<p>然后选择计算机分类</p>
<p>你会发现有十几部教学公开课</p>
<p>都是哈佛大学 麻省理工 加州理工等名校</p>
<p>而且视频都有中文字幕</p>
<p>如果没有网络平台</p>
<p>这些优质的教学资源</p>
<p>普通学生很难获得</p>
<h2 id="学堂在线" tabindex="-1"> 学堂在线</h2>
<p><img src="https://cdn.jsdelivr.net/gh/wuKongNotNull/images-hosting/wukong-website/xuetangzaixian.png" alt=""></p>
<p>选择计算机分类</p>
<p>能够搜索到500多门相关课程</p>
<p>排在第一位的课程是</p>
<p>C++语言程序设计基础</p>
<p>由清华大学老师授课</p>
<p>有46万人观看过</p>
<p>还有 数据结构 操作系统</p>
<p>Java C 大数据等等</p>
<p>包含计算机各门类课程</p>
<p>国内还有其他教学网站</p>
<p>但是我这里不推荐</p>
<p>一是网站内广告太多</p>
<p>二是很多免费课程都是试听课</p>
<p>干货少 时不时诱导购买付费课</p>
<p>三是很多网站和上述8大网站有大量内容重复</p>
<p>好的资源贵在精不在多</p>
<p>忘了自我介绍了</p>
<p>我是悟空非空也的悟空</p>
<p>一枚精通各语言拼写的野生程序员</p>
<p>如果你喜欢我的分享</p>
<p>感谢转发评论点赞</p>
<p>外加一个大大的关注</p>
<p>该文档制作成一颗龙珠</p>
<p>龙珠码为 <strong>t003</strong></p>
<p>恭喜你</p>
<p>今天又收集到一颗宝藏龙珠</p>
<div><pre><code>	成功的反义词不是失败

	而是什么都不做

</code></pre><div aria-hidden="true"><div></div><div></div><div></div><div></div></div></div>]]></content:encoded>
      <enclosure url="https://cdn.jsdelivr.net/gh/wuKongNotNull/images-hosting/wukong-website/%E8%8F%9C%E9%B8%9F%E6%95%99%E7%A8%8B-1.png" type="image/png"/>
    </item>
    <item>
      <title>爆肝1个多月，严选10大热门静态博客框架，官方文档、教学视频、经典案例、热门插件一应俱全，强烈建议收藏</title>
      <link>https://wukongnotnull.com/posts/goodshare/7.html</link>
      <guid>https://wukongnotnull.com/posts/goodshare/7.html</guid>
      <source url="https://wukongnotnull.com/rss.xml">爆肝1个多月，严选10大热门静态博客框架，官方文档、教学视频、经典案例、热门插件一应俱全，强烈建议收藏</source>
      <description> 爆肝1个多月，严选10大热门静态博客框架，官方文档、教学视频、经典案例、热门插件一应俱全，强烈建议收藏
【文章编号 t001】
凌晨 12 点，我有一位朋友，在电话里，气愤地说他的博客文章又被平台删掉了。
我很好奇为什么，原来是他在某平台发布了一篇技术类原创文章，读者都比较喜欢。后来，他把这篇文章转发到另外一个平台。可是，偏偏不巧，这两个平台彼此是商业竞争关系。不允许一篇文章在 2 个平台发布，文章被删后，把我的朋友气得上蹿下跳。
我听完后，却很平静。这就是资本垄断的力量，很多自媒体平台都在追求一家独大，卧榻之下，岂容他人酣睡。彼此的恶性竞争，早已经不在乎用户的感受了。
</description>
      <category>好物分享</category>
      <category>博客</category>
      <pubDate>Tue, 25 Oct 2022 00:00:00 GMT</pubDate>
      <content:encoded><![CDATA[<h1 id="爆肝1个多月-严选10大热门静态博客框架-官方文档、教学视频、经典案例、热门插件一应俱全-强烈建议收藏" tabindex="-1"> 爆肝1个多月，严选10大热门静态博客框架，官方文档、教学视频、经典案例、热门插件一应俱全，强烈建议收藏</h1>
<p>【文章编号 t001】</p>
<p>凌晨 12 点，我有一位朋友，在电话里，气愤地说他的博客文章又被平台删掉了。</p>
<p>我很好奇为什么，原来是他在某平台发布了一篇技术类原创文章，读者都比较喜欢。后来，他把这篇文章转发到另外一个平台。可是，偏偏不巧，这两个平台彼此是商业竞争关系。不允许一篇文章在 2 个平台发布，文章被删后，把我的朋友气得上蹿下跳。</p>
<p>我听完后，却很平静。这就是资本垄断的力量，很多自媒体平台都在追求一家独大，卧榻之下，岂容他人酣睡。彼此的恶性竞争，早已经不在乎用户的感受了。</p>

<p>创作者辛苦熬肝数月，文章却遭受平台审核不通过，或者已发布的文章竟被无情的插入各种广告。文章的链接或者二维码，转发到其他平台竟被无情封杀。或是文章要不过不了审，要不直接被删除。</p>
<p>对他表示同情的同时，我不经深思，是否有办法，在互联网上自由的创作，自由的发声呢？破釜沉舟，打破枷锁，我们失去的只有锁链。</p>
<p>要想彻底解决这一难题，只能运用个人编程技术，逃离各大自媒体平台，自建博客网站。</p>
<p>通过搜索和查阅大量公开资料，我发现网上有许多自建博客网站的技术，但是很多框架，要不就是作者长期不维护，要不就是用户少社区不活跃，要不就是插件和主题少的可怜，要不就是没有中文文档。</p>
<p>经过我一个月的精心研究和反复比较，最终精选出10大技术框架，这些技术框架都是开源免费的。分享给大家，欢迎白嫖。学完你一定有所收获。</p>
<p>文章中提供了大量的网站链接，国内国外的都有。若是访问速度慢，可以参考如下截图。</p>
<p>​	<img src="https://cdn.jsdelivr.net/gh/wuKongNotNull/images-hosting/wukong-website/科学上网.png" alt=""></p>
<h2 id="_10-solo" tabindex="-1"> <strong>10 Solo</strong></h2>
<img src="https://tva1.sinaimg.cn/large/008i3skNgy1gu1btzt946j60u00bygmf02.jpg" alt="图片" style="zoom:50%;" />
<p>Solo，号称是一款小而美的动态博客系统，专为程序员设计。最大特点就是自带社区，自己的文章可以发送到社区中。社区回帖和博客评论进行联动。让每一个博客不是孤岛，而是满天相互联系的星星。</p>
<p>https://b3log.org/solo 是它的官方网站，使用Java 语言编写，有点像新浪博客，直接注册使用，零技术门槛。</p>
<p>不过，还是推荐有技术背景的小伙伴，下载源码，自行部署。</p>
<p>官方文档叫做《Solo 从设计到实现》，地址为  https://ld246.com/article/1537690756242?utm_source=ld246.com 。</p>
<p>主要功能：</p>
<p>Markdown 编辑器支持三种编辑模式：所见即所得 / 即时渲染 / 分屏预览</p>
<p>自定义导航链接</p>
<p>随机文章 / 相关文章 / 置顶 / 更新提醒</p>
<p>自定义文章永久链接 / 签名档</p>
<p>配置站点 SEO 参数 / 公告 / 页脚</p>
<p>代码高亮 / 数学公式 / 流程图 / 五线谱</p>
<p>Hexo / Jekyll / Markdown 导入</p>
<p>Atom / RSS / Sitemap</p>
<p>CDN 静态资源分离，可配置 jsDelivr CDN 分发</p>
<p>拉取 GitHub 仓库和自动备份</p>
<p>内置 HTTPS+CDN 文件存储</p>
<p>支持生成导出静态站点，用于发布GitHub Pages</p>
<p>同时，给大家挑选出几个优秀的博客代表作，参考一下。</p>
<p>https://88250.b3log.org/?utm_source=ld246.com</p>
<p>https://www.rainsheep.cn/?utm_source=ld246.com</p>
<p>https://leif.fun/?utm_source=ld246.com</p>
<p>https://expoli.tech/?p=2</p>
<p>https://www.lyile.cn/?utm_source=ld246.com</p>
<p>官方文档已经非常详细，若是你不喜欢看文字，我还帮大家找到一些优质的教学视频。欢迎收藏学习。</p>
<p>https://www.bilibili.com/video/BV1xz4y1k783</p>
<h2 id="_09-pelican" tabindex="-1"> <strong>09 Pelican</strong></h2>
<img src="https://cdn.jsdelivr.net/gh/wuKongNotNull/images-hosting/wukong-website/008i3skNgy1gu1bu88su5j60u00diabf02.jpg" alt="图片" style="zoom: 67%;" />
<p>Pelican，由 Python 语言编写的静态网站生成器。</p>
<p>官网为：https://blog.getpelican.com 。</p>
<p>它是熟悉Python同学的首选，支持Markdown 和 reStructuredText 语法。</p>
<p>可以使用Jinja 模板自定义主题，支持从 WordPress 迁移博客等等。</p>
<p>它有一些新特性：</p>
<p>与外部服务集成</p>
<p>站点主题（使用Jinja2模板创建）</p>
<p>以多种语言发表文章</p>
<p>生成 Atom 和 RSS 提要</p>
<p>代码语法高亮</p>
<p>从 WordPress、Dotclear 或 RSS 源导入现有内容</p>
<p>由于内容缓存和选择性输出写入，快速重建时间</p>
<p>可通过丰富的插件生态系统进行扩展</p>
<p>我在 gitHub 上帮大家找到很多好看的主题，网站为：https://github.com/getpelican/pelican-themes ，以及大量的插件，即 https://github.com/getpelican/pelican-plugins  。</p>
<p>另外，这里帮大家找到几个优秀的网站案例，学习参考一下吧。</p>
<p>https://www.fullstackpython.com</p>
<p>https://nairobilug.github.io/pelican-alchemy</p>
<p>https://elegant.oncrashreboot.com</p>
<h2 id="_08-hexo" tabindex="-1"> <strong>08 Hexo</strong></h2>
<p><img src="https://cdn.jsdelivr.net/gh/wuKongNotNull/images-hosting/wukong-website/008i3skNgy1gu1buigawbj60u008x3ys02.jpg" alt="图片"></p>
<p>Hexo，它是一个快速简洁高效的博客框架。</p>
<p>官方网站为：https://hexo.io 。</p>
<p>使用 Markdown解析文章，只需要几秒，就能生成一个靓丽的静态网页。</p>
<p>官网支持中文，打开官方文档，有详细地使用说明，一行代码 安装搞定 npm  install -g hexo-cli  。</p>
<p>同时兼容 Window  Mac  Linux ，做到真正的跨平台。</p>
<p>它拥有丰富的插件。例如，为网站添加后台UI 界面，即：hexo-admin-ehc  ；</p>
<p>为 Hexo 添加哔哩哔哩番剧页面，即：hexo-bilibili-bangumi  ；给代码块添加codepen，即：hexo-codepen  ；整合七牛云接口 保存图片方便快捷，即：hexo-deployer-qiniucloud2  。</p>
<p>它还有丰富的主题，官网收录300多个优秀主题，下面是我精挑的几个，经供参考。</p>
<p>https://www.madelove.top</p>
<p>http://flygon.net</p>
<p>http://carlos-algms.github.io</p>
<p>https://meethigher.top</p>
<p>https://huaji8.top</p>
<p>Github 就是一个大宝藏。上面有大量 star  过万的主题，输入 hexo  theme ，排名前十的，都值得拥有。</p>
<p>若你是技术小白，我帮你找到几套教学视频，方便快速上手。</p>
<p>https://www.bilibili.com/video/av44544186</p>
<p>https://www.bilibili.com/video/BV1cW411A7Jx</p>
<p>https://www.bilibili.com/video/BV1U64y1a7tM</p>
<h2 id="_07-jekyll" tabindex="-1"> <strong>07 Jekyll</strong></h2>
<img src="https://cdn.jsdelivr.net/gh/wuKongNotNull/images-hosting/wukong-website/008i3skNgy1gu1buook6fj60u00b5myc02.jpg" alt="图片" style="zoom:50%;" />
<p>Jekyll，一个简单的博客静态站点生成器，官网为：https://jekyllrb.com 。</p>
<p>它支持Markdown 和 Textile 格式，大家熟悉的GitHub Pages ，就是基于 Jekyll 构建。使用 GitHub Pages ，就不用花钱购买服务器，直接部署网站在GitHub 上。</p>
<p>官网没有对应的中文版，我帮大家找到一个不错的中文翻译网站，网址为：http://jekyllcn.com  。</p>
<p>还帮大家找到大量的主题，</p>
<p>即：https://github.com/jekyll/jekyll/wiki/Sites  。</p>
<p>上面有很多主题，如下是我严选推荐。</p>
<p>https://www.chenjun.com</p>
<p>https://robotkang.cc/archive</p>
<p>https://developmentseed.org</p>
<p>https://www.macmillanfilms.com</p>
<p>这里帮大家找到几套教学视频，方便大家快速入门。</p>
<p>https://www.bilibili.com/video/BV1qs41157ZZ</p>
<p>https://www.bilibili.com/video/BV14x411t7ZU</p>
<p>https://www.bilibili.com/video/BV1SW411Z7q8</p>
<h2 id="_06-octpress" tabindex="-1"> **06 Octpress **</h2>
<p><img src="https://cdn.jsdelivr.net/gh/wuKongNotNull/images-hosting/wukong-website/008i3skNgy1gu1c7czmdej60u00870tf02.jpg" alt="图片"></p>
<p>Octopress，一个为黑客设计的博客网站。</p>
<p>官方网址：http://octopress.org</p>
<p>使用Ruby语言编写，基于 Jekyll设计的博客框架。它是Jekyll 的增强版，让插件的安装和删除更加容易，更容易集成样式表、图片、字体等。</p>
<p>内置对Twitter  Google Analytics 等第三方的支持，完全是Jekyll的全新升级。</p>
<p>官方提供很多炫酷的主题和插件，直接在 gitHub 上获取。网址为：</p>
<p>https://github.com/imathis/octopress/wiki/3rd-Party-Octopress-Themes</p>
<p>同时附上一些教学视频，帮助你快速搭建个人博客。</p>
<p>https://www.bilibili.com/video/BV1EE411G7yo</p>
<p>https://www.youtube.com/watch?v=kFZX9bkIgyM</p>
<h2 id="_05-hugo" tabindex="-1"> <strong>05 Hugo</strong></h2>
<img src="https://cdn.jsdelivr.net/gh/wuKongNotNull/images-hosting/wukong-website/008i3skNgy1gu1c0zt6v2j60u00hkgmx02-20211104141436959.jpg" alt="图片" style="zoom:50%;" />
<p>Hugo，一种用 Go 语言编写的静态网站生成器。简单、易用、高效、易扩展、快速部署。</p>
<p>它号称是世界上最快的框架。官网为：https://gohugo.io 。</p>
<p>它的中文网站隐藏的比较深，不过我还是帮大家找到了 ，即：</p>
<p>https://www.gohugo.org</p>
<p>Hugo 具备如下特点：</p>
<p>极快的页面编译生成速度</p>
<p>完全跨平台支持，可以运行在 Mac OS X, Linux, Windows,等</p>
<p>安装方便 Installation</p>
<p>本地调试 Usage 时通过 LiveReload 自动即时刷新页面。</p>
<p>完全的皮肤支持</p>
<p>可以部署在任何的支持 HTTP 的服务器上</p>
<p>官网提供很多优秀的网站作品，挑几个欣赏一下。</p>
<p>https://spf13.com</p>
<p>http://andrewcodispoti.com</p>
<p>https://antzucaro.com</p>
<p>http://checkmyws.github.io/yslow-rules</p>
<p>https://www.chineseboost.com</p>
<p>看过中文文档的小伙伴，会发现文档超级无敌详细。不过，还是帮小伙伴找了几个不错的教学视频，视频入门比较快。</p>
<p>https://www.bilibili.com/video/BV1q4411i7gL</p>
<p>https://www.bilibili.com/video/BV1x64y117PX</p>
<p>https://www.bilibili.com/video/BV13c411h7k7</p>
<h2 id="_04-vuepress" tabindex="-1"> <strong>04 VuePress</strong></h2>
<img src="https://cdn.jsdelivr.net/gh/wuKongNotNull/images-hosting/wukong-website/008i3skNgy1gu1bv7cejbj60u00gqgm002.jpg" alt="图片" style="zoom:50%;" />
<p>VuePress，一个以 Markdown 为中心的静态网站生成器。官网为：https://vuepress.vuejs.org 。</p>
<p>诞生的初衷是为了支持Vue 的文档需求，熟悉vue 框架的开发者首选。它可以生成一个单页面应用（SPA）。使用体验就好像手机上的app。而且对 SEO 也非常友好。</p>
<p>官网有详细的帮助文档，支持中英文语言选择，方便学习和查阅。</p>
<p>官网上的插件和主题有限，不过没有关系。我帮大家在github 上找到很多社区爱好者开发的插件和主题。非常丰富，大胆放心食用。</p>
<p>网址为：</p>
<p>https://github.com/vuepress/awesome-vuepress</p>
<p>官网也没有示例网站和模板推荐，我也帮大家找到几个不错的作品，供大家参考和学习。</p>
<p>https://thuycom.studio</p>
<p>https://www.meteorlxy.cn</p>
<p>https://zpj80231.github.io/znote</p>
<p>https://dt.in.th</p>
<p>https://cr-vue.mio3io.com</p>
<p>网上的教学视频，质量也挺高。</p>
<p>https://www.bilibili.com/video/BV17t41177cr?p=8</p>
<p>https://www.bilibili.com/video/BV1vb411m7NY</p>
<p>https://www.youtube.com/watch?v=5Kqyhu_eIcw</p>
<h2 id="_03-gitbook" tabindex="-1"> <strong>03 GitBook</strong></h2>
<img src="https://cdn.jsdelivr.net/gh/wuKongNotNull/images-hosting/wukong-website/008i3skNgy1gu1bvdq8alj60u00czmxs02.jpg" alt="图片" style="zoom:50%;" />
<p>gitbook，一个专注文档管理的平台。官方文档为：https://docs.gitbook.com/</p>
<p>网站好比一本电子书，左边目录导航 右边文章内容，适合大众的阅读习惯。</p>
<p>最初几个版本是开源的，后来进行商业化，用户一注册就可以直接发布文章。</p>
<p>但是经过我多次的踩雷，发现它致命的弱点，文档每次导出常常显示失败。而且得到是Json格式而不是html格式，也无法重新导入。</p>
<p>还有官方服务器在国外，速度和访问限制让人泪流满面，所以还是推荐大家放弃商业版，使用真香的开源版 。</p>
<p>我使用早期的 gitbook 3.0.0进行搭建个人博客。网上有大量的帮助文档可以参考。初学者入门推荐这篇：</p>
<p>https://wukongnotnull.blog.csdn.net/article/details/119711233</p>
<p>同样，这里帮大家找到一些优秀的网站案例，仅供参考。</p>
<p>https://docs.gitbook.com</p>
<p>https://docs.getcensus.com</p>
<p>http://docs.forestadmin.com</p>
<p>https://www.electronforge.io</p>
<p>推荐这2个教学视频，30分钟搞定。</p>
<p>https://www.bilibili.com/video/BV1dv411J7B8</p>
<p>https://www.bilibili.com/video/BV1Uv411p7Sg</p>
<h2 id="_02-docsify" tabindex="-1"> <strong>02 docsify</strong></h2>
<img src="https://cdn.jsdelivr.net/gh/wuKongNotNull/images-hosting/wukong-website/008i3skNgy1gu1bvlgu10j60u00eudg902.jpg" alt="图片" style="zoom:50%;" />
<p>Docsify ，官网为：https://docsify.js.org 。口号是一个神奇的文档网站生成器。</p>
<p>当我发现它时，感觉遇到了宝藏，非常兴奋。无需构建和编译成html，直接发布markdown 就搞定。</p>
<p>你要的主题和插件,我都帮你找到,放这里。https://github.com/docsifyjs/awesome-docsify  。</p>
<p>使用它的公司，也个个大牌，比如：</p>
<p>饿了么</p>
<p>https://elemefe.github.io/vue-amap</p>
<p>阿里巴巴</p>
<p>https://apache.github.io/incubator-weex-ui</p>
<p>Netflix    https://netflix.github.io/pollyjs/#/README</p>
<p>Amazon</p>
<p>https://amzn.github.io/style-dictionary</p>
<p>教学视频放在这里，欢迎自取。</p>
<p>https://www.bilibili.com/video/BV14U4y1x7jH</p>
<p>https://www.bilibili.com/video/BV1kT4y1T7wY</p>
<h2 id="_01-wordpress" tabindex="-1"> <strong>01 WordPress</strong></h2>
<img src="https://cdn.jsdelivr.net/gh/wuKongNotNull/images-hosting/wukong-website/008i3skNgy1gu1bvrb7wbj60u00bjaat02.jpg" alt="图片" style="zoom:50%;" />
<p>WordPress ，一个基于PHP和MySQL的免费开源内容管理系统。它不单单适合程序员自建网站，也适合没有技术背景的普通用户搭建个人网站或者公司门户网站。</p>
<p>官网为：https://wordpress.org 。</p>
<p>全球使用最广泛的CMS软件，8 千多个免费主题。</p>
<p>即：https://cn.wordpress.org/themes</p>
<p>5 万多个免费插件，具有强大的生态支持。通过这个链接</p>
<p>https://wordpress.org/showcase ，你可以访问到大量的优秀案例。</p>
<p>比如，波士顿大学招生网站 https://www.bu.edu/admissions</p>
<p>奥巴马个人网站 https://www.obama.org</p>
<p>这是世界上最快的男人，博尔特的个人网站  http://usainbolt.com</p>
<p>微软新闻网站 https://news.microsoft.com</p>
<p>如果免费的模板还不能让你满足，推荐2个受欢迎的收费网站，上面有大量精美的模板，即：</p>
<p>https://themeforest.net</p>
<p>https://elements.envato.com</p>
<p>wordPress教学视频网上巨多，可见它的受欢迎程度。如下推荐3套，大胆食用，感觉还不错。</p>
<p>https://www.bilibili.com/video/BV1St411s7VL</p>
<p>https://www.bilibili.com/video/BV1az4y1d7Ai</p>
<p>https://www.bilibili.com/video/BV18V411Y727</p>
]]></content:encoded>
      <enclosure url="https://cdn.jsdelivr.net/gh/wuKongNotNull/images-hosting/wukong-website/%E7%A7%91%E5%AD%A6%E4%B8%8A%E7%BD%91.png" type="image/png"/>
    </item>
    <item>
      <title>这7大技术博客平台，技术大牛偏爱，程序员的你知道几个？</title>
      <link>https://wukongnotnull.com/posts/goodshare/8.html</link>
      <guid>https://wukongnotnull.com/posts/goodshare/8.html</guid>
      <source url="https://wukongnotnull.com/rss.xml">这7大技术博客平台，技术大牛偏爱，程序员的你知道几个？</source>
      <description> 这7大技术博客平台，技术大牛偏爱，程序员的你知道几个？
第 t001 期我推荐了10大搭建个人博客框架
很多程序员觉得运维成本太高
问有没有第三方的博客平台
今天就给大家推荐一个
技术大牛喜欢写博客的地方
欢迎收藏
</description>
      <category>好物分享</category>
      <category>博客</category>
      <pubDate>Tue, 25 Oct 2022 00:00:00 GMT</pubDate>
      <content:encoded><![CDATA[<h1 id="这7大技术博客平台-技术大牛偏爱-程序员的你知道几个" tabindex="-1"> 这7大技术博客平台，技术大牛偏爱，程序员的你知道几个？</h1>
<p>第 t001 期我推荐了10大搭建个人博客框架</p>
<p>很多程序员觉得运维成本太高</p>
<p>问有没有第三方的博客平台</p>
<p>今天就给大家推荐一个</p>
<p>技术大牛喜欢写博客的地方</p>
<p>欢迎收藏</p>

<h2 id="csdn" tabindex="-1"> CSDN</h2>
<p>一个百度SEO做的非常好的博客平台</p>
<p>你在百度搜索框中输入技术问题</p>
<p>排在前面的一般都是CSDN的文章</p>
<p>程序员一般喜欢在上面发布遇到的Bug和解决方案</p>
<p>等下次遇到同样的Bug</p>
<p>可以快速地找到解决答案</p>
<p><img src="https://cdn.jsdelivr.net/gh/wuKongNotNull/images-hosting/wukong-website/csdn.png" alt=""></p>
<h2 id="掘金" tabindex="-1"> 掘金</h2>
<p>前端技术文章占据半壁江山</p>
<p>用户前端开发人员比较多</p>
<p>文章比较偏前端</p>
<p>有沸点、话题、小册、活动、专栏文章等内容</p>
<p><img src="https://cdn.jsdelivr.net/gh/wuKongNotNull/images-hosting/wukong-website/xitujuejin.png" alt=""></p>
<h2 id="博客园" tabindex="-1"> 博客园</h2>
<p>国内比较早的一个博客平台</p>
<p>上面聚集一批国内早期的程序员</p>
<p>文章质量都比较高</p>
<p>而且网页简洁交互无广告</p>
<p>在当今商业化环境中</p>
<p>博客园完全是一片净土</p>
<p>百度SEO做的也非常好</p>
<p><img src="https://cdn.jsdelivr.net/gh/wuKongNotNull/images-hosting/wukong-website/bokeyuan22.png" alt=""></p>
<h2 id="慕课网手记" tabindex="-1"> 慕课网手记</h2>
<p>慕课网上聚集一批一线大厂的程序员</p>
<p>上面有大量的免费课程</p>
<p>为它赢得很好的口碑</p>
<p>我们可以使用手记功能</p>
<p>记录自己的日常学习心得和笔记</p>
<p><img src="https://cdn.jsdelivr.net/gh/wuKongNotNull/images-hosting/wukong-website/mukewang11.png" alt=""></p>
<h2 id="segmentfault" tabindex="-1"> Segmentfault</h2>
<p>一个以技术问答起家的技术社区</p>
<p>学习或者工作中有哪些解决不了的问题</p>
<p>可以在上面提问</p>
<p>问答活跃度比较高</p>
<p>当然也可以在上面发布博客文章</p>
<p><img src="https://cdn.jsdelivr.net/gh/wuKongNotNull/images-hosting/wukong-website/Segmentfault111 .png" alt=""></p>
<h2 id="开源中国" tabindex="-1"> 开源中国</h2>
<p>开源中国是Gitee的母公司</p>
<p>上面有国内很多知名开源项目</p>
<p>同样在上面也可以发布个人博客</p>
<p>整个社区文章都比较专业</p>
<p>技术含量比较高</p>
<p><img src="https://cdn.jsdelivr.net/gh/wuKongNotNull/images-hosting/wukong-website/oschina1.png" alt=""></p>
<h2 id="腾讯云社区" tabindex="-1"> 腾讯云社区</h2>
<p>社区里你不但可以发布博客</p>
<p>还可以发布视频</p>
<p>或者进行问答</p>
<p>教学类文章比较多</p>
<p>很多作者都是腾讯在职员工</p>
<p>通过这个社区也可以认识很多腾讯大咖</p>
<p>说不定将来可以帮你内推</p>
<p><img src="https://cdn.jsdelivr.net/gh/wuKongNotNull/images-hosting/wukong-website/tengxunyun11.png" alt=""></p>
<p><strong>文章编号和龙珠码：t004</strong></p>
]]></content:encoded>
      <enclosure url="https://cdn.jsdelivr.net/gh/wuKongNotNull/images-hosting/wukong-website/csdn.png" type="image/png"/>
    </item>
    <item>
      <title>精挑41款，好用到爆的谷歌浏览器插件，每位程序员必备</title>
      <link>https://wukongnotnull.com/posts/goodshare/9.html</link>
      <guid>https://wukongnotnull.com/posts/goodshare/9.html</guid>
      <source url="https://wukongnotnull.com/rss.xml">精挑41款，好用到爆的谷歌浏览器插件，每位程序员必备</source>
      <description> 精挑41款，好用到爆的谷歌浏览器插件，每位程序员必备
文章编号：t002
众所周知，Google Chrome 浏览器可能是程序员的偏爱。
然而，不装插件的Chrome 是没有灵魂的。
作为一名程序员，你的浏览器上安装了哪些好用到爆炸的插件呢？
今天给大家安利几个程序员必备的浏览器插件。
</description>
      <category>好物分享</category>
      <category>插件</category>
      <pubDate>Tue, 25 Oct 2022 00:00:00 GMT</pubDate>
      <content:encoded><![CDATA[<h1 id="精挑41款-好用到爆的谷歌浏览器插件-每位程序员必备" tabindex="-1"> 精挑41款，好用到爆的谷歌浏览器插件，每位程序员必备</h1>
<p><strong>文章编号：t002</strong></p>
<p>众所周知，Google Chrome 浏览器可能是程序员的偏爱。
然而，不装插件的Chrome 是没有灵魂的。
作为一名程序员，你的浏览器上安装了哪些好用到爆炸的插件呢？
今天给大家安利几个程序员必备的浏览器插件。</p>

<h2 id="_1-octotree" tabindex="-1"> 1. Octotree</h2>
<p>访问全球最大的同性交友网站 GitHub 时，你是否遇到过这样的问题，
浏览一个仓库时，需要一级一级的前进和后退。
查阅代码非常不方便，而 Octotree 正好解决这一痛点。
安装后，会在浏览器侧边显示代码目录结构，方便程序员阅读源码。</p>
<p><img src="https://cdn.jsdelivr.net/gh/wuKongNotNull/images-hosting/wukong-website/QQ20211104-154710-HD.gif" alt=""></p>
<h2 id="_2-gitcodetree" tabindex="-1"> 2. GitCodeTree</h2>
<p>国外有 GitHub，国内有 Gitee。相比 GitHub，Gitee 的访问速度比较快。
同样 Gitee 中的仓库默认也没有目录结构，安装这个插件可以解决这个问题。
基于 Octotree 的码云文件树插件。在Gitee上显示代码树。不用clone到本地就能查看项目结构。
就像在IDE一样简单易用的代码树，快速浏览文件，不会刷新页面。</p>
<p><img src="https://cdn.jsdelivr.net/gh/wuKongNotNull/images-hosting/wukong-website/gitee.gif" alt="gitee"></p>
<h2 id="_3-gitlab-tree" tabindex="-1"> 3. GitLab Tree</h2>
<p>访问 GitLab 网站时候，会遇到同样的目录导航问题，这里推荐 gitLab Tree。
Chrome 扩展以树格式显示 Gitlab 代码。
支持所有企业内网 gitlab 服务，易于导航的代码树，如 web IDE，简单且非侵入性。
UI 看起来像 Gitlab 默认 UI ，热键支持。</p>
<h2 id="_4-whatruns" tabindex="-1"> 4. WhatRuns</h2>
<p>安装这款插件后，单击 WhatRuns 图标，就可以了解到当前网站使用了哪些技术。
完全不需要去读源码。
WhatRuns 几乎可以检测运行网站的框架、网络技术、CMS（及其插件）、主题和字体等等。
对您的浏览器的负担更轻，检测精度更高，甚至可以识别最新的技术和插件。</p>
<p><img src="https://cdn.jsdelivr.net/gh/wuKongNotNull/images-hosting/wukong-website/whatrun.jpg" alt="whatruns"></p>
<h2 id="_5-postwoman" tabindex="-1"> 5. PostWoman</h2>
<p>作为一名后端程序员对 Postman 一定不陌生，
而 PostWoman 感觉比 Postman 更好用。
支持常见4种请求方法，支持历史记录保存，和数据的同步。
它是一个完全开源免费的接口调试插件，该插件可独立使用，数据支持本地存储也可同步至云端。
PostWoman集成了二维码、Json、时间转换、UrlDecode 等常用开发工具。
相比于Postman等插件，apiDebug有完善的接口管理系统，系统支持接口、文档等管理等。
产品开发来着BAT，拥有丰富的接口开发、调试经验，产品不断更新迭代，更适合国内用户使用。</p>
<p><img src="https://cdn.jsdelivr.net/gh/wuKongNotNull/images-hosting/wukong-website/postwoman.jpg" alt="postwoman"></p>
<h2 id="_6-vimium" tabindex="-1"> 6. Vimium</h2>
<p>这个插件可以让你脱离鼠标，操作浏览器的任何地方。
按下 shift + ? ，可以获得所有快捷键列表。
根据列表我们知道，按下 j  表示向下滚动，
按下 k 表示 向上滚动，按下大写F  表示在新标签页中打开某链接，
按下小写f  表示在当前标签页打开某链接，其他快捷键欢迎大家自己挖掘尝试。</p>
<img src="https://cdn.jsdelivr.net/gh/wuKongNotNull/images-hosting/wukong-website/vimium.png" style="zoom:50%;" />
<h2 id="_7-clipboard-helper" tabindex="-1"> 7. Clipboard Helper</h2>
<p>剪贴板助手是一款免费的剪贴板历史记录应用程序。
当你在浏览器上复制某文本时，自动保存到该应用软件中，
被保存下来的内容，可以编辑或者删除。
它节省了从浏览器和其他应用程序复制的文本和可访问保存的项目。
该应用程序在本地存储数据。使用“全部删除”按钮，清除数据。
您可以随时删除的应用程序完全删除所有数据！</p>
<p><img src="https://cdn.jsdelivr.net/gh/wuKongNotNull/images-hosting/wukong-website/clipboard.jpg" alt=""></p>
<h2 id="_8-onetab" tabindex="-1"> 8. OneTab</h2>
<p>在查询资料的时候，会打开很多标签页，一旦关闭浏览器，这些标签页就消失了。
单击OneTab图标，会将所有标签页转换成一个列表。
方便以后再次访问，同时列表可以分组保存，支持标签页的恢复和删除。
号称，节省高达95％的内存，并减轻标签页混乱现象。
<img src="https://cdn.jsdelivr.net/gh/wuKongNotNull/images-hosting/wukong-website/onetab.jpg"  /></p>
<h2 id="_9-adblock-plus" tabindex="-1"> 9. Adblock Plus</h2>
<p>当你打开某些国外网站的时候，经常会遇到各种广告，
这个插件能帮你很好的屏蔽掉，设置后再次刷新，
广告去无踪，使用百度搜索引擎的时候，
搜索列表中会有大量广告，这个插件也可以非常有效的拦截各类广告。
世界各地有数百万用户在使用它。
它是一个社区驱动的开源项目，有数百名志愿者为 Adblock Plus 的成功作出了贡献。</p>
<p><img src="https://cdn.jsdelivr.net/gh/wuKongNotNull/images-hosting/wukong-website/adblock.jpg" alt=""></p>
<h2 id="_10-ublock-origin" tabindex="-1"> 10. uBlock Origin</h2>
<p>它是比 Adblock 性能更高的广告过滤插件，占用极低的内存和 CPU。
可以自主选择哪些网站广告不显示，哪些网站广告允许显示。
点击弹出窗口中的电源按钮，uBlock₀ 将对当前网页永久禁用/启用过滤功能。
同时，它不只是一个广告拦截工具，它还可以从 hosts 文件里读取和创建过滤规则。
遵从 GPLv3 公共许可协议开源，永久免费，放心使用。</p>
<p><img src="https://cdn.jsdelivr.net/gh/wuKongNotNull/images-hosting/wukong-website/ublock origin.jpg" alt=""></p>
<h2 id="_11-sourcegraph" tabindex="-1"> 11. Sourcegraph</h2>
<p>谷歌和 Facebook 投资 1 亿美元开发的插件，这里以GitHub为例，
光标定位输入框，你会发现多出一个搜索方式。
打开某个仓库，注意图标左边会多出一个新图标，
点击该图标，整个仓库源码会在 Soucegraph 网站中展现，
左边目录结构，右边源码，阅读源码一目了然，
选中某个源码，可以查看它的被定义处，和在哪些地方被引用，
搜索框中输入关键词，搜索范围不局限标题和项目描述，
可以查看该关键词在哪些文件中出现过，是不是很强大。</p>
<p><img src="https://cdn.jsdelivr.net/gh/wuKongNotNull/images-hosting/wukong-website/sourcegraph.jpg" alt=""></p>
<h2 id="_12-google-翻译" tabindex="-1"> 12. Google 翻译</h2>
<p>成为一名合格的程序员，英文水平至关重要。
选中不认识的英文单词，可以快速帮你翻译成中文，支持中英文朗读。
该插件还会自动检测您所在页面的语言是否与你用于 Google Chrome 界面的语言不同。
如果是，页面顶部会出现一个横幅。单击横幅中的翻译按钮，以新语言显示页面上的所有文本。</p>
<p><img src="https://cdn.jsdelivr.net/gh/wuKongNotNull/images-hosting/wukong-website/google-transaction.jpg" alt=""></p>
<h2 id="_13-有道词典" tabindex="-1"> 13. 有道词典</h2>
<p>Chrome浏览器下，有道词典也很深受国内程序员的喜欢。
如果你不想科学上网，这个插件也是不错的选择。
功能和Google翻译类似。</p>
<p><img src="https://cdn.jsdelivr.net/gh/wuKongNotNull/images-hosting/wukong-website/youdao.jpg" alt=""></p>
<h2 id="_14-crxmouse-chrome" tabindex="-1"> 14. crxMouse Chrome</h2>
<p>它将鼠标的所有操作发挥到极致，比如按住右键,向下拖动，
表示向下滚动页面，按住右键向上拖动，
页面向上滚动，按住右键鼠标向左拖动，
返回到上一页，按住左键并拖动链接，
在新标签页中打开链接，更多有趣的操作看官网介绍。</p>
<div><pre><code>鼠标手势内置动作： 
按+按住右键（在屏幕上的任意位置）并拖动以执行以下操作： 
↓→：关闭当前选项卡
↓→↑：打开一个新窗口
←：返回
←↑：重新打开关闭的标签页
→：前进
→↓：滚动到底部
→↑：滚动到顶部
↑：向上滚动一页
↑↓：刷新
↑↓↑：强制刷新
↑←：移至左侧标签
↑→：移至右侧标签
↓→↓：关闭当前窗口
</code></pre><div aria-hidden="true"><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div></div></div><p><img src="https://cdn.jsdelivr.net/gh/wuKongNotNull/images-hosting/wukong-website/crxmouse.jpg" alt=""></p>
<h2 id="_15-gitzip" tabindex="-1"> 15. Gitzip</h2>
<p>它可以帮你下载GitHub上的任意目录和文件，
双击选中文件，点击右下角图标，
下载成功并获得一个zip文件，不必仅为需要的那几个文件/目录下载整个项目。</p>
<p><img src="https://cdn.jsdelivr.net/gh/wuKongNotNull/images-hosting/wukong-website/gitzip.jpg" alt=""></p>
<h2 id="_16-fehelper" tabindex="-1"> 16. FEHelper</h2>
<p>一个前端开发者都安装的插件，好像一个工具市场。
默认安装Json美化工具，支持二维码生成和解码，
信息编码转换，随机密码生成，
Markdown 工具，网页截屏工具，网页栅格标尺等等。
更多功能可在配置页按需安装！</p>
<p><img src="https://cdn.jsdelivr.net/gh/wuKongNotNull/images-hosting/wukong-website/fehelper.jpg" alt=""></p>
<h2 id="_17-github加速" tabindex="-1"> 17. GitHub加速</h2>
<p>国内环境 Github 源码下载很慢，用上了这个插件后，
下载速度嗖嗖嗖的快，插件安装成功后，
在仓库上生成加速图标，点击图标，
选择不同渠道加速下载源码。</p>
<p><img src="https://cdn.jsdelivr.net/gh/wuKongNotNull/images-hosting/wukong-website/github加速.jpg" alt=""></p>
<h2 id="_18-githuber" tabindex="-1"> 18. GITHUBER</h2>
<p>该插件帮助开发者，找到 GitHub上优质的内容，
点击浏览器的新标签，根据Github Trending，
展示所有编程语言的每日、每周、每月热门项目 以及开发者。
支持四大搜索引擎：谷歌、百度、必应、雅虎、DuckDuckGo。
添加便捷书签（右键进入编辑模式，编辑模式下支持双击编辑、拖拽排序、删除书签等）。
项目开源，方便大家进行代码审计、添加新功能。
支持中英文、备份数据、以及基本视图设置。</p>
<p><img src="https://cdn.jsdelivr.net/gh/wuKongNotNull/images-hosting/wukong-website/githuber.jpg" alt=""></p>
<h2 id="_19-enhanced-github" tabindex="-1"> 19. Enhanced GitHub</h2>
<p>这个插件可以显示整个项目的大小，还可以显示每个文件的大小，
按住Ctrl 键并单击文件可以进行下载，打开文件 点击 Copy File，
可以一键复制文件。</p>
<p><img src="https://cdn.jsdelivr.net/gh/wuKongNotNull/images-hosting/wukong-website/enhanced-github.jpg" alt=""></p>
<h2 id="_20-lastpass" tabindex="-1"> 20. LastPass</h2>
<p>一个大名鼎鼎的密码管理软件，
Chrome 安装后可以用它来存储密码，
作为程序员会注册很多网站账号，
可以通过它保存用户名和密码，方便下次快速登录，
不要再浪费时间被帐户锁定或在线填写密码和表格，
可以通过保存你的地址、信用卡号等快速填写表格 ，
可以保存护照、保险卡和其他任何您想确保安全的物品 ，
可以在任何设备上免费获取所有数据，并同步到所有其他设备上。
<img src="https://cdn.jsdelivr.net/gh/wuKongNotNull/images-hosting/wukong-website/lastpass.jpg" alt=""></p>
<h2 id="_21-great-suspender" tabindex="-1"> 21. Great Suspender</h2>
<p>程序员写代码时，
经常需要上网查阅资料，
会打开一堆标签页，
这样很消耗内存资源，
这个插件可以将没有激活的标签页暂停，
从而节省你的系统资源，
打开再多的标签都不会太卡。</p>
<p><img src="https://cdn.jsdelivr.net/gh/wuKongNotNull/images-hosting/wukong-website/great-suspender.jpg" alt=""></p>
<h2 id="_22-绿色搜索" tabindex="-1"> 22. 绿色搜索</h2>
<p>使用百度搜索时，
前几条永远是广告推荐，
这个插件可以屏蔽广告，
或者移除或者弱化显示。</p>
<p><img src="https://cdn.jsdelivr.net/gh/wuKongNotNull/images-hosting/wukong-website/绿色搜索.jpg" alt=""></p>
<h2 id="_23-infinity" tabindex="-1"> 23. Infinity</h2>
<p>这个插件帮助你自定义新标签页，
安装该扩展后，
你可以管理网站书签和历史记录，
自定义新标签页壁纸，
自定义搜索引擎，
自定义网页导航等等。</p>
<div><pre><code>Infinity功能简介：
一 、精美的图标（logo）：扁平化设计风格，国内外200多个热门常用图标。
二、高清壁纸：从3万5千张超清壁纸中，一张一张搭配图标，精心挑选出365张，形成每日一图;当然你也可以从你自己电脑上选择图片作为壁纸。
三、云同步：时间备份数据到云端，一键从云端恢复。
四、智能邮件通知：Gmail邮件自动提醒功能。
五、待办事项：随时查看你要做的事和你做过的事。
六、个性化搜索：你可以选择你想使用的搜索引擎，你还可以定制个人的附加搜索引擎。
七、 App扩展管理：随时随地快捷方便的管理你的扩展。
八、历史记录管理：查看搜索你的记录。
九、笔记：记录生活点滴。
</code></pre><div aria-hidden="true"><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div></div></div><p><img src="https://cdn.jsdelivr.net/gh/wuKongNotNull/images-hosting/wukong-website/infinity.jpg" alt=""></p>
<h2 id="_24-convertio" tabindex="-1"> 24. Convertio</h2>
<p>在线将文件从一种格式转换为另一种格式，
支持超过 2500 种不同的转换，
程序员经常遇到，
将 PDF 转换成 Word 或 HTML 格式，
还有大量的图片格式转换，
完全是前端开发人员的福音。</p>
<p><img src="https://cdn.jsdelivr.net/gh/wuKongNotNull/images-hosting/wukong-website/convertio.jpg" alt=""></p>
<h2 id="_25-screen-shader" tabindex="-1"> 25. Screen Shader</h2>
<p>程序员每天都要对着电脑屏幕，
保护眼睛变得非常重要，
这个插件能够调整像素，
让屏幕红光多蓝光少，
保护程序员的眼睛，
可以设置不同时间段显示不同像素，
非常地神奇。</p>
<p><img src="https://cdn.jsdelivr.net/gh/wuKongNotNull/images-hosting/wukong-website/screen-shader.jpg" alt=""></p>
<h2 id="_26-chrono" tabindex="-1"> 26. Chrono +</h2>
<p>浏览器默认下载功能不是太好用，
这款插件专注于增强下载管理界面，
安装之后，
下载就有了查看暂停删除重新下载等功能，
还增加了网页资源嗅探功能，
让我们下载网页图片和文档更加简单，</p>
<p><img src="https://cdn.jsdelivr.net/gh/wuKongNotNull/images-hosting/wukong-website/chrono-downloader.jpg" alt=""></p>
<h2 id="_27-clean-all" tabindex="-1"> 27. Clean All</h2>
<p>浏览器留存了太多缓存垃圾怎么办，
之前访问的页面不想留下痕迹怎么办，
安装这款插件 一键清除，
尤其在前端页面调试的时候，
缓存数据非常影响测试结果。</p>
<p><img src="https://cdn.jsdelivr.net/gh/wuKongNotNull/images-hosting/wukong-website/clean-all.jpg" alt=""></p>
<h2 id="_28-trackr" tabindex="-1"> 28. Trackr</h2>
<p>程序员每天要访问大量网页，
想知道自己每天的时间都花在哪里，
这个插件可以帮你统计出来，
打开新标签页呈现图表结果。</p>
<p><img src="https://cdn.jsdelivr.net/gh/wuKongNotNull/images-hosting/wukong-website/trackr.jpg" alt=""></p>
<h2 id="_29-selection-search-右键搜" tabindex="-1"> 29. Selection Search 右键搜</h2>
<p>默认情况下，
选中文本 右击菜单中默认显示在百度中搜索，
如何选择不同的搜索引擎呢，
比如Google  Stackoverflow 等，
这个插件可以自定义设置。</p>
<p><img src="https://cdn.jsdelivr.net/gh/wuKongNotNull/images-hosting/wukong-website/Selection-Search.jpg" alt=""></p>
<h2 id="_30-graphitabs" tabindex="-1"> 30. Graphitabs</h2>
<p>打开标签页过多，
很难找到自己需要的那个页面，
这个插件可以形成一个思维导图，
帮助你快速定位，
让标签页变得有序，
轻松管理它们。</p>
<p><img src="https://cdn.jsdelivr.net/gh/wuKongNotNull/images-hosting/wukong-website/graphitabs.jpg" alt=""></p>
<h2 id="_31-简悦" tabindex="-1"> 31. 简悦</h2>
<p>阅读技术文章的时候，
常常被两侧的内容干扰，
这个插件瞬间让你，
进入沉浸式阅读模式。</p>
<p><img src="https://cdn.jsdelivr.net/gh/wuKongNotNull/images-hosting/wukong-website/jianyue.jpg" alt=""></p>
<h2 id="_32-code-cola" tabindex="-1"> 32. Code Cola</h2>
<p>一款可视化在线编辑样式的插件，
前端开发者一定比较喜欢这个功能，
可以在浏览器上直接修改样式并进行预览，
对页面样式的调试非常有帮助。</p>
<p><img src="https://cdn.jsdelivr.net/gh/wuKongNotNull/images-hosting/wukong-website/code-cola.jpg" alt=""></p>
<h2 id="_33-postman" tabindex="-1"> 33. Postman</h2>
<p>postman 是后端开发人员比较熟悉工具，
这个插件是简易版，
可以添加请求头 请求参数，
多种请求方法可供选择，
基本接口测试功能都能满足。</p>
<p><img src="https://cdn.jsdelivr.net/gh/wuKongNotNull/images-hosting/wukong-website/postman-article.jpg" alt=""></p>
<h2 id="_34-zenhub-for-github" tabindex="-1"> 34. ZenHub for GitHub</h2>
<p>这个插件可以让 Issues 功能变得更加强大，
新建的Issue可以进行归类，
每个 Issue  可以设置任务完成时间，
可以按照 Issue 的不同状态，
进行归类呈现，
是一个非常好用的任务板块。</p>
<p><img src="https://cdn.jsdelivr.net/gh/wuKongNotNull/images-hosting/wukong-website/zenhub.jpg" alt=""></p>
<h2 id="_35-google学术搜索按钮" tabindex="-1"> 35. Google学术搜索按钮</h2>
<p>学习计算机的同学，
不可避免的需要查阅技术文献，
安装这个插件，
可以快速地搜索到学术论文，
遇到喜欢的文章还可以收藏到个人图书馆，
方便将来重复阅读。</p>
<p><img src="https://cdn.jsdelivr.net/gh/wuKongNotNull/images-hosting/wukong-website/google-xueshu.jpg" alt=""></p>
<h2 id="_36-isometric-contributions" tabindex="-1"> 36. Isometric Contributions</h2>
<p>怎样让Github 的贡献图变得更加高大上，
这个插件是很好的选择，
它可以将贡献图变成 3D效果，
非常美观有气势。</p>
<p><img src="https://cdn.jsdelivr.net/gh/wuKongNotNull/images-hosting/wukong-website/isomtric-contribution.jpg" alt=""></p>
<h2 id="_37-稀土掘金" tabindex="-1"> 37. 稀土掘金</h2>
<p>在新标签页上展示聚合内容，
可以快速搜索GitHub 博客园等平台文章，
可以快捷选择程序员常用的搜索引擎。</p>
<p><img src="https://cdn.jsdelivr.net/gh/wuKongNotNull/images-hosting/wukong-website/juejin.jpg" alt=""></p>
<h2 id="_38-page-ruler-redux" tabindex="-1"> 38. Page Ruler Redux</h2>
<p>前端开发者在调试网页的时候，
需要查看网页中元素的尺寸，
这个插件一定能够帮助到你，
选择某一区可以显示宽高边距等数据。</p>
<p><img src="https://cdn.jsdelivr.net/gh/wuKongNotNull/images-hosting/wukong-website/page-ruler.jpg" alt=""></p>
<h2 id="_39-user-agent-switcher-for-chrome" tabindex="-1"> 39. User-Agent Switcher for Chrome</h2>
<p>网页结构和样式，
在不同的浏览器上呈现的结果有时候是不一样的，
如何测试网页的自适应情况，
这个插件可以测试不同的浏览器的效果，
前端小伙伴都觉得非常方便。</p>
<p><img src="https://cdn.jsdelivr.net/gh/wuKongNotNull/images-hosting/wukong-website/user-switcher.png" alt=""></p>
<h2 id="_40-similarweb" tabindex="-1"> 40. SimilarWeb</h2>
<p>作为网站开发者，
网站的用户访问数据和流量分析，
变得非常重要，
这个插件可以帮助你，
统计流量来源和排名等信息。</p>
<p><img src="https://cdn.jsdelivr.net/gh/wuKongNotNull/images-hosting/wukong-website/similar-web.jpg" alt=""></p>
<h2 id="_41-table-of-contents-sidebar" tabindex="-1"> 41. Table of contents sidebar</h2>
<p>当你在阅读一篇很长的技术文章，
喜欢能够看到文章的整体轮廓，
这个插件捕捉不同级别标题元素，
实现内容目录的功能。</p>
<p><img src="https://cdn.jsdelivr.net/gh/wuKongNotNull/images-hosting/wukong-website/content-web.png" alt=""></p>
<p>好了，本期分享就到这里
忘记自我介绍了
我是悟空非空也的悟空
一枚精通各语言拼写的野生程序员
如果你喜欢我的分享
感谢转发评论点赞
外加一个大大的关注
下载插件的方法我已经整理好
制作成一颗龙珠
龙珠码为  t002
恭喜你
今天又收集到一颗宝藏龙珠</p>
<pre><code>读不在三更五鼓
功只怕一曝十寒
</code></pre>
]]></content:encoded>
      <enclosure url="https://cdn.jsdelivr.net/gh/wuKongNotNull/images-hosting/wukong-website/QQ20211104-154710-HD.gif" type="image/gif"/>
    </item>
    <item>
      <title>人事面试问题集锦</title>
      <link>https://wukongnotnull.com/posts/interview/hr.html</link>
      <guid>https://wukongnotnull.com/posts/interview/hr.html</guid>
      <source url="https://wukongnotnull.com/rss.xml">人事面试问题集锦</source>
      <category>面试</category>
      <pubDate>Mon, 24 Oct 2022 00:00:00 GMT</pubDate>
      <content:encoded><![CDATA[<h1 id="人事面试问题集锦" tabindex="-1"> 人事面试问题集锦</h1>
<h2 id="请做一下自我介绍" tabindex="-1"> 请做一下自我介绍</h2>
<p><strong>回答提示：</strong> 一般人回答这个问题过于平常，只说姓名、年龄、工作经验，这些在简历上都有。其实，企业最希望知道的是求职者能否胜任工作，包括：最强的技能、最深入研究的知识领域、个性中最积极的部分、做过的最成功的事，主要的成就等，要突出积极的个性和做事的能力，说的合情合理企业才会相信。</p>
<h2 id="你最大的优点是什么" tabindex="-1"> 你最大的优点是什么？</h2>
<p><strong>回答提示：</strong> 沉着冷静、条理清楚、立场坚定、乐于助人等，加上例子如：我在XX经过一到两年的培训及项目实战，加上实习工作，我想我适合这份工作。</p>
<h2 id="说说你最大的缺点" tabindex="-1"> 说说你最大的缺点？</h2>
<p><strong>回答提示：</strong> 这个问题企业问的概率很大，通常不希望听到直接回答的缺点是什么等，如果求职者说自己小心眼、非常懒、工作效率低，企业肯定不会录用你。要从自己的优点说起，中间加一些小缺点，最后再把问答转回到优点上，突出优点的部分。</p>
<h2 id="说说你对加班的看法" tabindex="-1"> 说说你对加班的看法？</h2>
<p><strong>回答提示：</strong> 实际上好多公司问这个问题，并不证明一定要加班，只是想测试你是否愿意为公司奉献。</p>
<p><strong>回答样本：</strong> 如果是工作需要我会义不容辞加班，我现在单身，没有任何家庭负担，可以全身心的投入工作。但同时，我也会提高工作效率，减少不必要的加班。</p>
<h2 id="说说你对薪资的要求" tabindex="-1"> 说说你对薪资的要求？</h2>
<p><strong>回答提示：</strong> 如果你对薪资的要求太低，那显然贬低自己的能力；如果你对薪资的要求太高，那又会显得你分量过重，公司受用不起。一些雇主通常都事先对求聘的职位定下开支预算，因而他们第一次提出的价钱往往是他们所能给予的最高价钱，他们问你只不过想证实一下这笔钱是否足以引起你对该工作的兴趣。</p>
<p><strong>回答样本：</strong></p>
<p>①我对工资没有硬性要求，我相信贵公司会友善合理。我注重的是找到工作机会，所以只要条件公平，我则不会计较太多。</p>
<p>②我受过系统的软件编程的训练，不需要进行大量的培训，而且我本人也对编程特别感兴趣。因此，我希望公司能根据我的情况和市场标准的水平，给我合理的薪水。</p>
<p>③如果你必须自己说出具体数目，请不要说一个宽泛的范围，那样你将只能得到最低限度的数字。最好给出一个具体的数字，这样表明你已经对当今的人才市场做了调查，知道像自己这样学历的雇员有什么样的价值。</p>
<h2 id="在五年内-你的职业规划" tabindex="-1"> 在五年内，你的职业规划？</h2>
<p><strong>回答提示：</strong> 这是每一个应聘者都不希望被问到的问题，但是几乎每个人都会被问到，比较多的答案是“管理者”。当然，说出其他一些你感兴趣的职位也是可以的。要知道，考官总是喜欢有进取心的应聘者，此时如果说“不知道”，或许就会使你丧失一个好机会。最普通的回答应该是“我准备在技术领域有所作为”或“我希望能按照公司的管理思路发展”。</p>
<h2 id="你朋友对你的评价" tabindex="-1"> 你朋友对你的评价?</h2>
<p><strong>回答提示：</strong> 想从侧面了解一下你的性格及与人相处的问题。</p>
<p><strong>回答样本：</strong></p>
<p>①我朋友都说我是一个可以信赖的人。因为，我一旦答应别人的事情，就一定会做到。如果我做不到，我就不会轻易许诺。</p>
<p>②我觉的我是一个比较随和的人，与不同的人都可以友好相处。在我与人相处时，我总是能站在别人的角度考虑问题。</p>
<h2 id="你还有什么问题要问吗" tabindex="-1"> 你还有什么问题要问吗?</h2>
<p><strong>回答提示：</strong> 企业的这个问题看上去可有可无，其实很关键，企业不喜欢说“没问题”的人，因为其很注重员工的个性和创新能力。企业不喜欢求职者问个人福利之类的问题，如果有人这样问：贵公司对新入公司的员工有没有什么培训项目，我可以参加吗？或者说贵公司的晋升机制是什么样的？企业将很欢迎，因为体现出你对学习的热情和对公司的忠诚度以及你的上进心。</p>
<h2 id="录用后发现不适合这个职位-怎么办" tabindex="-1"> 录用后发现不适合这个职位，怎么办?</h2>
<p><strong>回答提示：</strong> 工作一段时间发现工作不适合，有两种情况：①如果你确实热爱这个职业，那就要不断学习，虚心向领导和同事学习业务知识和处事经验，了解这个职业的精神内涵和职业要求，力争减少差距；②你觉得这个职业可有可无，那还是趁早换个职业，去发现适合你的，你热爱的职业，那样你的发展前途也会大点，对单位和个人都有好处。</p>
<h2 id="工作时跟领导意见不同怎么办" tabindex="-1"> 工作时跟领导意见不同怎么办?</h2>
<p><strong>回答样本：</strong> ①原则上我会尊重和服从领导的工作安排，同时私底下找机会以请教的口吻，婉转地表达自己的想法，看看领导是否能改变想法。②如果领导没有采纳我的建议，我也同样会按领导的要求认真地去完成这项工作。③还有一种情况，假如领导要求的方式违背原则，我会坚决提出反对意见，如领导仍固执己见，我会毫不犹豫地再向上级领导反映。</p>
<h2 id="工作出现失误并造成损失-你会怎么做" tabindex="-1"> 工作出现失误并造成损失，你会怎么做?</h2>
<p><strong>回答样本：</strong> ①我本意是为公司努力工作，如果造成经济损失，我认为首要的问题是想方设法去弥补或挽回经济损失。如果我无能力负责，希望单位帮助解决。</p>
<p>②分清责任，各负其责，如果是我的责任，我甘愿受罚；如果是一个我负责的团队中别人的失误，也不能幸灾乐祸，作为一个团队，需要互相提携共同成工作，安慰同事并且帮助同事查找原因总结经验。</p>
<p>③个人的一生不可能不犯错误，重要的是能从自己的或者是别人的错误中吸取经验教训，要检讨自己的工作方法、分析问题的深度和力度。</p>
<h2 id="谈谈你对跳槽的看法" tabindex="-1"> 谈谈你对跳槽的看法?</h2>
<p><strong>回答样本：</strong> ①正常的“跳槽”能够促进人才合理流动，应该支持。②频繁的跳槽对单位和个人双方都不利，应该反对。</p>
<h2 id="和同事、上司难以相处-你怎么办" tabindex="-1"> 和同事、上司难以相处，你怎么办?</h2>
<p><strong>回答样本：</strong> ①我会服从领导的指挥，配合同事的工作。②我会从自身找原因，仔细分析是不是自己工作做得不好。还要看看是不是为人处世方面做得不好，如果是这样的话我会努力改正。③如果我找不到原因，我会找机会跟他们沟通，请他们指出我的不足，及时改正。④作为优秀的员工，应该时刻以大局为重，即使在一段时间内，领导和同事对我不理解，我也会做好本职工作，虚心向他们学习，我相信，他们会看见我的努力。</p>
<h2 id="上级领导抢了你的功劳怎么办" tabindex="-1"> 上级领导抢了你的功劳怎么办?</h2>
<p><strong>回答样本：</strong> 首先我不会找那位上级领导说明这事，我会主动找我的主管领导来沟通，因为沟通是解决人际关系的最好办法，但结果会有两种：①我的主管领导认识到自己的错误，我想我会视具体情况决定是否原谅他。②他更加变本加厉的来威胁我，那我会毫不犹豫地找我的上级领导反映此事，因为他这样做会造成负面影响，对今后的工作不利。</p>
<h2 id="同事孤立你-你怎么办" tabindex="-1"> 同事孤立你，你怎么办?</h2>
<p><strong>回答样本：</strong> ①检讨一下自己是不是对工作的热心度超过同事间交往的热心了，加强同事间的交往及共同的兴趣爱好。②工作中，切勿伤害别人的自尊心。③不在领导前拨弄是非。</p>
<h2 id="你最近是否参加了培训课程" tabindex="-1"> 你最近是否参加了培训课程?</h2>
<p><strong>回答提示：</strong> 自费参加，就是XX的培训课程（可以多谈谈自己学的技术）。</p>
<h2 id="你对于我们公司了解多少" tabindex="-1"> 你对于我们公司了解多少?</h2>
<p><strong>回答提示：</strong> 在去公司面试前上网查一下该公司主营业务。可类似回答：贵公司有意改变策略，加强与国外大厂的OEM合作，自有品牌的部分则透过海外经销商。</p>
<h2 id="你最擅长的技术方向是什么" tabindex="-1"> 你最擅长的技术方向是什么?</h2>
<p><strong>回答提示：</strong> 说和你要应聘的职位相关的技术，表现一下自己的热诚没有什么坏处。</p>
<h2 id="请说出你选择这份工作的动机" tabindex="-1"> 请说出你选择这份工作的动机?</h2>
<p><strong>回答提示：</strong> 这是想知道面试者对这份工作的热忱及理解度，并筛选因一时兴起而来应试的人，如果是无经验者，可以强调“就算职种不同，也希望有机会发挥之前的经验”。</p>
<p><strong>回答样本：</strong> 因为我很热爱这个工作，很想从事这方面的工作。</p>
<h2 id="你能为我们公司带来什么呢" tabindex="-1"> 你能为我们公司带来什么呢?</h2>
<p><strong>回答提示：</strong> ①假如你可以的话，试着告诉他们你可以减低他们的费用“我已经接受过XX近两年专业的培训，立刻就可以上岗工作”。②企业很想知道未来的员工能为企业做什么，求职者应再次重复自己的优势，然后表示：“就我的能力，我可以做一个优秀的员工在组织中发挥能力，给组织带来高效率和更多的收益”。企业喜欢求职者就申请的职位表明自己的能力，比如申请营销之类的职位，可以说：“我可以开发大量的新客户，同时，对老客户做更全面周到的服务，开发老客户的新需求和消费。” 等等。</p>
<h2 id="最能概括你自己的三个词" tabindex="-1"> 最能概括你自己的三个词?</h2>
<p><strong>回答样本：</strong> 我经常用的三个词是：适应能力强，有责任心和做事有始终，并结合具体例子向主考官解释。</p>
<h2 id="作为被面试者给我打一下分" tabindex="-1"> 作为被面试者给我打一下分?</h2>
<p><strong>回答提示：</strong> 试着列出四个优点和一个非常非常非常小的缺点（可以抱怨一下设施，没有明确责任人的缺点是不会有人介意的）。</p>
<h2 id="你怎么理解你应聘的职位" tabindex="-1"> 你怎么理解你应聘的职位?</h2>
<p><strong>回答提示：</strong> 可以把岗位职责和任务及工作态度阐述下。</p>
<h2 id="喜欢这份工作的哪一点" tabindex="-1"> 喜欢这份工作的哪一点?</h2>
<p><strong>回答提示：</strong> 在回答面试官这个问题时不能太直接就把自己心理的话说出来，尤其是薪资方面的问题，不过一些无伤大雅的回答是不错的考虑，如交通方便，工作性质及内容颇能符合自己的兴趣等等都是不错的答案，不过如果这时自己能仔细思考出这份工作的与众不同之处，相信在面试上会大大加分。</p>
<h2 id="为什么要离职" tabindex="-1"> 为什么要离职?</h2>
<p><strong>回答提示：</strong> ①回答这个问题时一定要小心，就算在前一个工作受到再大的委屈，对公司有多少的怨言都千万不要表现出来，尤其要避免对公司本身主管的批评，避免面试官的负面情绪及印象。建议此时最好的回答方式是将问题归咎在自己身上，例如觉得工作没有学习发展的空间，自己想在面试工作的相关产业中多加学习，或是前一份工作与自己的生涯规划不合等等，回答的答案最好是积极正面的。②我希望能获得一份更好的工作，如果机会来临，我会抓住。我觉得目前的工作，已经达到顶峰，即没有升迁机会。</p>
<h2 id="说说你对行业、技术发展趋势的看法" tabindex="-1"> 说说你对行业、技术发展趋势的看法?</h2>
<p><strong>回答提示：</strong> 企业对这个问题很感兴趣，只有有备而来的求职者能够过关。求职者可以直接在网上查找对你所申请的行业部门的信息，只有深入了解才能产生独特的见解。企业认为最聪明的求职者是对所面试的公司预先了解很多，包括公司各个部门，发展情况，在面试回答问题的时候可以提到所了解的情况，企业欢迎进入企业的人是“知己”，而不是“盲人”。</p>
<h2 id="对工作的期望与目标何在" tabindex="-1"> 对工作的期望与目标何在?</h2>
<p><strong>回答提示：</strong> 这是面试者用来评断求职者是否对自己有一定程度的期望、对这份工作是否了解的问题。
对于工作有确实学习目标的人通常学习较快，对于新工作自然较容易进入状况，这时建议你，最好针对工作的性质找出一个确实的答案，如业务员的工作可以这样回答：“我的目标是能成为一个超级业务员，将公司的产品广泛的推销出去，达到最好的业绩成效；为达到这个目标，我一定会努力学习，而我相信以我认真负责的态度，一定可以达到这个目标。” 其他类的工作也可以比照这个方式回答，只要在目标方面稍微修改一下就可以了。</p>
<h2 id="谈谈你的家庭" tabindex="-1"> 谈谈你的家庭?</h2>
<p><strong>回答提示：</strong> 企业面试时询问家庭问题不是非要知道求职者家庭的情况，而是要了解家庭背景对求职者的塑造和影响。企业希望听到的重点也在于家庭对求职者的积极影响。</p>
<p><strong>回答样本：</strong> 我很爱我的家庭，我们家一向很和睦，虽然我的父亲和母亲都是普通人，但是从小，我就看到我父亲起早贪黑，每天工作特别勤劳，他的行动无形中培养了我认真负责的态度和勤劳的精神。我母亲为人善良，对人热情，特别乐于助人，所以在单位人缘很好，她的一言一行也一直在教导我做人的道理。</p>
<h2 id="你认为自己申请这个职位还欠缺什么" tabindex="-1"> 你认为自己申请这个职位还欠缺什么?</h2>
<p><strong>回答提示：</strong> 企业喜欢问求职者弱点，但精明的求职者一般不直接回答。</p>
<p><strong>回答样本：</strong> 继续重复自己的优势，然后说：“对于这个职位和我的能力来说，我相信自己是可以胜任的，只是缺乏经验，这个问题可以进入公司以后以最短的时间来解决，我的学习能力很强，我相信可以很快融入公司的企业文化，进入工作状态。</p>
<h2 id="你欣赏哪种性格的人" tabindex="-1"> 你欣赏哪种性格的人?</h2>
<p><strong>回答提示：</strong> 诚实、不死板而且容易相处的人、有实际行动的人，加上具体例子。</p>
<h2 id="你通常如何处理别人的批评" tabindex="-1"> 你通常如何处理别人的批评?</h2>
<p><strong>回答提示：</strong> ①沈默是金，不必说什么，否则情况更糟，不过我会接受建设性的批评。②我会等大家冷静下来再讨论。</p>
<h2 id="怎样对待自己的失败" tabindex="-1"> 怎样对待自己的失败?</h2>
<p><strong>回答提示：</strong> 大意：我们生来都不是十全十美的，我相信我有第二个机会改正我的错误。</p>
<h2 id="什么会让你有成就感" tabindex="-1"> 什么会让你有成就感?</h2>
<p><strong>回答提示：</strong> 为贵公司竭力效劳，尽我所能，完成一个项目。</p>
<h2 id="眼下你生活中最重要的是什么" tabindex="-1"> 眼下你生活中最重要的是什么?</h2>
<p><strong>回答提示：</strong> 对我来说，能在这个领域找到工作是最重要的，能在贵公司任职对我说最重要。</p>
<h2 id="你为什么愿意到我们公司来工作" tabindex="-1"> 你为什么愿意到我们公司来工作?</h2>
<p><strong>回答提示：</strong> 对于这个问题，你要格外小心，如果你已经对该单位作了研究，你可以回答一些详细的原因。</p>
<p><strong>回答样本：</strong> ①公司本身高技术开发环境很吸引我我同公司出生在同样的时代，我希望能够进入一家与我共同成长的公司。②你们公司一直都稳定发展，在近几年来在市场上有竞争力。我认为贵公司能够给我提供一个与众不同的发展道路。</p>
<h2 id="你和别人发生过争执吗" tabindex="-1"> 你和别人发生过争执吗?</h2>
<p><strong>回答提示：</strong> 这是面试中最险恶的问题，其实是考官布下的一个陷阱，成功解决矛盾是一个协作团体中成员所必备的能力。假如你工作在一个服务行业，这个问题简直成了最重要的个环节。你是否能获得这份工作，将取决于这个问题的回答。考官希望看到你是成熟且乐于奉献的。他们通过这个问题了解你的成熟度和处世能力。在没有外界干涉的情况下，通过妥协的方式来解决才是正确答案。</p>
<h2 id="你做过的哪件事最令自己感到骄傲" tabindex="-1"> 你做过的哪件事最令自己感到骄傲?</h2>
<p><strong>回答提示：</strong> 这是考官给你的一个机会，让你展示自己把握命运的能力。这会体现你潜在的领导能力以及你被提升的可能性。假如你应聘于一个服务性质的单位，你很可能会被邀请去餐。记住：你的前途取决于你的知识、你的社交能力和综合表现。</p>
<h2 id="对这项工作-你有哪些可预见的困难" tabindex="-1"> 对这项工作，你有哪些可预见的困难?</h2>
<p><strong>回答提示：</strong> ①不宜直接说出具体的困难，否则可能令对方怀疑应聘者不行。②可以尝试迂回战术，说出应聘者对困难所持有的态度工作中出现一些困难是正常的，也是难免的，但是只要有坚忍不拔的毅力、良好的合作精神以及事前周密而充分的准备，任何困难都是可以克服。</p>
<h2 id="录用后你将怎样开展工作" tabindex="-1"> 录用后你将怎样开展工作?</h2>
<p><strong>回答提示：</strong> ①如果应聘者对于应聘的职位缺乏足够的了解，最好不要直接说出自己开展工作的具体办法。②可以尝试采用迂回战术来回答，如“首先听取领导的指示和要求，然后就有关情况进行了解和熟悉，接下来制定一份近期的工作计划并报领导批准，最后根据计划开展工作。”。</p>
<h2 id="你希望与什么样的上级共事" tabindex="-1"> 你希望与什么样的上级共事?</h2>
<p><strong>回答提示：</strong> ①通过应聘者对上级的“希望”可以判断出应聘者对自我要求的意识，这既上一个陷阱，又是一次机会。②最好回避对上级具体的希望，多谈对自己的要求。如“做为刚步入社会的新人，我应该多要求自己尽快熟悉环境、适应环境，而不应该对环境提出什么要求，只要能发挥我的专长就可以了。</p>
<h2 id="你工作经验欠缺-如何能胜任这项工作" tabindex="-1"> 你工作经验欠缺，如何能胜任这项工作?</h2>
<p><strong>回答提示：</strong> ①如果招聘单位对应届毕业生的应聘者提出这个问题，说明招聘公司并不真正在乎经验，关键看应聘者怎样回答。②对这个问题的回答最好要体现出应聘者的诚恳、机智、果敢及敬业。</p>
<p><strong>回答样本：</strong> 作为应届毕业生，在工作经验方面的确会有所欠缺，因此在读书期间我一直利用各种机会在这个行业里做兼职。我也发现，实际工作远比书本知识丰富、复杂。但我有较强的责任心、适应能力和学习能力，而且比较勤奋，所以在兼职中均能圆满完成各项工作，从中获取的经验也令我受益非浅。请贵公司放心，学校所学及兼职的工作经验使我一定能胜任这个职位。</p>
<h2 id="你会怎样获得同事的帮助" tabindex="-1"> 你会怎样获得同事的帮助?</h2>
<p><strong>回答提示：</strong> 每个公司都在不断变化发展的过程中，你当然希望你的员工也是这样。你希望得到那些希望并欢迎变化的人，因为这些明白，为了公司的发展，变化是公司日常生活中重要组成部分。这样的员工往往很容易适应公司的变化，并会对变化做出积极的响应。</p>
<h2 id="如果你没被录用-你怎么打算" tabindex="-1"> 如果你没被录用，你怎么打算?</h2>
<p><strong>回答样本：</strong> 现在的社会是一个竞争的社会，从这次面试中也可看出这一点，有竞争就必然有优劣，有成功必定就会有失败。往往成功的背后有许多的困难和挫折，如果这次失败了也仅仅是一次而已，只有经过经验经历的积累才能塑造出一个完全的成功者。我会从以下几个方面来正确看待这次失败：①要敢于面对，面对这次失败不气馁，接受已经失去了这次机会就不会回头这个现实，从心理意志和现出对这次失败的抵抗力。要有自信，相信自己经历了这次之后经过努力一定能行，能够超越自我。②善于反思，对于这次面试经验要认真总结，思考剖析，能够从自身的角度找差距正确对自己，实事求是地评价自己，辩证的看待自己的长短得失，做一个明白人。③走出阴影，克服这一次失败带给自己的心理压力，时刻牢记自己弱点，防患于未然，加强学习，提高自身素质。④认真工作，回到原单位岗位上后，要实实在在、踏踏实实地工作，三十六行行行出状元，争取在本岗位上做出一定的成绩。⑤再接再厉，以后如果有机会我仍然后再次参加竞争。</p>
<h2 id="最令你沮丧的事情" tabindex="-1"> 最令你沮丧的事情?</h2>
<p><strong>回答样本：</strong> 曾经接触过一个客户，原本就有耳闻他以挑剔出名，所以事前的准备功夫做得十分充分，也投入了相当多的时间与精力，最后客户虽然并没有照单全收，但是接受的程度已经出乎我们意料之外了。原以为从此可以合作愉快，却得知客户最后因为预算关系选择了另一家代理商，之前的努力因而付诸流水。尽管如此，我还是从这次的经验学到很多，如对该产业的了解，整个team的默契也更好了。</p>
<h2 id="想过创业吗" tabindex="-1"> 想过创业吗?</h2>
<p><strong>回答提示：</strong> 这个问题可以显示你的冲劲，但如果你的回答是“有”的话，千万小心，下一个问题可能就是：那么为什么你不这样做呢?</p>
<h2 id="为什么我们要在众多的面试者中选择你" tabindex="-1"> 为什么我们要在众多的面试者中选择你?</h2>
<p><strong>回答提示：</strong> 别过度吹嘘自己的能力，或信口开河地乱开支票，例如一定会为该公司带来多少钱的业务等，这样很容易给人一种爱说大话、不切实际的感觉。</p>
<p><strong>回答样本：</strong> 根据我对贵公司的了解，以及我在这份工作上所累积的专业、经验及人脉，相信正是贵公司所找寻的人才。而我在工作态度、EQ上，也有圆融、成熟的一面，和主管、同事都能合作愉快。</p>
<h2 id="除了本公司外-还应聘了哪些公司" tabindex="-1"> 除了本公司外，还应聘了哪些公司?</h2>
<p><strong>回答提示：</strong> 这是相当多公司会问的问题，其用意是要概略知道应征者的求职志向，所以这并非绝对是负面答案，就算不便说出公司名称，也应回答“销售同种产品的公司”，如果应聘的其他公司是不同业界，容易让人产生无法信任的感觉。</p>
<h2 id="你并非毕业于名牌院校" tabindex="-1"> 你并非毕业于名牌院校?</h2>
<p><strong>回答样本：</strong> 是否毕业于名牌院校不重要，重要的是有能力完成您交给我的工作，我接受了XX的职业培训，掌握的技能完全可以胜任贵公司现在工作，而且我比一些名牌院校的应届毕业生的动手能力还要强，我想我更适合贵公司这个职位。</p>
<h2 id="怎样看待学历和能力" tabindex="-1"> 怎样看待学历和能力?</h2>
<p><strong>回答样本：</strong> 学历我想只要是大学专科的学历，就表明觉得我具备了根本的学习能力。剩下的，你是学士也好，还是博士也好，对于这一点的讨论，不是看你学了多少知识，而是看你在这个领域上发挥了什么，也就是所说的能力问题。一个人工作能力的高低直接决定其职场命运，而学历的高低只是进入一个企业的敲门砖，如果公司把学历卡在博士上我就无法进入贵公司，当然这不一定只是我个人的损失，如果一个专科生都能完成的工作，您又何必非要招聘一位博士生呢?</p>
<h2 id="谈谈如何适应办公室工作的新环境" tabindex="-1"> 谈谈如何适应办公室工作的新环境?</h2>
<p><strong>回答样本：</strong> ①办公室里每个人都有各自的岗位与职责，不得擅离岗位。②根据领导指示和工作安排，制定工作计划，提前预备，并按计划完成。③多请示并及时汇报，遇到不明白的要虚心请教。④抓间隙时间，多学习，努力提高自己的政治素质和业务水平。</p>
<h2 id="谈谈对这个职务的期许" tabindex="-1"> 谈谈对这个职务的期许?</h2>
<p><strong>回答提示：</strong> 回答前不妨先询问公司对这项职务的责任认定及归属，因为每一家公司的状况不尽相同，以免说了一堆理想抱负却发现牛头不对马嘴。</p>
<p><strong>回答样本：</strong> 希望能借此发挥我的所学及专长，同时也吸收贵公司在这方面的经验，就公司、我个人而言，缔造双赢的局面。</p>
<h2 id="何时可以到职" tabindex="-1"> 何时可以到职?</h2>
<p><strong>回答提示：</strong> 大多数企业会关心就职时间，最好是回答：“如果被录用的话，到职日可以按公司规定上班”，但是如果还未辞去上一个工作、上班时间又太近，似乎有些强人所难，因为交接至少要一个月的时间，应进一步说明原因，录取公司应该会通融的。</p>
]]></content:encoded>
    </item>
  </channel>
</rss>